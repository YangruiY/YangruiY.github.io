{"type":"getPostById","data":{"title":"fail-fast&fail-safe","date":"2023-11-03T13:34:11.000Z","description":"fail-fast & fail-safe 浅析","categories":[{"name":"fail","_id":"cloioo9eb0051ni0p9ll14z9i"}],"tags":[{"name":"集合","_id":"cloioo9eq008jni0pgyzy8as9"}],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n<h2 id=\"fail-fast\">fail-fast</h2>\n<h3 id=\"是什么\">是什么</h3>\n<ul>\n<li>\n<p>快速失败机制:在遍历集合元素的时候经常使用迭代器，但是在迭代器的<strong>遍历</strong>元素的过程中，要是集合中的<strong>元素结构</strong>被改变的话就会抛出异常，<strong>防止继续遍历</strong></p>\n</li>\n<li>\n<p>是java 集合中的一种错误检测的机制，当多/单 线程在结构上对集合进行改变的时候就可能产生 fail-fast机制</p>\n<blockquote>\n<p>什么是结构上的改变？： 就是在集合上的插入和删除，但是针对某个元素的修改并不是结构上的改变</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"演示案例\">演示案例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            temp++;</span><br><span class=\"line\">            list.remove(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp++;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.base/java.util.ArrayList<span class=\"variable\">$Itr</span>.checkForComodification(ArrayList.java:1013)</span><br><span class=\"line\">\tat java.base/java.util.ArrayList<span class=\"variable\">$Itr</span>.next(ArrayList.java:967)</span><br><span class=\"line\">\tat com.ry.learning.study.ff_fs.main(ff_fs.java:19)</span><br></pre></td></tr></table></figure>\n<h3 id=\"源码分析\">源码分析</h3>\n<blockquote>\n<p>追踪<code>iterator</code>源码之后：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&lt;E&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lastRet</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">expectedModCount</span> <span class=\"operator\">=</span> modCount;\t\t\t\t\t</span><br><span class=\"line\">  <span class=\"comment\">// 创建迭代器的时候就会 初始化 modcount；对集合的  修改   只会改变 modcount </span></span><br><span class=\"line\">        Itr() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> E <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            checkForComodification();                   <span class=\"comment\">//--------------------------遍历集合才会可能抛出并发修改异常</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> cursor;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>();</span><br><span class=\"line\">            Object[] elementData = ArrayList.<span class=\"built_in\">this</span>.elementData;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentModificationException</span>();</span><br><span class=\"line\">            cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>();</span><br><span class=\"line\">            checkForComodification();                   <span class=\"comment\">//----------------- remove  的时候会报这个异常</span></span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ArrayList.<span class=\"built_in\">this</span>.remove(lastRet);</span><br><span class=\"line\">                cursor = lastRet;</span><br><span class=\"line\">                lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                expectedModCount = modCount;\t\t\t\t\t</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentModificationException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">forEachRemaining</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> E&gt; consumer)</span> &#123;</span><br><span class=\"line\">            Objects.requireNonNull(consumer);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> ArrayList.<span class=\"built_in\">this</span>.size;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> cursor;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= size) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Object[] elementData = ArrayList.<span class=\"built_in\">this</span>.elementData;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= elementData.length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentModificationException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class=\"line\">                consumer.accept((E) elementData[i++]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// update once at end of iteration to reduce heap write traffic</span></span><br><span class=\"line\">            cursor = i;</span><br><span class=\"line\">            lastRet = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkForComodification</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentModificationException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"根本原因\">根本原因</h3>\n<blockquote>\n<p>所以导致产生异常的原因是：<code>remove</code>和<code>add</code>操作会导致<code>modCount</code>和迭代器中的<code>expectedModCount</code>不一致。</p>\n</blockquote>\n<h3 id=\"解决方案\">解决方案</h3>\n<ol>\n<li>使用一般的for （<code>for (int i = 0; i &lt; list.size(); i++)</code>）循环而不是迭代器</li>\n<li>如果一定要使用增强的for循环，那么前提条件就是: 确定在一个集合中某个即将删除的元素只<code>包含一个</code>的话;  那么只要在删除之后，立刻结束循环体，不要再继续进行遍历就可以了<code>break 掉即可</code>，也就是说不让代码执行到下一次的next方法。</li>\n<li>如果非要在遍历的时候修改集合元素，那么建议用迭代器的remove等方法<code> iterator.remove();</code>，而不是用集合的remove等方法</li>\n<li>如果是并发的环境，要对<code>Iterator</code>对象加锁；也可以直接使用<code>Collections.synchronizedList</code>。就是说：如果我们不希望在迭代器遍历的时候因为并发等原因，导致集合的结构被改变，进而可能抛出异常的话，我们可以在涉及到会影响到modCount值改变的地方，加上同步锁(synchronized),或者直接使用Collections.synchronizedList来解决。</li>\n<li><code>java.util.concurrent</code>包下的容器都是安全失败，可以在多线程下并发使用，并发修改,如：<code>CopyOnWriteArrayList</code>（采用<code>fail-safe</code>）</li>\n<li>使用java8 把集合转换成流，再使用 <code>filter</code> 进行过滤</li>\n</ol>\n<h2 id=\"fail-safe\">fail-safe</h2>\n<ul>\n<li>采用安全失败机制的集合容器(<code>CopyOnWrite</code>)，在 <code>Iterator</code> 的实现上没有设计抛出 <code>ConcurrentModificationException </code>的代码段，从而避免了<code>fail-fast</code></li>\n</ul>\n<blockquote>\n<p><code>CopyOnWrite</code>的基本原理： 当我们往一个容器添加元素的时候，先将当前容器复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，<code>再将原容器的引用指向新的容器</code>。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以<code>CopyOnWrite</code>容器也是一种<code>读写分离</code>的思想，读和写不同的容器。</p>\n</blockquote>\n<blockquote>\n<p>注意： 使用<code>CopyOnWrite</code> 的进行 add 的时候会加锁,就会避免多个线程 同时写的时候会复制出N个副本出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\"> lock.lock();</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     Object[] elements = getArray();</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> elements.length;</span><br><span class=\"line\">     Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">     newElements[len] = e;</span><br><span class=\"line\">     setArray(newElements);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"> &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">     lock.unlock();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>内存占用问题</strong>：</p>\n<ol>\n<li>\n<p>因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在<code>复制</code>的时候<code>只是复制容器里的引用</code>，只是在<code>写的时候</code>会创建<code>新对象添加到新容器里</code>，而<code>旧容器的对象还在使用</code>，所以有两份对象内存）。</p>\n</li>\n<li>\n<p>如果这些对象占用的内存比较大，假设200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。</p>\n</li>\n</ol>\n<p>**数据一致性：**只能保证最终一致性，不是强一致的</p>\n</blockquote>\n<h3 id=\"原因分析\">原因分析</h3>\n<p>由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发<code>ConcurrentModificationException</code>。</p>\n<p><code>java.util.concurrent</code>包下的容器都是安全失败，可以在多线程下并发使用，并发修改</p>\n<h3 id=\"演示案例-2\">演示案例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    CopyOnWriteArrayList&lt;Integer&gt; copyOnWriteArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        copyOnWriteArrayList.add(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Iterator&lt;Integer&gt; iterator1 = copyOnWriteArrayList.iterator();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(iterator1.hasNext())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp == <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">            copyOnWriteArrayList.remove(<span class=\"number\">5</span>);</span><br><span class=\"line\">            temp++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp++;</span><br><span class=\"line\">            System.out.println(iterator1.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0  1  2  3  4  5  6  7  8  9  </span><br></pre></td></tr></table></figure>\n","_path":"post/71bda363.html","_link":"http://rycan.top/post/71bda363.html","_id":"cloioo9e7004hni0p7iu2fvv6"}}