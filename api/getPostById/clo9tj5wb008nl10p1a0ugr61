{"type":"getPostById","data":{"title":"集合","date":"2023-09-06T15:50:13.000Z","description":"Java之集合","categories":[{"name":"Java","_id":"clo9tj5vb0010l10pbo7k763s"}],"tags":[{"name":"Java","_id":"clo9tj5vb0011l10pfhdd4tmu"}],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>String类是不可以对 字符串 进行修改的  可以选择使用 StringBuffer  或者 StringBuilder</li>\n<li>new  String();   创建一个String 对象</li>\n<li>str.length()    计算字符串的数量 会包括 空格 的数量</li>\n<li><p>str.concat(s)/str + s   连接字符串</p>\n</li>\n<li><p>printf()   /   format() 可以进行格式化</p>\n<ul>\n<li>format() 是用来创建可以复用的格式化  String.format()  返回的是一个对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">SN(序号)</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-charat.html\">char charAt(int index) </a>返回指定索引处的 char 值(从 0  开始)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-compareto.html\">int compareTo(Object o) </a>把这个字符串和另一个对象比较（str1.compareTo(str2)）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-compareto.html\">int compareTo(String anotherString) </a>按字典顺序比较两个字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-comparetoignorecase.html\">int compareToIgnoreCase(String str) </a>按字典顺序比较两个字符串，不考虑大小写。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-concat.html\">String concat(String str) </a>将指定字符串连接到此字符串的结尾。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-contentequals.html\">boolean contentEquals(StringBuffer sb) </a>当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-copyvalueof.html\">static String copyValueOf(char[] data) </a>返回指定数组中表示该字符序列的 String。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-copyvalueof.html\">static String copyValueOf(char[] data, int offset, int count) </a>返回指定数组中表示该字符序列的 String。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-endswith.html\">boolean endsWith(String suffix)</a> 测试此字符串是否以指定的后缀结束。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-equals.html\">boolean equals(Object anObject) </a>将此字符串与指定的对象比较。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-equalsignorecase.html\">boolean equalsIgnoreCase(String anotherString) </a>将此 String 与另一个 String 比较，不考虑大小写。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-getbytes.html\">byte[] getBytes() </a> 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-getbytes.html\">byte[] getBytes(String charsetName) </a>使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此字符串复制到目标字符数组。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-hashcode.html\">int hashCode() </a>返回此字符串的哈希码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-indexof.html\">int indexOf(int ch) </a>返回指定字符在此字符串中第一次出现处的索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-indexof.html\">int indexOf(int ch, int fromIndex) </a>返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-indexof.html\">int indexOf(String str) </a> 返回指定子字符串在此字符串中第一次出现处的索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-indexof.html\">int indexOf(String str, int fromIndex) </a>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-intern.html\">String intern() </a> 返回字符串对象的规范化表示形式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-lastindexof.html\">int lastIndexOf(int ch) </a> 返回指定字符在此字符串中最后一次出现处的索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-lastindexof.html\">int lastIndexOf(int ch, int fromIndex) </a>返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-lastindexof.html\">int lastIndexOf(String str) </a>返回指定子字符串在此字符串中最右边出现处的索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-lastindexof.html\">int lastIndexOf(String str, int fromIndex) </a> 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-length.html\">int length() </a>返回此字符串的长度。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-matches.html\">boolean matches(String regex) </a>告知此字符串是否匹配给定的正则表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-regionmatches.html\">boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len) </a>测试两个字符串区域是否相等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-regionmatches.html\">boolean regionMatches(int toffset, String other, int ooffset, int len) </a>测试两个字符串区域是否相等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-replace.html\">String replace(char oldChar, char newChar) </a>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-replaceall.html\">String replaceAll(String regex, String replacement )</a>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">31</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-replacefirst.html\">String replaceFirst(String regex, String replacement) </a> 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">32</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-split.html\">String[] split(String regex) </a>根据给定正则表达式的匹配拆分此字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">33</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-split.html\">String[] split(String regex, int limit) </a>根据匹配给定的正则表达式来拆分此字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">34</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-startswith.html\">boolean startsWith(String prefix) </a>测试此字符串是否以指定的前缀开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">35</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-startswith.html\">boolean startsWith(String prefix, int toffset) </a>测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">36</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-subsequence.html\">CharSequence subSequence(int beginIndex, int endIndex) </a> 返回一个新的字符序列，它是此序列的一个子序列。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">37</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-substring.html\">String substring(int beginIndex) </a>返回一个新的字符串，它是此字符串的一个子字符串。<code>[ )</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">38</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-substring.html\">String substring(int beginIndex, int endIndex) </a>返回一个新字符串，它是此字符串的一个子字符串。<code>[ )</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">39</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-tochararray.html\">char[] toCharArray() </a>将此字符串转换为一个新的字符数组。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">40</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-tolowercase.html\">String toLowerCase() </a>使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">41</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-tolowercase.html\">String toLowerCase(Locale locale) </a> 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">42</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-tostring.html\">String toString() </a> 返回此对象本身（它已经是一个字符串！）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">43</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-touppercase.html\">String toUpperCase() </a>使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">44</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-touppercase.html\">String toUpperCase(Locale locale) </a>使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">45</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-trim.html\">String trim() </a>返回字符串的副本，忽略前导空白和尾部空白。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">46</td>\n<td style=\"text-align:left\"><a href=\"https://www.w3cschool.cn/java/java-string-valueof.html\">static String valueOf(primitive data type x)</a>返回给定data type类型x参数的字符串表示形式</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>boolean add(Object obj)</strong> 添加obj 到调用集合。如果obj被添加到集合，则返回true。如果obj已经是集合的成员或者如果集合不允许重复则返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>boolean addAll(Collection c)</strong> 增加了C的所有元素到调用集合。返回true如果操作成功（即，被添加的元素）。否则，返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>void clear( )</strong> 移除调用集合中的所有元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>boolean contains(Object obj)</strong> 如果obj是调用集合中的一个元素返回true。否则，返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>boolean containsAll(Collection c)</strong> 如果调用集合中包含c的所有元素返回true。否则，返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>boolean equals(Object obj)</strong> 如果调用集合与obj相等返回true。否则，返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><strong>int hashCode( )</strong> 返回调用集合的哈希代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><strong>boolean isEmpty( )</strong> 如果调用集合为空返回true。否则，返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><strong>Iterator iterator( )</strong> 返回一个迭代器的调用集合。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><strong>boolean remove(Object obj)</strong> 从调用集合中移除一个实例obj。如果被删除的元素，则返回true。否则，返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\"><strong>boolean removeAll(Collection c)</strong> 删除从调用集合c中的所有元素。返回true如果集合改变（即，被删除的元素）。否则，返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\"><strong>boolean retainAll(Collection c)</strong> 删除在 c  中不存在的集合。如果集合改变（即，被删除的元素）返回true。否则，返回false<strong>。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><strong>int size( )</strong> 返回调用集合的元素个数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\"><strong>Object[ ] toArray( )</strong> 返回包含所有存储在调用集合的元素的数组。数组元素是元素集合的副本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\"><strong>Object[ ] toArray(Object array[ ])</strong> 返回一个只包含那些元素集合的类型匹配数组的数组。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>void add(int index, Object obj)</strong> Inserts obj 插入到调用列表中的索引通过索引处。达到或超出插入点任何预先存在的要素被上移。因此，不会有元素被覆盖。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>boolean addAll(int index, Collection c)</strong> 插入c的所有元素入索引通过索引处的调用列表。等于或超出插入点任何预先存在的要素被上移。因此，没有任何元素被覆盖。如果调用列表更改并返回true，否则返回false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>Object get(int index)</strong> 返回存储调用集合中指定索引处的对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>int indexOf(Object obj)</strong> 返回调用列表obj的第一个实例的索引。如果obj不是列表中的一个元素，则返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>int lastIndexOf(Object obj)</strong> 返回调用列表obj的最后一个实例的索引。如果obj不是列表中的一个元素，则返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>ListIterator listIterator( )</strong> 返回一个迭代器调用列表的开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><strong>ListIterator listIterator(int index)</strong> 返回一个迭代器调用列表开头的在指定索引处。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><strong>Object remove(int index)</strong> 从调用列表删除index位置的元素，并返回被删除的元素。结果列表中被压缩。也就是说，随后的元素的索引减一。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><strong>Object set(int index, Object obj)</strong> 赋予obj转换通过索引调用列表中指定的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><strong>List subList(int start, int end)</strong> 返回一个列表，其中包括在调用列表，从开始元素end-1。在返回列表中的元素也被调用对象的引用。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">void clear( )  从此映射中移除所有映射关系（可选操作）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">boolean containsKey(Object k) 如果此映射包含指定键的映射关系，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">boolean containsValue(Object v) 如果此映射将一个或多个键映射到指定值，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">Set entrySet( ) 返回此映射中包含的映射关系的 Set 视图。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">boolean equals(Object obj) 比较指定的对象与此映射是否相等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">Object get(Object k) 返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">int hashCode( ) 返回此映射的哈希码值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">boolean isEmpty( ) 如果此映射未包含键-值映射关系，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">Set keySet( ) 返回此映射中包含的键的 Set 视图。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">Object put(Object k, Object v) 将指定的值与此映射中的指定键关联（可选操作）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">void putAll(Map m) 从指定映射中将所有映射关系复制到此映射中（可选操作）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">Object remove(Object k) 如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">int size( ) 返回此映射中的键-值映射关系数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">Collection values( ) 返回此映射中包含的值的 Collection 视图。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>HashMap 的<code>put()</code> 的方法的底层源码角度而言：</p>\n<ol>\n<li>先检查hash table 是不是为 空 或者长度为 0 ，是的话要调用函数  resize()  扩容初始化</li>\n<li>计算槽位索引<code>i</code>，并得到这个位置的节点是不是空的，是空的话就 创建一个节点</li>\n<li>要是 不是空的话就 可能会要处理哈希冲突<ol>\n<li>如果当前槽位上的节点 的  哈希值 和要插入的 键 相匹配，匹配成功，就说明有相同的键了，直接进行更新对应的值</li>\n<li>如果当前节点为树节点，就调用树的插入方法进行插入<code>putTreeVal</code></li>\n<li>如果当前节点是链表中的节点，就循环遍历链表（直到找到匹配的节点 或者到 链表的尾部 ）<ol>\n<li>如果链表 末尾 为空，就在链表结尾进行插入 一个新的节点，随后必要的时候转化为树（转为树： 链表长度（<code>binCount</code>）达到或超过阈值（<code>TREEIFY_THRESHOLD = 8</code>）时，会触发将链表转换为 红黑树的操作（<code>treeifyBin</code>），转为红黑树的目的是：提高在大量哈希冲突的情况下的查找和插入效率）</li>\n<li>要是遍历过程中找到相同的键，就对该值进行更新</li>\n<li>随后进行后续的操作：调整容量、插入后处理等，并返回旧值或<code>null</code>（插入的时候没有替换或覆盖任何现有的键值对，插入的是新的值）【注意：返回<code>null</code>并不意味着插入操作一定成功。在某些情况下，插入操作可能会失败，例如当哈希表的容量已满时，会触发扩容操作，此时插入操作可能会返回<code>null</code>。】</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>HashMap 的<code>resize()</code> 的方法的底层源码角度而言：</p>\n<ul>\n<li>扩容主要是根据当前<code>HashMap</code>的<code>状态和阈值</code>来确定新数组的容量和阈值，并将旧数组中的元素重新分配到新数组中。</li>\n</ul>\n<ol>\n<li><p>首先，函数会保存旧数组的引用，并获取<code>旧数组的长度和阈值</code>。</p>\n</li>\n<li><p>然后，根据旧数组的情况和阈值的计算方式，确定新数组的容量和阈值。</p>\n<ul>\n<li><p>如果旧数组存在，旧容量会进行<code>两倍</code>计算得到新容量，并根据旧阈值的两倍计算新阈值。</p>\n<ul>\n<li>如果旧容量已经达到HashMap的<code>最大容量</code>（MAXIMUM_CAPACITY），则阈值被设置为最大整数值，表示已达到HashMap的最大容量。</li>\n</ul>\n</li>\n<li><p>如果旧数组不存在但旧阈值存在，则新容量被设置为旧阈值，并根据负载因子（DEFAULT_LOAD_FACTOR）计算新阈值。</p>\n</li>\n<li><p>如果既没有旧数组也没有旧阈值，则新容量被设置为默认初始容量（DEFAULT_INITIAL_CAPACITY），并根据默认负载因子计算新阈值。</p>\n</li>\n</ul>\n</li>\n<li><p>如果新阈值计算为0，则根据新容量和负载因子计算新阈值。计算方式是将新容量乘以负载因子，然后将结果转换为整数。如果新容量小于最大容量且结果小于最大容量，则新阈值被限制为结果值；否则，新阈值被设置为最大整数值。</p>\n</li>\n<li><p>函数会更新阈值，并根据新容量创建一个新的数组。随后，遍历旧数组中的元素，并根据元素的哈希值将它们重新分配到新数组的相应位置。</p>\n<ul>\n<li>对于链表节点，它会根据哈希值的不同将节点分配到新数组的不同位置。</li>\n<li>对于树节点（红黑树），它会调用<code>split()</code>方法来重新分配节点。</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"Map-Entry\"><a href=\"#Map-Entry\" class=\"headerlink\" title=\"Map.Entry\"></a>Map.Entry</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>boolean equals(Object obj)</strong> 如果obj是一个Map.Entry返回true，其键和值都等于调用对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>Object getKey( )</strong> 返回此映射项的键。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>Object getValue( )</strong> 返回此映射项的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>int hashCode( )</strong> 返回此映射项的哈希码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>Object setValue(Object v)</strong> 此映射条目<strong>v</strong>的集合. 如果<strong>v</strong>是不正确的类型，映射抛出一个ClassCastException异常值。如果v是空和映射不允许null键则抛出NullPointerException异常。一个UnsupportedOperationException被抛出如果映射不能更改。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"SortedMap\"><a href=\"#SortedMap\" class=\"headerlink\" title=\"SortedMap\"></a>SortedMap</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>Comparator comparator( )</strong> 返回调用的有序映射的比较器。如果自然顺序用于调用映射，则返回null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>Object firstKey( )</strong> 返回调用映射的第一个键。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>SortedMap headMap(Object end)</strong> 返回的有序映射为那些映射条目与小于结束键。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>Object lastKey( )</strong> 返回调用映射的最后一个键。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>SortedMap headMap(Object end)</strong> 返回的有序映射为那些映射条目与小于结束键。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>SortedMap tailMap(Object start)</strong> 返回包含与是大于或等于开始键的那些条目的映射。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>add( )</strong> 将对象添加到集合。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>clear( )</strong> 从集合中移除所有对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>contains( )</strong> 如果指定的对象是集合中的元素返回true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>isEmpty( )</strong> 如果集合不包含任何元素，则返回true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>iterator( )</strong> 返回一个Iterator对象，可用于检索对象的集合。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>remove( )</strong> 从集合中删除指定的对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><strong>size( )</strong> 返回元素集合中的数。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"SortedSet\"><a href=\"#SortedSet\" class=\"headerlink\" title=\"SortedSet\"></a>SortedSet</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">号</th>\n<th style=\"text-align:left\">方法描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>Comparator comparator( )</strong> 返回调用有序set的比较。如果自然顺序用于此set，则返回null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>Object first( )</strong> 返回调用排序集合的第一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>SortedSet headSet(Object end)</strong> 返回包含包含在调用的有序set的元素小于结束一个SortedSet。在返回的有序set的元素也被调用的有序set引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>Object last( )</strong> 返回调用排序集合的最后一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>SortedSet subSet(Object start, Object end)</strong> 返回一个SortedSet，包括开始和end-1之间的那些元素。被返回的集合中的元素也被调用对象引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>SortedSet tailSet(Object start)</strong> 返回包含大于或等于启动包含在有序集合这些元素的SortedSet。在返回的集合中的元素也被调用对象的引用。</td>\n</tr>\n</tbody>\n</table>\n</div>\n","_path":"post/d366874c.html","_link":"http://rycan.top/post/d366874c.html","_id":"clo9tj5wb008nl10p1a0ugr61"}}