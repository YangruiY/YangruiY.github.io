{"type":"getPostById","data":{"title":"NGINX","date":"2023-07-03T12:50:44.000Z","description":"NGINX","categories":[{"name":"中间件","_id":"cll0ona6n0004k30pc11k0o3h"}],"tags":[{"name":"NGINX","_id":"cll0ona74002kk30pf1n9ht8k"}],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"NGINX\"><a href=\"#NGINX\" class=\"headerlink\" title=\"NGINX\"></a>NGINX</h2><h3 id=\"Nginx-概述\"><a href=\"#Nginx-概述\" class=\"headerlink\" title=\"Nginx 概述\"></a>Nginx 概述</h3><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141254871.png\" alt=\"image-20230314125417803\" style=\"zoom:33%;\"></p>\n<h4 id=\"nginx是什么：\"><a href=\"#nginx是什么：\" class=\"headerlink\" title=\"nginx是什么：\"></a>nginx是什么：</h4><p>Nginx 是高性能的 HTTP 和反向代理的服务器，处理高并发能力是十分强大的，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</p>\n<h4 id=\"能做什么\"><a href=\"#能做什么\" class=\"headerlink\" title=\"能做什么\"></a>能做什么</h4><h5 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h5><h6 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h6><p>Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。</p>\n<p>正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132249800.png\" alt=\"image-20230313224904784\" style=\"zoom:25%;\"></p>\n<p><strong>就是</strong>：</p>\n<p>需要在客户端配置代理服务器进行指定网站访问</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132248824.png\" alt=\"image-20230313224834798\" style=\"zoom:25%;\"></p>\n<h6 id=\"反向代理-1\"><a href=\"#反向代理-1\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h6><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132250342.png\" alt=\"image-20230313225019322\" style=\"zoom:26%;\"></p>\n<p><strong>就是</strong>：</p>\n<p>暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132253933.png\" alt=\"image-20230313225300914\" style=\"zoom:26%;\"></p>\n<h5 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h5><h6 id=\"普通的请求响应状态：\"><a href=\"#普通的请求响应状态：\" class=\"headerlink\" title=\"普通的请求响应状态：\"></a>普通的请求响应状态：</h6><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服</p>\n<p>务器处理完毕后，再将结果返回给客户端。这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132244468.png\" alt=\"image-20230313224445447\" style=\"zoom:25%;\"></p>\n<p>但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂</p>\n<p>度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题。</p>\n<p>==解决==：</p>\n<p><strong>不可行的方案</strong>：</p>\n<p>​    我们首先想到的可能是升级服务器的配置，比如提高 CPU 执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。</p>\n<p><strong>可行的方案：</strong></p>\n<p>上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题</p>\n<p>的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的<strong>负载均衡</strong></p>\n<h6 id=\"负载均衡-1\"><a href=\"#负载均衡-1\" class=\"headerlink\" title=\"负载均衡:\"></a>负载均衡:</h6><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132257116.png\" alt=\"image-20230313225752097\" style=\"zoom:25%;\"></p>\n<h5 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h5><h6 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h6><ul>\n<li><p>Nginx 动静分离简单来说就是把动态跟静态请求分开</p>\n</li>\n<li><p>不能理解成只是单纯的把动态页面和<strong>静态页面</strong>物理分离</p>\n</li>\n<li><p>严格意义上说应该是<strong>动态请求</strong>跟<strong>静态请求</strong>分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。</p>\n</li>\n</ul>\n<p><strong>就是</strong>：</p>\n<p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p>\n<p><strong>单服务部署所有内容</strong>：</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132305229.png\" alt=\"image-20230313230529210\" style=\"zoom:25%;\"></p>\n<p><strong>解决单服务器给tomcat带来的压力：</strong></p>\n<blockquote>\n<p>将静态页面 与 动态页面交由不同的服务器完成 。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132307127.png\" alt=\"image-20230313230740109\" style=\"zoom:25%;\"></p>\n<h6 id=\"实现角度：\"><a href=\"#实现角度：\" class=\"headerlink\" title=\"实现角度：\"></a>实现角度：</h6><p>动静分离从目前实现角度来讲大致分为两种</p>\n<ul>\n<li>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</li>\n</ul>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140115469.png\" alt=\"image-20230314011537438\" style=\"zoom: 25%;\"></p>\n<ul>\n<li>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</li>\n</ul>\n<blockquote>\n<p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以设置浏览器缓存过期时间，减少与服务器之前的请求和流量。</p>\n<ul>\n<li><p>Expires 定义：</p>\n<p>给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。</p>\n</li>\n</ul>\n<p>此种方法非常适合不经常变动的资源（如果经常更新的文件，不建议使用 Expires 来缓存）</p>\n<p>我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p>\n</blockquote>\n<h3 id=\"nginx常用命令\"><a href=\"#nginx常用命令\" class=\"headerlink\" title=\"nginx常用命令\"></a>nginx常用命令</h3><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141304488.png\" alt=\"image-20230314130412445\" style=\"zoom:43%;\"></p>\n<blockquote>\n<p>==注==：</p>\n<p>我使用hombrew 安装的nginx</p>\n<p>查找安装的目录：  brew list nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/.bottle/etc/ (15 files)</span><br><span class=\"line\">&lt;配置文件.conf就在这&gt;</span><br><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/bin/nginx</span><br><span class=\"line\">&lt;安装路径&gt;</span><br><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/homebrew.mxcl.nginx.plist</span><br><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/homebrew.nginx.service</span><br><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/html -&gt; ../../../var/www</span><br><span class=\"line\">&lt;服务器默认路径&gt;</span><br><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/share/man/man8/nginx.8</span><br><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/share/nginx/ (2 files)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"版本号：\"><a href=\"#版本号：\" class=\"headerlink\" title=\"版本号：\"></a>版本号：</h5><p>nginx -v</p>\n<h5 id=\"启动nginx：\"><a href=\"#启动nginx：\" class=\"headerlink\" title=\"启动nginx：\"></a>启动nginx：</h5><p>sudo /opt/homebrew/Cellar/nginx/1.23.1/bin/nginx -c /opt/homebrew/Cellar/nginx/1.23.1/.bottle/etc/nginx/nginx.conf</p>\n<h6 id=\"启动成功标志1：\"><a href=\"#启动成功标志1：\" class=\"headerlink\" title=\"启动成功标志1：\"></a>启动成功标志1：</h6><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132324940.png\" alt=\"image-20230313232456920\" style=\"zoom:25%;\"></p>\n<h6 id=\"启动成功的标志2：\"><a href=\"#启动成功的标志2：\" class=\"headerlink\" title=\"启动成功的标志2：\"></a>启动成功的标志2：</h6><blockquote>\n<p>在终端输入：ps -ef |grep nginx</p>\n<p>结果为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 47299     1   0 11:19下午 ??         0:00.00 nginx: master process /opt/homebrew/Cellar/nginx/1.23.1/bin/nginx -c /opt/homebrew/Cellar/nginx/1.23.1/.bottle/etc/nginx/nginx.conf  </span><br><span class=\"line\"></span><br><span class=\"line\">-2 47300 47299   0 11:19下午 ??         0:00.00 nginx: worker process  </span><br><span class=\"line\"></span><br><span class=\"line\">501 47302 43864   0 11:19下午 ttys000    0:00.00 grep nginx</span><br></pre></td></tr></table></figure>\n<p>即：</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132326519.png\" alt=\"image-20230313232652497\" style=\"zoom:33%;\"></p>\n</blockquote>\n<h5 id=\"停止nginx\"><a href=\"#停止nginx\" class=\"headerlink\" title=\"停止nginx:\"></a>停止nginx:</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kill -QUIT 47299(从容的停止，即不会立刻停止)</span><br><span class=\"line\">sudo kill -TERM 47299（立刻停止）</span><br><span class=\"line\">sudo kill -INT  47299 （和上面一样，也是立刻停止）</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132328855.png\" alt=\"image-20230313232843830\" style=\"zoom: 50%;\"></p>\n<h5 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h5><p>1、cd /opt/homebrew/Cellar/nginx/1.23.1/bin</p>\n<p>2、sudo ./nginx -s reload</p>\n<p>==报错有待解决：==</p>\n<h3 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h3><h4 id=\"位置：\"><a href=\"#位置：\" class=\"headerlink\" title=\"位置：\"></a>位置：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/homebrew/Cellar/nginx/1.23.1/.bottle/etc/nginx/nginx.conf  </span><br></pre></td></tr></table></figure>\n<p><img src=\"/post/../Library/Application%20Support/typora-user-images/image-20230314130701023.png\" alt=\"image-20230314130701023\" style=\"zoom:33%;\"></p>\n<p>我们可以很明显的将 nginx.conf 配置文件分为三部分：</p>\n<h4 id=\"第一部分：全局块\"><a href=\"#第一部分：全局块\" class=\"headerlink\" title=\"第一部分：全局块\"></a>第一部分：全局块</h4><p>从配置文件开始到 events 块之间的内容，主要会<code>设置一些影响 nginx 服务器整体运行的配置指令</code></p>\n<p>主要包括</p>\n<blockquote>\n<ul>\n<li><p>配置运行 Nginx 服务器的用户（组）</p>\n</li>\n<li><p>允许生成的 worker process 数</p>\n</li>\n<li><p>日志存放路径和类型</p>\n</li>\n<li><p>配置文件的引入</p>\n</li>\n<li>进程 PID 存放路径</li>\n<li>等等</li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">user  nobody;</span></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这是 Nginx 服务器并发处理服务的关键配置，</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">error_log  logs/error.log  info;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">pid        logs/nginx.pid;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"第二部分：events-块\"><a href=\"#第二部分：events-块\" class=\"headerlink\" title=\"第二部分：events 块\"></a>第二部分：events 块</h4><p>events 块涉及的指令主要<code>影响 Nginx 服务器与用户的网络连接</code></p>\n<p>常用的设置包括</p>\n<blockquote>\n<ul>\n<li><p>是否开启对多 work process 下的网络连接进行序列化</p>\n</li>\n<li><p>是否允许同时接收多个网络连接</p>\n</li>\n<li><p>选取哪种事件驱动模型来处理连接请求</p>\n</li>\n<li><p>每个 word process 可以同时支持的最大连接数</p>\n</li>\n<li>等等</li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">表示每个 work process 支持的最大连接数为 1024.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"第三部分：http-块\"><a href=\"#第三部分：http-块\" class=\"headerlink\" title=\"第三部分：http 块\"></a>第三部分：http 块</h4><p>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p>\n<p>需要注意的是：http 块也可以包括 http 全局块、server块。</p>\n<h5 id=\"①、http-全局块\"><a href=\"#①、http-全局块\" class=\"headerlink\" title=\"①、http 全局块\"></a>①、http 全局块</h5><p>http 全局块配置的指令包括</p>\n<blockquote>\n<ul>\n<li><p>文件引入</p>\n</li>\n<li><p>MIME-TYPE 定义</p>\n</li>\n<li><p>日志自定义</p>\n</li>\n<li><p>连接超时时间</p>\n</li>\n<li><p>单链接请求数上限</p>\n<p>…</p>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"②、server块\"><a href=\"#②、server块\" class=\"headerlink\" title=\"②、server块\"></a>②、server块</h5><p>这块<code>和虚拟主机有密切关系</code>，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p>\n<ul>\n<li><p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个<code>虚拟主机</code>。</p>\n</li>\n<li><p>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p>\n</li>\n</ul>\n<h6 id=\"1、全局-server-块\"><a href=\"#1、全局-server-块\" class=\"headerlink\" title=\"1、全局 server 块\"></a>1、全局 server 块</h6><p>最常见的配置是</p>\n<blockquote>\n<ul>\n<li>本虚拟机主机的监听配置</li>\n<li>本虚拟主机的名称或 IP 配置</li>\n</ul>\n</blockquote>\n<h6 id=\"2、location-块\"><a href=\"#2、location-块\" class=\"headerlink\" title=\"2、location 块\"></a>2、location 块</h6><p>一个 server 块可以配置多个 location 块。</p>\n<p>这块的主要作用是</p>\n<blockquote>\n<ul>\n<li><p>基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，</p>\n</li>\n<li><p>对特定的请求进行处理</p>\n</li>\n<li><p>地址定向、数据缓存和应答控制等功能</p>\n</li>\n<li>许多第三方模块的配置也在这里进行。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       8080;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">    include servers/*;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-配置实例\"><a href=\"#nginx-配置实例\" class=\"headerlink\" title=\"nginx 配置实例\"></a>nginx 配置实例</h3><h4 id=\"反向代理-2\"><a href=\"#反向代理-2\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141317165.png\" alt=\"image-20230314131757135\" style=\"zoom:25%;\"></p>\n<h5 id=\"实验一：单端口反向代理\"><a href=\"#实验一：单端口反向代理\" class=\"headerlink\" title=\"实验一：单端口反向代理\"></a>实验一：单端口反向代理</h5><h6 id=\"实现效果：\"><a href=\"#实现效果：\" class=\"headerlink\" title=\"实现效果：\"></a>实现效果：</h6><p>使用 nginx 反向代理，访问 www.123.com 直接跳转到 127.0.0.1:8080</p>\n<h6 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h6><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141321342.png\" alt=\"image-20230313235355362\" style=\"zoom:25%;\"></p>\n<h6 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h6><p><strong>第一步</strong>:</p>\n<blockquote>\n<p>启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132346396.png\" alt=\"image-20230313234649358\" style=\"zoom:35%;\"></p>\n<p>进入：/Users/yangrui/developtools/apache-tomcat-8.5.84/bin</p>\n<p>执行：startup.sh</p>\n<p>开启tomcat效果：</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303132347223.png\" alt=\"image-20230313234753196\" style=\"zoom:23%;\"></p>\n</blockquote>\n<p><strong>第二步</strong>：</p>\n<blockquote>\n<p>配置本地域名解析</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140040218.png\" alt=\"image-20230314004032198\" style=\"zoom: 25%;\"></p>\n</blockquote>\n<p><strong>第三步：</strong></p>\n<blockquote>\n<p>修改nginx配置文件</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140039903.png\" alt=\"image-20230314003904877\" style=\"zoom:25%;\"></p>\n</blockquote>\n<h6 id=\"结果验证：\"><a href=\"#结果验证：\" class=\"headerlink\" title=\"结果验证：\"></a>结果验证：</h6><blockquote>\n<p>启动nginx</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140040786.png\" alt=\"image-20230314004052629\" style=\"zoom:25%;\"></p>\n</blockquote>\n<h5 id=\"实验二-多端口反向代理\"><a href=\"#实验二-多端口反向代理\" class=\"headerlink\" title=\"实验二:多端口反向代理\"></a>实验二:多端口反向代理</h5><h6 id=\"实现效果：-1\"><a href=\"#实现效果：-1\" class=\"headerlink\" title=\"实现效果：\"></a>实现效果：</h6><blockquote>\n<p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中；其中nginx 监听端口为 9001</p>\n<ul>\n<li><p>当访问 <a href=\"http://192.168.10.33:9001/edu/\">http://192.168.10.33:9001/edu/</a> 会直接跳转到 127.0.0.1:8081</p>\n</li>\n<li><p>当访问 <a href=\"http://192.168.10.33:9001/vod/\">http://192.168.10.33:9001/vod/</a> 会直接跳转到 127.0.0.1:8088</p>\n</li>\n</ul>\n</blockquote>\n<h6 id=\"步骤：-1\"><a href=\"#步骤：-1\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h6><p><strong>第一步：</strong></p>\n<blockquote>\n<p>修改tomcat配置文件</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140010874.png\" style=\"zoom:25%;\"></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140012488.png\" alt=\"image-20230314001210464\" style=\"zoom:25%;\"></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140011761.png\" alt=\"image-20230314001155731\" style=\"zoom:25%;\"></p>\n</blockquote>\n<p><strong>第二步</strong>：</p>\n<blockquote>\n<p>创建文件</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141334570.png\" alt=\"image-20230314001439994\" style=\"zoom:25%;\"></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140023334.png\" alt=\"image-20230314002356293\" style=\"zoom:25%;\"></p>\n<p>新增在这里的原因：tomcat 加载是加载的 webapps 中的东西，所以放在该文件夹下 。</p>\n</blockquote>\n<h6 id=\"未修改时的显示结果\"><a href=\"#未修改时的显示结果\" class=\"headerlink\" title=\"未修改时的显示结果\"></a>未修改时的显示结果</h6><blockquote>\n<p>（8080同样）</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140044200.png\" alt=\"image-20230314001522539\" style=\"zoom:25%;\"></p>\n</blockquote>\n<p><strong>第三步</strong>：</p>\n<blockquote>\n<p>配置nginx</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140023556.png\" alt=\"image-20230314002324522\" style=\"zoom:25%;\"></p>\n</blockquote>\n<p><strong>修改完之后结果</strong>：</p>\n<blockquote>\n<p>&lt;借用他人的，网页效果是不一样的，地址栏输入的也应该是自己配置的&gt;</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140041151.png\" alt=\"image-20230314004123109\" style=\"zoom:33%;\"></p>\n<p>==注：==</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location [= | ~ |~* | ^~]uri&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>location 指令说明</strong></p>\n<p>该指令用于匹配 URL。</p>\n<p>语法如下：</p>\n<p>1、= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配</p>\n<p>成功，就停止继续向下搜索并立即处理该请求。</p>\n<p>2、~：用于表示 uri 包含正则表达式，并且区分大小写。</p>\n<p>3、~*：用于表示 uri 包含正则表达式，并且不区分大小写。</p>\n<p>4、^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字</p>\n<p>符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location</p>\n<p>块中的正则 uri 和请求字符串做匹配。</p>\n<p>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。</p>\n</blockquote>\n<h4 id=\"负载均衡-2\"><a href=\"#负载均衡-2\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141348957.png\" alt=\"image-20230314134859923\" style=\"zoom:33%;\"></p>\n<h6 id=\"实现效果：-2\"><a href=\"#实现效果：-2\" class=\"headerlink\" title=\"实现效果：\"></a>实现效果：</h6><blockquote>\n<p>配置负载均衡</p>\n</blockquote>\n<h6 id=\"步骤：-2\"><a href=\"#步骤：-2\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h6><p><strong>第一步</strong></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140102804.png\" alt=\"image-20230314010243768\" style=\"zoom:33%;\"></p>\n<p><strong>效果显示：</strong></p>\n<p>下面两个界面轮流显示:</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140107970.png\" alt=\"image-20230314010706935\" style=\"zoom:25%;\"></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140107293.png\" alt=\"image-20230314010752262\" style=\"zoom:25%;\"></p>\n<h5 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h5><p>负载均衡即：将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。 Nginx 提供了几种分配方式(策略)：</p>\n<h6 id=\"1、轮询（默认）\"><a href=\"#1、轮询（默认）\" class=\"headerlink\" title=\"1、轮询（默认）\"></a>1、轮询（默认）</h6><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myserver&#123;</span><br><span class=\"line\">        server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8080</span>;</span><br><span class=\"line\">        server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8081</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2、weight\"><a href=\"#2、weight\" class=\"headerlink\" title=\"2、weight\"></a>2、weight</h6><p>weight 代表权,重默认为 1,权重越高被分配的客户端越多 。</p>\n<p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myserver&#123;</span><br><span class=\"line\">          server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8080</span> weight=<span class=\"number\">10</span>;</span><br><span class=\"line\">          server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8081</span> weight=<span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"3、ip-hash\"><a href=\"#3、ip-hash\" class=\"headerlink\" title=\"3、ip_hash\"></a>3、ip_hash</h6><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 共享的问题</p>\n<p>也就是说客户端在第一次访问某个服务后，后面都是访问此服务 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myserver&#123;</span><br><span class=\"line\">            ip_hash;</span><br><span class=\"line\">            server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8080</span>;</span><br><span class=\"line\">            server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8081</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4、fair（第三方）\"><a href=\"#4、fair（第三方）\" class=\"headerlink\" title=\"4、fair（第三方）\"></a>4、fair（第三方）</h6><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myserver&#123;</span><br><span class=\"line\">             server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8080</span>;</span><br><span class=\"line\">             server <span class=\"number\">192.168</span><span class=\"number\">.77</span><span class=\"number\">.130</span>:<span class=\"number\">8081</span>;</span><br><span class=\"line\">             fair;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"动静分离-1\"><a href=\"#动静分离-1\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h4><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141421174.png\" alt=\"image-20230314142119145\" style=\"zoom:25%;\"></p>\n<h6 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作:\"></a>准备工作:</h6><blockquote>\n<p>在/data 目录下有静态资源和动态资源 ；即：<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140122445.png\" alt=\"image-20230314012203400\" style=\"zoom:45%;\"></p>\n</blockquote>\n<h6 id=\"进行配置：\"><a href=\"#进行配置：\" class=\"headerlink\" title=\"进行配置：\"></a>进行配置：</h6><blockquote>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140127488.png\" alt=\"image-20230314012756464\" style=\"zoom:25%;\"></p>\n<p>注：autoindex on：目的是为了在访问 /image 时，能够显示目录里面的内容，</p>\n<p>当然localtion中也可以配置<code>expire</code>来设置缓存过期时间 。</p>\n</blockquote>\n<h6 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h6><h6 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h6><blockquote>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140126590.png\" alt=\"image-20230314012619542\" style=\"zoom:25%;\"></p>\n<p>这里显示了列表原因就是，因为刚刚在location中配置了 autoindex on</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140126464.png\" alt=\"image-20230314012652717\" style=\"zoom:20%;\"></p>\n<p>此处成功访问，说明 静态资源 nginx 直接返回了，不走后端 tomcat 服务器 。</p>\n<p>当访问地址：<a href=\"http://192.168.10.33/www/a.html\">http://192.168.10.33/www/a.html</a></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140128927.png\" alt=\"image-20230314012859884\" style=\"zoom:33%;\"></p>\n</blockquote>\n<h4 id=\"搭建高可用集群\"><a href=\"#搭建高可用集群\" class=\"headerlink\" title=\"搭建高可用集群\"></a>搭建高可用集群</h4><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141426213.png\" alt=\"image-20230314142627188\" style=\"zoom:25%;\"></p>\n<h5 id=\"主从模式：\"><a href=\"#主从模式：\" class=\"headerlink\" title=\"主从模式：\"></a>主从模式：</h5><h6 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h6><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140134267.png\" alt=\"image-20230314013427216\"></p>\n<h6 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h6><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140139626.png\" alt=\"image-20230314013901580\"></p>\n<blockquote>\n<p>上述环境要求</p>\n<ul>\n<li><p>（1）需要两台 nginx 服务器</p>\n</li>\n<li><p>（2）需要 <a href=\"https://so.csdn.net/so/search?q=keepalived&amp;spm=1001.2101.3001.7020\">keepalived</a></p>\n</li>\n<li>（3）需要虚拟 ip</li>\n</ul>\n</blockquote>\n<h6 id=\"配置高可用的准备工作\"><a href=\"#配置高可用的准备工作\" class=\"headerlink\" title=\"配置高可用的准备工作\"></a>配置高可用的准备工作</h6><blockquote>\n<p>（1）需要两台服务器 192.168.17.129 和 192.168.17.131</p>\n<p>（2）在两台服务器安装 nginx， 这里如果不想再去安装一遍 Nginx ，可以直接克隆 CentOs 。</p>\n<p>（3）在两台服务器安装 keepalived</p>\n</blockquote>\n<h6 id=\"完成配置（主从配置）\"><a href=\"#完成配置（主从配置）\" class=\"headerlink\" title=\"完成配置（主从配置）\"></a>完成配置（主从配置）</h6><blockquote>\n<p>Keepalived + Nginx 配合使用</p>\n</blockquote>\n<p><strong>主机 Nginx</strong></p>\n<p>修改/etc/keepalived/keepalivec.conf配置文件为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    notification_email &#123;</span><br><span class=\"line\">        acassen@firewall.loc</span><br><span class=\"line\">        failover@firewall.loc</span><br><span class=\"line\">        sysadmin@firewall.loc</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">        notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">        smtp_server 192.168.17.129</span><br><span class=\"line\">        smtp_connect_timeout 30</span><br><span class=\"line\"></span><br><span class=\"line\">        router_id LVS_DEVEL # 主机名字    在host文件中</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_script chk_http_port &#123;   # 检测脚本配置</span><br><span class=\"line\">        script &quot;/usr/local/src/nginx_check.sh&quot;</span><br><span class=\"line\">        interval 2 #（检测脚本执行的间隔）</span><br><span class=\"line\">        weight 2 # 权重</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">        vrrp_instance VI_1 &#123;</span><br><span class=\"line\">        state MASTER # 备份服务器上将 MASTER 改为 BACKUP</span><br><span class=\"line\">        interface ens33 # 网卡</span><br><span class=\"line\">        virtual_router_id 51  # 主、备机的 virtual_router_id 必须相同</span><br><span class=\"line\">        priority 100  # 主、备机取不同的优先级，主机值较大，备份机值较小</span><br><span class=\"line\">        advert_int 1   # 每隔1 秒发送一次验证，检测主机或者服务器是否还活着</span><br><span class=\"line\">        authentication &#123;</span><br><span class=\"line\">                auth_type PASS</span><br><span class=\"line\">                auth_pass 1111</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        virtual_ipaddress &#123;</span><br><span class=\"line\">             192.168.17.50 # VRRP H 虚拟地址</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>（2）在<code>/usr/local/src</code>添加检测脚本：<code>nginx_check.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">A=`ps -C nginx –no-header | wc -l`</span><br><span class=\"line\">if [ $A -eq 0 ];then</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">        sleep 2</span><br><span class=\"line\">        if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class=\"line\">            killall keepalived</span><br><span class=\"line\">        fi</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p><strong>从机 Nginx</strong></p>\n<p>（1）修改<code>/etc/keepalived/keepalivec.conf</code> 配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    notification_email &#123;</span><br><span class=\"line\">        acassen@firewall.loc</span><br><span class=\"line\">        failover@firewall.loc</span><br><span class=\"line\">        sysadmin@firewall.loc </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\"></span><br><span class=\"line\">        smtp_server 192.168.17.129</span><br><span class=\"line\"></span><br><span class=\"line\">        smtp_connect_timeout 30</span><br><span class=\"line\"></span><br><span class=\"line\">        router_id LVS_DEVEL </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_script chk_http_port &#123;</span><br><span class=\"line\">        script &quot;/usr/local/src/nginx_check.sh&quot;</span><br><span class=\"line\">        interval 2</span><br><span class=\"line\">        weight 2</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">        vrrp_instance VI_1 &#123;</span><br><span class=\"line\">        state BACKUP # 修改为从机 BACKUP</span><br><span class=\"line\">        interface ens33 # 修改为从机 ip</span><br><span class=\"line\">        virtual_router_id 51</span><br><span class=\"line\">        priority 90 # 优先级比主机低</span><br><span class=\"line\">        advert_int 1</span><br><span class=\"line\">        authentication &#123;</span><br><span class=\"line\">            auth_type PASS</span><br><span class=\"line\">            auth_pass 1111</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        virtual_ipaddress &#123;</span><br><span class=\"line\">            192.168.17.50</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）在/<code>usr/local/src</code>添加检测脚本：<code>nginx_check.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">A=`ps -C nginx –no-header | wc -l`</span><br><span class=\"line\">if [ $A -eq 0 ];then</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">        sleep 2</span><br><span class=\"line\">        if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class=\"line\">            killall keepalived</span><br><span class=\"line\">        fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"启动-Nginx\"><a href=\"#启动-Nginx\" class=\"headerlink\" title=\"启动 Nginx\"></a>启动 Nginx</h6><p>分别启动<strong>主从</strong> Nginx ，切换到/usr/local/nginx/sbin/，启动 Nginx ，如果已经启动过，就选择重启</p>\n<h6 id=\"启动-keepalived\"><a href=\"#启动-keepalived\" class=\"headerlink\" title=\"启动 keepalived\"></a>启动 keepalived</h6><p><code>systemctl restart keepalived</code></p>\n<h6 id=\"最终测试\"><a href=\"#最终测试\" class=\"headerlink\" title=\"最终测试\"></a>最终测试</h6><blockquote>\n<p>==（1）==在浏览器地址栏输入 虚拟 ip 地址：<a href=\"http://192.168.17.50/\">http://192.168.17.50/</a></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140152560.png\" alt=\"image-20230314015235515\" style=\"zoom:25%;\"></p>\n<p>==（2）==把主服务器（192.168.17.130）nginx 和 keepalived 停止，再输入 192.168.17.50</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303140153135.png\" alt=\"image-20230314015346087\" style=\"zoom:25%;\"></p>\n</blockquote>\n<h5 id=\"双主模式（课未做）\"><a href=\"#双主模式（课未做）\" class=\"headerlink\" title=\"双主模式（课未做）\"></a>双主模式（课未做）</h5><p><img src=\"/post/../Library/Application%20Support/typora-user-images/image-20230314143051397.png\" alt=\"image-20230314143051397\" style=\"zoom:25%;\"></p>\n<h6 id=\"实验说明：\"><a href=\"#实验说明：\" class=\"headerlink\" title=\"实验说明：\"></a>实验说明：</h6><p>在上述环境的基础上：只是修改 从机节点上面的 keepalived 服务的配置文件即可。此时</p>\n<p>主机节点既为 Keepalived 的主节点也为备节点，从机节点同样既为 Keepalived 的主节点也为备节点。</p>\n<p>主机节点默认的主节点 VIP（192.168.1.110），从机 节点默认的主节点 VIP（192.168.1.210）</p>\n<h6 id=\"进行配置\"><a href=\"#进行配置\" class=\"headerlink\" title=\"进行配置:\"></a>进行配置:</h6><blockquote>\n<p>keepalived.conf</p>\n</blockquote>\n<p><strong>主机</strong>（1）修改<code>/etc/keepalived/keepalivec.conf</code> 配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global_defs &#123;</span><br><span class=\"line\"> notification_email &#123;</span><br><span class=\"line\"> 381347268@qq.com</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> smtp_server 192.168.200.1</span><br><span class=\"line\"> smtp_connect_timeout 30</span><br><span class=\"line\"> router_id LVS_DEVEL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\"> state MASTER</span><br><span class=\"line\"> interface ens33</span><br><span class=\"line\"> virtual_router_id 51</span><br><span class=\"line\"> priority 150</span><br><span class=\"line\"> advert_int 1</span><br><span class=\"line\"> authentication &#123;</span><br><span class=\"line\">  auth_type PASS</span><br><span class=\"line\">  auth_pass 1111</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> virtual_ipaddress &#123;</span><br><span class=\"line\"> 192.168.1.110/24 dev ens33 label ens33:1</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>脚本</strong>：（2）在/<code>usr/local/src</code>添加检测脚本：<code>nginx_check.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_instance VI_2 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> state BACKUP</span><br><span class=\"line\"> interface ens33</span><br><span class=\"line\"> virtual_router_id 52</span><br><span class=\"line\"> priority 100</span><br><span class=\"line\"> advert_int 1</span><br><span class=\"line\"> authentication &#123;</span><br><span class=\"line\">     auth_type PASS</span><br><span class=\"line\">     auth_pass 2222</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> virtual_ipaddress &#123;</span><br><span class=\"line\">\t 192.168.1.210/24 dev ens33 label ens33:2</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>从机</strong>（1）修改<code>/etc/keepalived/keepalivec.conf</code> 配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_instance 规则</span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">     notification_email &#123;</span><br><span class=\"line\">     \t381347268@qq.com</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     smtp_server 192.168.200.1</span><br><span class=\"line\">     smtp_connect_timeout 30</span><br><span class=\"line\">     router_id LVS_DEVEL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vrrp_instance VI_1 &#123;</span><br><span class=\"line\">         state BACKUP</span><br><span class=\"line\">         interface ens33</span><br><span class=\"line\">         virtual_router_id 51</span><br><span class=\"line\">         priority 100</span><br><span class=\"line\">         advert_int 1</span><br><span class=\"line\">         authentication &#123;</span><br><span class=\"line\">         auth_type PASS</span><br><span class=\"line\">         auth_pass 1111</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     virtual_ipaddress &#123;</span><br><span class=\"line\">     \t192.168.1.110/24 dev ens33 label ens33:1</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>脚本</strong>（2）在/<code>usr/local/src</code>添加检测脚本：<code>nginx_check.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_instance VI_2 &#123;</span><br><span class=\"line\">     state MASTER</span><br><span class=\"line\">     interface ens33</span><br><span class=\"line\">     virtual_router_id 52</span><br><span class=\"line\">     priority 150</span><br><span class=\"line\">     advert_int 1</span><br><span class=\"line\">     authentication &#123;</span><br><span class=\"line\">     auth_type PASS</span><br><span class=\"line\">     auth_pass 2222</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">     virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.1.210/24 dev ens33 label ens33:2</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"启动-Nginx-1\"><a href=\"#启动-Nginx-1\" class=\"headerlink\" title=\"启动 Nginx\"></a>启动 Nginx</h6><p>分别启动<strong>主从</strong> Nginx ，切换到/usr/local/nginx/sbin/，启动 Nginx ，如果已经启动过，就选择重启</p>\n<h6 id=\"启动-keepalived-1\"><a href=\"#启动-keepalived-1\" class=\"headerlink\" title=\"启动 keepalived\"></a>启动 keepalived</h6><p><code>systemctl restart keepalived</code></p>\n<h6 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h6><blockquote>\n<p>测试可以发现我们访问 keepalived 中配置的两个 VIP 都可以正常调度等，当我们停止任意一台 keepalived节点，同样还是正常访问；到此，keepalived+nginx 高可用集群（双主模式）就搭建完成了。</p>\n</blockquote>\n<h3 id=\"Nginx-原理：\"><a href=\"#Nginx-原理：\" class=\"headerlink\" title=\"Nginx 原理：\"></a>Nginx 原理：</h3><p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141211325.png\" alt=\"image-20230314121106263\" style=\"zoom:33%;\"></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141213887.png\" alt=\"image-20230314121312856\" style=\"zoom:23%;\"></p>\n<h5 id=\"work工作原理：\"><a href=\"#work工作原理：\" class=\"headerlink\" title=\"work工作原理：\"></a>work工作原理：</h5><blockquote>\n<p>worker本身是不支持java的，使其能够支持java的工作机制是：首先nginx的master会获取发送的请求，其相当于是一个管理员，在得到任务之后，管理员会发送给其下的worker,worker会通过==争抢==机制得到任务，通过反向代理利用tomcat完成（java）工作。</p>\n<p>当我们自己启动 nginx ，会有一个 master 和 一个 worker</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141204154.png\" alt=\"image-20230314120459108\" style=\"zoom:33%;\"></p>\n<p>实际的 Nginx 可以有一个 master 和 多个 worker</p>\n</blockquote>\n<h5 id=\"一个master和多个workers-的机制的好处\"><a href=\"#一个master和多个workers-的机制的好处\" class=\"headerlink\" title=\"一个master和多个workers 的机制的好处\"></a>一个master和多个workers 的机制的好处</h5><p>（1）可以使用 nginx –s reload 热部署，利用 nginx 进行热部署操作 。</p>\n<p>（2）每个 woker 是<strong>独立</strong>的进程，如果有其中的一个 woker 出现问题，其他 woker 独立的，继续进行争抢，实现请求过程，不会造成服务中断 。</p>\n<blockquote>\n<p>（2）详解：</p>\n<ul>\n<li>首先，对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。</li>\n<li>其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master 进程则很快启动新的worker 进程。</li>\n<li>当然，worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险</li>\n</ul>\n</blockquote>\n<h5 id=\"需要设置多少个-worker\"><a href=\"#需要设置多少个-worker\" class=\"headerlink\" title=\"需要设置多少个 worker\"></a>需要设置多少个 worker</h5><p>==worker 数和服务器的 cpu 数相等是最为适宜的==</p>\n<blockquote>\n<ul>\n<li><p>Nginx 同 redis 类似都采用了 io 多路复用机制，每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话下。</p>\n</li>\n<li><p>每个 worker 的线程可以把一个 cpu 的性能发挥到极致。所以 worker 数和服务器的 cpu数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"连接数-worker-connection\"><a href=\"#连接数-worker-connection\" class=\"headerlink\" title=\"连接数 worker_connection\"></a>连接数 worker_connection</h5><blockquote>\n<ul>\n<li><p>Q1: 发送请求，占用了 woker 的几个连接数？</p>\n</li>\n<li><p>A1：2个&lt;比如 访问静态资源的时候&gt; 或者 4 个&lt;比如 通过tomcat访问数据库&gt;</p>\n</li>\n</ul>\n<p><img src=\"/post/../Library/Application%20Support/typora-user-images/image-20230314122458803.png\" alt=\"image-20230314122458803\" style=\"zoom:25%;\"></p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303141226579.png\" alt=\"image-20230314122636533\" style=\"zoom:20%;\"></p>\n<ul>\n<li><p>Q2：假设nginx 有一个 master，有四个 woker，每个 woker 支持最大的连接数 1024，支持的最大并发数是多少？</p>\n</li>\n<li><p>A2：</p>\n</li>\n<li><p>普通的静态访问最大并发数是：</p>\n<p>worker_connections * worker_processes /2</p>\n</li>\n<li><p>而如果是 HTTP 作 为反向代理来说，最大并发数量应该是：</p>\n<p>worker_connections * worker_processes /4</p>\n<blockquote>\n<p>其中：</p>\n<ul>\n<li>worker_connections:woker :支持的连接数</li>\n</ul>\n<p>这个值是表示<strong>每个 worker</strong> 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接数，应该是 worker_connections <em> worker_processes。当然，这里说的是<strong>最大</strong>连接数，对于 HTTP 请求本地资源来说 ， 能够支持的<strong>最大并发数量</strong>是 `worker_connections </em> worker_processes`</p>\n<ul>\n<li>worker_processes : 表示有几个 woker</li>\n</ul>\n<p>即：</p>\n<p>如果是支持 http1.1 的浏览器,每次访问只要占两个连接，所以普通的静态访问<strong>最大并发数是：</strong> <code>worker_connections * worker_processes /2</code><br>而如果是 HTTP 作 为反向代理来说，<strong>最大并发数量</strong>应该是:                                           <code>worker_connections * worker_processes/4</code>因为作为反向代理服务器，每个并发会建立与客户端的连接和与tomcat服务器后端服务的连接，所以会多占用两个连接。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n","_path":"post/53237cb3.html","_link":"http://rycan.top/post/53237cb3.html","_id":"cll0ona6v000zk30phuxo3fvq"}}