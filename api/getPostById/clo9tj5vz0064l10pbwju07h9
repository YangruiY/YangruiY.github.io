{"type":"getPostById","data":{"title":"线程中断的三个函数","date":"2023-10-09T13:17:21.000Z","description":"线程的函数","categories":[],"tags":[{"name":"Thread","_id":"clo9tj5w6008al10pehd48gl7"}],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"Java-lang-Thread的中断函数\"><a href=\"#Java-lang-Thread的中断函数\" class=\"headerlink\" title=\"Java.lang.Thread的中断函数\"></a>Java.lang.Thread的中断函数</h1><h2 id=\"写在前头\"><a href=\"#写在前头\" class=\"headerlink\" title=\"写在前头\"></a>写在前头</h2><blockquote>\n<p>今天和小伙伴一起探究了一个困扰很久的问题，就是java 线程中的中断问题——也就是三个Thread中的方法：<code>isInterrupted(),   interrupted(),    interrupt()</code></p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>相信问到这个问题大家肯定都不陌生，面试常问的就是这个三个的区别，这里贴一下 <code>GPT4</code> 给的答案</p>\n<blockquote>\n<ul>\n<li><p><code>interrupt()</code> 方法是 <code>Thread</code> 类的一个方法，用于中断线程。当调用 <code>interrupt()</code> 方法时，它会将线程的中断标志设置为 <code>true</code>。如果线程正在等待或阻塞，它将抛出 <code>InterruptedException</code> 异常。但是，<code>interrupt()</code> 方法并不会直接停止线程的执行，而是通过检查中断标志来决定是否终止线程的执行。</p>\n</li>\n<li><p><code>isInterrupted()</code> 方法是 <code>Thread</code> 类的另一个方法，用于检查线程的中断状态。当调用 <code>isInterrupted()</code> 方法时，它会返回线程的中断标志值，即 <code>true</code> 表示线程被中断，<code>false</code> 表示线程未被中断。这个方法只是返回中断状态，并不会清除中断标志。</p>\n</li>\n<li><p><code>interrupted()</code> 方法是 <code>Thread</code> 类的静态方法，用于检查当前线程的中断状态并清除中断标志。当调用 <code>interrupted()</code> 方法时，它会返回当前线程的中断状态，并将中断标志重置为 <code>false</code>。与 <code>isInterrupted()</code> 不同，<code>interrupted()</code> 方法是一个静态方法，它检查的是当前线程的中断状态。</p>\n</li>\n</ul>\n<p>综上所述，<code>interrupt()</code> 方法用于中断线程，<code>isInterrupted()</code> 方法用于检查线程的中断状态，而 <code>interrupted()</code> 方法用于检查当前线程的中断状态并清除中断标志。</p>\n</blockquote>\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><p>乍一看，我和小伙伴都是有些疑问的，这三个都是和中断相关的，但是具体说的是啥？</p>\n<p>1、那么上面说的中断标志  和 中断状态到底是什么？中断标志好理解就是一个boolean的值，那么中断状态是什么</p>\n<blockquote>\n<p>是线程的状态吗？但是线程的状态 <code>java</code> 中只有 6 种 啊</p>\n<p>线程在其生命周期中可以处于不同的状态。常见的线程状态包括：</p>\n<ol>\n<li>新建（New）：当线程对象被创建但尚未调用 <code>start()</code> 方法时，线程处于新建状态。</li>\n<li>运行（Runnable）：当线程调用了 <code>start()</code> 方法后，它进入运行状态。在此状态下，线程可能正在执行，也可能正在等待系统资源。</li>\n<li>阻塞（Blocked）：线程在等待某些条件的满足时，会进入阻塞状态。例如，当线程等待输入/输出完成、等待锁释放或等待其他线程通知时，它会进入阻塞状态。</li>\n<li>等待（Waiting）：线程在等待其他线程的特定操作（例如，通过调用 <code>wait()</code> 方法）时，会进入等待状态。</li>\n<li>计时等待（Timed Waiting）：与等待状态类似，但可以在指定的时间段内等待。例如，通过调用 <code>sleep()</code> 方法或 <code>join()</code> 方法时，线程会进入计时等待状态。</li>\n<li>终止（Terminated）：线程执行完其任务或因异常而终止后，进入终止状态。</li>\n</ol>\n</blockquote>\n<p>2、有没有一个例子能很好地用到这三个方法，然后可以探究一下这三个的执行逻辑是什么样的？</p>\n<h2 id=\"先说结论\"><a href=\"#先说结论\" class=\"headerlink\" title=\"先说结论\"></a>先说结论</h2><p>1、中断状态（interrupt status）和中断标志（interrupt flag）通常是指同一个概念，用于表示线程是否被请求中断。它们在不同的上下文中可能会有不同的叫法，但通常用于描述相同的概念。线程的中断状态/中断标志是一个布尔值，用于指示线程是否被请求中断。</p>\n<p>2、原始案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isInterrupted()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread is running&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread interrupted&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 清除中断标志</span></span><br><span class=\"line\">                interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Thread stopped&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyThread1</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread1</span>();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 主线程等待一段时间后中断子线程</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">            thread.interrupt();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread is running</span><br><span class=\"line\">Thread is running</span><br><span class=\"line\">Thread is running</span><br><span class=\"line\">Thread is running</span><br><span class=\"line\">Thread is running</span><br><span class=\"line\">Thread interrupted</span><br><span class=\"line\">Thread stopped</span><br><span class=\"line\"></span><br><span class=\"line\">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"案例解析\"><a href=\"#案例解析\" class=\"headerlink\" title=\"案例解析\"></a>案例解析</h2><ul>\n<li><code>isInterrupted()</code>  和 <code>interrupt()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isInterrupted()) &#123;  <span class=\"comment\">//true</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread is running&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread interrupted&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;------&quot;</span> + interrupted());<span class=\"comment\">//false</span></span><br><span class=\"line\">                <span class=\"comment\">// 清除中断标志</span></span><br><span class=\"line\">                interrupt();</span><br><span class=\"line\">                System.out.println(currentThread().getName()+<span class=\"string\">&quot;=&quot;</span>+isInterrupted());<span class=\"comment\">//true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Thread stopped&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyThread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 主线程等待一段时间后中断子线程</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            thread.interrupt();<span class=\"comment\">//  true  interrupt 只改变中断标志位   不改变线程的运行状态</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(currentThread().getName() + <span class=\"string\">&quot;-&quot;</span> + e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread is running</span><br><span class=\"line\">Thread is running</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat com.ry.letusgo.forBAT.MyThread.run(For_Bat_1001_1006.java:627)</span><br><span class=\"line\">Thread interrupted</span><br><span class=\"line\">------false</span><br><span class=\"line\">Thread-0=true</span><br><span class=\"line\">Thread stopped</span><br><span class=\"line\"></span><br><span class=\"line\">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>isInterrupted()</code>  和 <code>interrupted()</code> 和<code>interrupt()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread1_1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;+++++++++&quot;</span>+Thread.currentThread().isInterrupted()); <span class=\"comment\">//false</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isInterrupted()) &#123;  <span class=\"comment\">//true</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread is running&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread interrupted&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 清除中断标志</span></span><br><span class=\"line\">                interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------&quot;</span>+currentThread().getName() +<span class=\"string\">&quot;-&quot;</span>+interrupted());<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------&quot;</span>+currentThread().getName() +<span class=\"string\">&quot;-&quot;</span>+interrupted());<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Thread stopped&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">MyThread1_1</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread1_1</span>();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 主线程等待一段时间后中断子线程</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            System.out.println(currentThread().getName()+<span class=\"string\">&quot;-&quot;</span>+Thread.currentThread().getState());<span class=\"comment\">//运行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;=============&quot;</span>+interrupted()); <span class=\"comment\">//false</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;=============&quot;</span>+interrupted()); <span class=\"comment\">//false</span></span><br><span class=\"line\">            thread.interrupt();<span class=\"comment\">//  true  interrupt 只改变中断标志位   不改变线程的运行状态</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;------&quot;</span>+currentThread().getName() +<span class=\"string\">&quot;-&quot;</span>+interrupted());<span class=\"comment\">//false</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;------&quot;</span>+currentThread().getName() +<span class=\"string\">&quot;-&quot;</span>+interrupted());<span class=\"comment\">//false</span></span><br><span class=\"line\">            System.out.println(currentThread().getName()+<span class=\"string\">&quot;-&quot;</span>+Thread.currentThread().getState());<span class=\"comment\">//运行</span></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;时间&quot;</span> +(end - start));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main exception&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++++++++false</span><br><span class=\"line\">Thread is running</span><br><span class=\"line\">Thread is running</span><br><span class=\"line\">main-RUNNABLE</span><br><span class=\"line\">=============false</span><br><span class=\"line\">=============false</span><br><span class=\"line\">------main-false</span><br><span class=\"line\">------main-false</span><br><span class=\"line\">main-RUNNABLE</span><br><span class=\"line\">时间2003</span><br><span class=\"line\">Thread interrupted</span><br><span class=\"line\">------Thread-0-true</span><br><span class=\"line\">------Thread-0-false</span><br><span class=\"line\">Thread stopped</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat com.ry.letusgo.forBAT.MyThread1_1.run(For_Bat_1001_1006.java:583)</span><br><span class=\"line\"></span><br><span class=\"line\">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>interrupt();      // 设置为true  interrupt 只改变中断标志位,遇到阻塞或者等待 ,就会抛出异常, 不改变线程的运行状态</code></p>\n<p><code>isInterrupted()   // 检查 方法所在线程的运行状态;true-表示当前线程被中断 false-表示当前线程没有被中断, 不改变线程的运行状态</code></p>\n<p><code>interrupted()     // 返回当前线程的中断状态 并将 中断状态/中断标志位 置为 false    , 不改变线程的运行状态</code></p>\n<blockquote>\n<p>不难看出，其实这三个函数只是标记中断的状态，但是没有让方法所在的线程处于真正的阻塞状态，也就是说这三个函数只是一种标志符，告诉引用该中断标志的地方判断是true,还是false，随后再由引用 中断状态 的地方由开发人员自己进行完善相关的逻辑。</p>\n<p>另外，值得注意的是</p>\n<p>1、<code>interrupted()</code>方法不管在哪里调用 （比如，<code>System.out.println(isInterrupted());</code>中或者 单独使用：<code>thread.interrupted</code>都会改变线程的运行状态）</p>\n<p>2、<del><code>isInterrupted()</code>只要是非静态方法中想获取线程的标志位可以随便使用</del></p>\n<p>准确的说应该是<code>System.out.println(&quot;+++++++++&quot;+currentThread()+&quot;--&quot;+isInterrupted());</code>只要是非静态方法中想获取线程的标志位可以随便使用</p>\n</blockquote>\n<p>为什么呢？在静态方法不能直接使用句话呢？</p>\n<p><img src=\"/Users/yangrui/Library/Application Support/typora-user-images/image-20231009134523922.png\" alt=\"image-20231009134523922\"></p>\n<blockquote>\n<p>原因：</p>\n<p>静态方法是属于类而不是实例的。由于静态方法不依赖于任何对象的实例，因此它们无法直接访问实例相关的成员，例如非静态变量和非静态方法。</p>\n<p>上述代码中，<code>currentThread()</code> 和 <code>isInterrupted()</code> 都是实例方法，需要通过线程对象调用。而在静态方法中，没有隐式的线程对象，因此无法直接调用 <code>currentThread()</code> 和 <code>isInterrupted()</code> 方法。</p>\n<p>解决：</p>\n<p>要是想在静态方法中获取当前线程和检查其中断状态，可以通过传递线程对象作为参数或者使用 <code>Thread.currentThread()</code> 方法来获取当前线程的引用，然后再调用相应的实例方法。</p>\n<p>修改：</p>\n<p>1、<code>System.out.println(&quot;+++++++++&quot;+Thread.currentThread().isInterrupted());</code></p>\n<p>2、<code>System.out.println(&quot;+++++++++&quot;+currentThread().isInterrupted());</code></p>\n<p>之类进行修改修正即可</p>\n</blockquote>\n<h2 id=\"升华\"><a href=\"#升华\" class=\"headerlink\" title=\"升华\"></a>升华</h2><h4 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h4><h5 id=\"interrupted\"><a href=\"#interrupted\" class=\"headerlink\" title=\"interrupted()\"></a>interrupted()</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">interrupted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> currentThread().isInterrupted(<span class=\"literal\">true</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isInterrupted</span><span class=\"params\">(<span class=\"type\">boolean</span> ClearInterrupted)</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"interrupt\"><a href=\"#interrupt\" class=\"headerlink\" title=\"interrupt()\"></a>interrupt()</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">interrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> != Thread.currentThread())</span><br><span class=\"line\">           checkAccess();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">synchronized</span> (blockerLock) &#123;</span><br><span class=\"line\">           <span class=\"type\">Interruptible</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> blocker;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (b != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               interrupt0();           <span class=\"comment\">// Just to set the interrupt flag</span></span><br><span class=\"line\">               b.interrupt(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       interrupt0();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">interrupt0</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isInterrupted\"><a href=\"#isInterrupted\" class=\"headerlink\" title=\"isInterrupted()\"></a>isInterrupted()</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isInterrupted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isInterrupted(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isInterrupted</span><span class=\"params\">(<span class=\"type\">boolean</span> ClearInterrupted)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><blockquote>\n<p>线程阻塞或者等待的方法有：</p>\n</blockquote>\n<ol>\n<li><code>sleep(long milliseconds)</code>：使线程进入休眠状态，暂停执行指定的时间（以毫秒为单位）。线程在休眠期间不会占用CPU资源。</li>\n<li><code>join()</code>：使当前线程进入阻塞状态，等待目标线程执行完毕。调用<code>join()</code>方法的线程会等待目标线程执行完毕后再继续执行。</li>\n<li><code>wait()</code>：使线程进入等待状态，直到其他线程调用相同对象上的<code>notify()</code>或<code>notifyAll()</code>方法唤醒该线程。在等待期间，线程会释放它所持有的锁。</li>\n<li><code>wait(long milliseconds)</code>：使线程进入等待状态，最多等待指定的时间（以毫秒为单位）。如果在等待时间内没有其他线程调用相同对象上的<code>notify()</code>或<code>notifyAll()</code>方法唤醒该线程，则线程会自动苏醒。</li>\n<li><code>wait(long milliseconds, int nanoseconds)</code>：使线程进入等待状态，最多等待指定的时间（以毫秒和纳秒为单位）。如果在等待时间内没有其他线程调用相同对象上的<code>notify()</code>或<code>notifyAll()</code>方法唤醒该线程，则线程会自动苏醒。</li>\n</ol>\n<blockquote>\n<p>线程中的方法</p>\n</blockquote>\n<ul>\n<li><code>start()</code>：启动线程，使其进入可运行状态并执行线程的 <code>run()</code> 方法。</li>\n<li><code>run()</code>：定义线程的主体逻辑，线程通过调用该方法执行任务。</li>\n<li><code>sleep(long milliseconds)</code>：使线程进入休眠状态，暂停执行指定时间。</li>\n<li><code>join()</code>：等待线程完成执行，使当前线程进入阻塞状态，直到目标线程执行完毕。</li>\n<li><code>interrupt()</code>：中断线程，向线程发送中断信号，使其有机会退出执行。</li>\n<li><code>isInterrupted()</code>：检查线程是否被中断。</li>\n<li><code>getName()</code>：获取线程的名称。</li>\n<li><p><code>setPriority(int priority)</code>：设置线程的优先级。</p>\n</li>\n<li><p><code>yield()</code>：暂停当前正在执行的线程，使其他具有相同优先级的线程有机会执行。调用 <code>yield()</code> 方法并不会阻塞线程，只是将其从运行状态转换为可运行状态。</p>\n</li>\n<li><code>isAlive()</code>：检查线程是否处于活动状态，即线程是否已启动且尚未终止。</li>\n<li><code>setDaemon(boolean on)</code>：将线程标记为守护线程或用户线程。守护线程是在后台运行的线程，当所有用户线程结束时，守护线程会自动退出。</li>\n<li><code>getId()</code>：获取线程的唯一标识符。</li>\n<li><code>getState()</code>：获取线程的当前状态，如新建、可运行、阻塞、等待等。</li>\n<li><code>getPriority()</code>：获取线程的优先级。</li>\n<li><code>setContextClassLoader(ClassLoader cl)</code>：设置线程的上下文类加载器，用于加载线程中执行的类的依赖项。</li>\n<li><code>interrupted()</code>：静态方法，检查当前线程是否被中断，并清除中断状态。</li>\n<li><code>currentThread()</code>：静态方法，获取当前正在执行的线程对象。</li>\n</ul>\n","_path":"post/7608.html","_link":"http://rycan.top/post/7608.html","_id":"clo9tj5vz0064l10pbwju07h9"}}