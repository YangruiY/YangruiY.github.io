{"type":"getPostById","data":{"title":"SpringSecurity","date":"2023-07-03T12:32:16.000Z","description":"SpringSecurity","categories":[{"name":"框架","_id":"clkuj5ex9000csg0peyfldnq0"}],"tags":[{"name":"SpringSecurity","_id":"clkuj5exw004ssg0pfwrf8h2i"}],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n<h2 id=\"SpringSecurity\">SpringSecurity</h2>\n<h3 id=\"简介\">简介</h3>\n<p>一般的Web应用需要进行<strong>认证</strong>和<strong>授权</strong>。</p>\n<p>​\t\t<strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p>\n<p>​\t\t<strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p>\n<p>​\t而认证和授权也是SpringSecurity作为安全框架的核心功能。</p>\n<h2 id=\"快速入门\">快速入门</h2>\n<h4 id=\"1-1-准备工作\">1.1 准备工作</h4>\n<p>我们先要搭建一个简单的Maven工程</p>\n<h6 id=\"设置父工程-添加依赖\">设置父工程 添加依赖</h6>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"自己创建启动类\">自己创建启动类</h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.springsecurity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>③ 创建Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.springsecurity.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-引入SpringSecurity\">1.2 引入SpringSecurity</h4>\n<p>​\t在SpringBoot项目中使用SpringSecurity我们只需要引入依赖即可实现入门案例。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--    security启动器--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​\t引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会输出在控制台。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111707309.png\" alt=\"image-20230311170741254\" style=\"zoom:33%;\">\n<p>会自动跳转到：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111708767.png\" alt=\"image-20230311170805743\" style=\"zoom:33%;\">\n<p>username: user</p>\n<p>Password: 控制台给出</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111708135.png\" alt=\"image-20230311170851110\" style=\"zoom:25%;\">\n<p>​\t登陆后才能对接口进行访问</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121654300.png\" alt=\"image-20230312165439267\" style=\"zoom:50%;\">\n<h3 id=\"1-3-知识储备\">1.3 知识储备</h3>\n<h2 id=\"1-前置知识\">1. 前置知识</h2>\n<h5 id=\"UserDetailsService-接口讲解\"><strong>UserDetailsService</strong> 接口讲解</h5>\n<ul>\n<li>\n<p>返回值UserDetails</p>\n</li>\n<li>\n<p>当什么也没有配置的时候，账号和密码是由 Spring Security 定义生成的。而在实际项目中账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制认证逻辑。</p>\n</li>\n<li>\n<p>如果需要自定义逻辑时，只需要实现 UserDetailsService 接口即可。接口定义如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示获取登录用户所有权限</span></span><br><span class=\"line\">Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示获取密码</span></span><br><span class=\"line\">String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示获取用户名</span></span><br><span class=\"line\">String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示判断账户是否过期</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示判断账户是否被锁定</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示凭证&#123;密码&#125;是否过期</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示当前用户是否可用</span></span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"PasswordEncoder-接口讲解\"><strong>PasswordEncoder</strong> 接口讲解</h5>\n<ul>\n<li>\n<p>BCryptPasswordEncoder 是 Spring Security 官方推荐的密码解析器。</p>\n</li>\n<li>\n<p>BCryptPasswordEncoder 是对bcrypt 强散列方法的具体实现。是基于 Hash 算法实现的单向加密。可以通过 strength 控制加密强度，默认 10.</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示把参数按照特定的解析规则进行解析</span></span><br><span class=\"line\">String <span class=\"title function_\">encode</span><span class=\"params\">(CharSequence rawPassword)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示验证从存储中获取的编码密码与编码后提交的原始密码是否匹配。如果密码匹配，则返回 true；如果不匹配，则返回 false。第一个参数表示需要被解析的密码。第二个参数表示存储的密码。</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(CharSequence rawPassword, String encodedPassword)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示如果解析的密码能够再次进行解析且达到更安全的结果则返回 true，否则返回false。默认返回 false。</span></span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">upgradeEncoding</span><span class=\"params\">(String encodedPassword)</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"权限表达式\"><a href=\"https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#el-access\">权限表达式</a></h5>\n<h5 id=\"CSRF\">CSRF</h5>\n<h6 id=\"理解\">理解</h6>\n<p>​\t跨站请求伪造（英语：Cross-site request forgery），也被称为 <strong>one-click</strong> <strong>attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。跟<a href=\"https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC\">跨网站脚本</a>（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<p>​\t跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品)。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p>\n<p>从 Spring Security 4.0 开始，默认情况下会启用CSRF 保护，以防止CSRF 攻击应用程序，Spring Security CSRF 会针对 PATCH，POST，PUT 和DELETE 方法进行防护。</p>\n<h6 id=\"SpringSecurity实现CSRF的原理：\">SpringSecurity实现CSRF的原理：</h6>\n<p>1、生成 csrfToken 保存到HttpSession 或者 Cookie 中</p>\n<p>2、请求到来时，从请求中提取 csrfToken，和保存的 csrfToken 做比较，进而判断当前请求是否合法。主要通过 CsrfFilter 过滤器来完成。</p>\n<h5 id=\"微服务认证与授权实现思路\">微服务认证与授权实现思路</h5>\n<h6 id=\"认证授权过程分析\">认证授权过程分析</h6>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121715427.png\" alt=\"image-20230312171531399\" style=\"zoom: 33%;\">\n<p>（1） 如果是基于Session，那么 Spring-security 会对 cookie 里的 sessionid 进行解析，找到服务器存储的 session 信息，然后判断当前用户是否符合请求的要求。</p>\n<p>==（2）== 如果是token，则是解析出 token，然后将当前请求加入到 Spring-security 管理的权限信息中去，如果系统的模块众多，每个模块都需要进行授权与认证，所以我们选择基于 token 的形式进行授权与认证，用户根据用户名密码认证成功，然后获取当前用户角色的一系列权限值，并以用户名为key，权限列表为value 的形式存入 redis 缓存中，根据用户名相关信息生成token 返回，浏览器将 token 记录到 cookie 中，每次调用 api 接口都默认将token 携带到 header 请求头中，Spring-security 解析 header 头获取 token 信息，解析 token 获取当前用户名，根据用户名就可以从redis 中获取权限列表，这样 Spring-security 就能够判断当前请求是否有权限访问 。</p>\n<h6 id=\"2-中的具体代码实现见下\">(2)中的具体代码实现见下</h6>\n<h5 id=\"JWT介绍\">JWT介绍</h5>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121439562.png\" alt=\"image-20230312143945519\" style=\"zoom:45%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121439506.png\" alt=\"image-20230312143921474\" style=\"zoom:33%;\">\n<p>该对象为一个很长的字符串，字符之间通过&quot;.&quot;分隔符分为三个子串。</p>\n<p>每一个子串表示了一个功能块，总共有以下三个部分：<code>JWT 头</code>、<code>有效载荷</code>和<code>签名</code></p>\n<h6 id=\"JWT-头\">JWT 头</h6>\n<blockquote>\n<p>JWT 头部分是一个描述 JWT 元数据的 JSON 对象，通常如下所示。</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>在上面的代码中，alg 属性表示签名使用的算法，默认为 HMAC SHA256（写为 HS256）；</p>\n</li>\n<li>\n<p>typ 属性表示令牌的类型，JWT 令牌统一写为 JWT。</p>\n</li>\n<li>\n<p>最后，使用 Base64 URL 算法将上述JSON 对象转换为字符串保存。</p>\n</li>\n</ul>\n<h6 id=\"有效载荷\">有效载荷</h6>\n<ul>\n<li>有效载荷部分，是JWT 的主体内容部分，也是一个 JSON 对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iss：发行人</span><br><span class=\"line\">exp：到期时间</span><br><span class=\"line\">sub：主题</span><br><span class=\"line\">aud：用户</span><br><span class=\"line\">nbf：在此之前不可用</span><br><span class=\"line\">iat：发布时间</span><br><span class=\"line\">jti：JWT ID 用于标识该JWT</span><br></pre></td></tr></table></figure>\n<ul>\n<li>除以上默认字段外，我们还可以自定义私有字段，如下例：</li>\n</ul>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1234567890&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Helen&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\"><span class=\"attr\">&quot;admin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请注意，默认情况下 JWT 是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</p>\n<p>JSON 对象也使用 Base64 URL 算法转换为字符串保存。</p>\n</blockquote>\n<h6 id=\"签名哈希\">签名哈希</h6>\n<ul>\n<li>\n<p>签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p>\n</li>\n<li>\n<p>首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。</p>\n</li>\n<li>\n<p>然后，使用标头中指定的签名算法（默认情况下为 HMAC SHA256）根据以下公式生成签名。</p>\n</li>\n</ul>\n<p><code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(claims), secret)</code></p>\n<p>在计算出签名哈希后，JWT 头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用&quot;.&quot;分隔，就构成整个JWT 对象。</p>\n<h6 id=\"Base64URL-算法\">Base64URL 算法</h6>\n<ul>\n<li>\n<p>如前所述，JWT 头和有效载荷序列化的算法都用到了 Base64URL。该算法和常见 Base64 算法类似，稍有差别。</p>\n</li>\n<li>\n<p>作为令牌的 JWT 可以放在 URL 中（例如 api.example/?token=xxx)。 Base64 中用的三个字符是&quot;+“，”/“和”=&quot;，由于在 URL 中有特殊含义，因此 Base64URL 中对他们做了替换： &quot;=“去掉，”+“用”-“替换，”/“用”_&quot;替换，这就是 Base64URL 算法。</p>\n</li>\n</ul>\n<h2 id=\"2-认证\">2. 认证</h2>\n<h5 id=\"设置登录系统的账号、密码\">设置登录系统的账号、密码</h5>\n<h6 id=\"方式一、在application-properties中配置\">方式一、在application.properties中配置</h6>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.security.user.name</span>=<span class=\"string\">ry</span></span><br><span class=\"line\"><span class=\"attr\">spring.security.user.password</span>=<span class=\"string\">1234</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"方式二、自定义实现类接口：本文就是这种方式\">方式二、自定义实现类接口：本文就是这种方式</h6>\n<h3 id=\"2-1-登陆校验流程\">2.1 登陆校验流程</h3>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111711249.png\" style=\"zoom:25%;\">\n<h3 id=\"2-2-原理初探\">2.2 原理初探</h3>\n<p>​\t想要知道如何实现自己的登陆流程就必须要先知道入门案例中SpringSecurity的流程。</p>\n<h4 id=\"2-2-1-SpringSecurity完整流程\">2.2.1 SpringSecurity完整流程</h4>\n<p>​\tSpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121425402.png\" alt=\"image-20230312142505362\" style=\"zoom:25%;\">\n<p>​\t图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。主要的三个过滤器</p>\n<p><code>UsernamePasswordAuthenticationFilter</code>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。对/login 的 POST 请求做拦截，校验表单中用户名，密码。入门案例的认证工作主要由它负责。</p>\n<p><code>ExceptionTranslationFilter</code>：处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p>\n<p><code>FilterSecurityInterceptor</code>：负责权限校验的过滤器。 基本位于过滤链的最底部。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121702395.png\" style=\"zoom:25%;\">\n<p>​\t我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121424402.png\" alt=\"image-20230312142435293\" style=\"zoom:33%;\">\n<p><code>DefaultLoginPageGeneratingFilter</code>：默认登录页就是这个过滤器显示出来的，如果不想要默认登录页，就去掉这个过滤器就可以了。</p>\n<p><code>DefaultLogoutPageGeneratingFilter</code>：用来显示默认注销的页面</p>\n<h4 id=\"2-2-2-认证流程详解\">2.2.2 认证流程详解</h4>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111723417.png\" alt=\"image-20230311172342365\" style=\"zoom: 350%;\">\n<h6 id=\"过程详解：\">过程详解：</h6>\n<p>当前端提交用户名和密码过来时，进入了<code>UsernamePasswordAuthenticationFilter</code>过滤器。</p>\n<ul>\n<li>\n<p>在<code>UsernamePasswordAuthenticationFilter</code>过滤器里，将传进来的用户名和密码被封装成了**<code>Authentication</code>**对象【这时候最多只有用户名和密码，权限还没有】，<code>Authentication</code>对象通过<code>ProviderManager</code>的<code>authenticate</code>方法进行认证。</p>\n<ul>\n<li>在**<code>ProviderManager</code>**里面，通过调用<code>DaoAuthenticationProvider</code>的<code>authenticate</code>方法进行认证。\n<ul>\n<li>在<code>DaoAuthenticationProvider</code>里，调用**<code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法<strong>查询用户。【传入的参数只有</strong>用户名字符串**】\n<ul>\n<li>在<code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法里执行了以下操作\n<ol>\n<li>根据用户名查询对于用户以及这个用户的权限信息【<strong>在内存里查</strong>】</li>\n<li>把对应的用户信息包括权限信息封装成**<code>UserDetails</code>对象**。</li>\n<li>返回**<code>UserDetails</code>对象**。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>返回给了<code>DaoAuthenticationProvider</code>，在这个对象里执行了以下操作\n<ol>\n<li>通过**<code>PasswordEncoder</code><strong>对比</strong><code>UserDetails</code><strong>中的密码和</strong><code>Authentication</code>**密码是否正确。【<strong>校验密码（经过加密的）</strong>】</li>\n<li>如果正确就把**<code>UserDetails</code><strong>的</strong>权限信息<strong>设置到</strong><code>Authentication</code>**对象中。</li>\n<li>返回**<code>Authentication</code>**对象。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>又回到了过滤器里面<code>UsernamePasswordAuthenticationFilter</code>。</p>\n<ol>\n<li>\n<p>如果上一步返回了**<code>Authentication</code>**对象</p>\n<p>就使用**<code>SecurityContextHolder.getContext().setAuthentication()</code>**方法存储对象。</p>\n<p><strong>其他过滤器</strong>会通过<code>SecurityContextHolder</code>来获取当前用户信息。【当前过滤器认证完了，后面的过滤器还需要获取用户信息，比如授权过滤器】</p>\n</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>彩色字体的类均是比较重要的<strong>接口</strong>，在实现认证的过程中均需要自定义一个类来重新实现或者变更为Spring中其他实现类。</p>\n</blockquote>\n<h6 id=\"概念速查\">概念速查:</h6>\n<p><code>Authentication</code>接口: 它的实现类，表示当前访问系统的用户，==封装了用户相关信息==。</p>\n<p><code>AuthenticationManager</code>接口：定义了==认证Authentication的方法== ,实现类是**<code>ProviderManager</code>**</p>\n<ul>\n<li>它的实现类是**<code>ProviderManager</code><strong>，它的功能主要是实现</strong>认证用户**，因为在写登录接口时，可以通过配置类的方式，注入Spring容器中来使用它的**<code>authenticate</code>方法**。</li>\n</ul>\n<p><code>UserDetailsService</code>接口：加载用户特定数据的核心接口。里面定义了一个==根据用户名查询用户信息的方法==</p>\n<ul>\n<li>原本的实现类是**<code>InMemoryUserDetailsManager</code>**，它是在<code>内存</code>中查询，因为我们需要<code>自定义接口</code></li>\n</ul>\n<p><code>UserDetails</code>接口：提供核心==用户信息==。</p>\n<ul>\n<li>通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将==这些信息封装到Authentication对象==中。</li>\n<li>当我们<code>自定义</code>UserDetailsService<code>接口</code>时，需要我们定义一个<strong>实体类</strong>来实现这个接口来<code>供UserDetailsService接口</code>返回。【注意是实体类】</li>\n</ul>\n<h3 id=\"2-3-实现登录认证\">2.3 实现登录认证</h3>\n<h4 id=\"2-3-1-思路分析\">2.3.1 ==思路分析==</h4>\n<h5 id=\"登录\">登录</h5>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111759029.png\" alt=\"image-20230311175948971\" style=\"zoom:333%;\">\n<h6 id=\"①自定义登录接口\">①自定义登录接口</h6>\n<p>​\t\t\t\t调用ProviderManager的方法进行认证 如果认证通过生成jwt</p>\n<p>​\t\t\t\t把用户信息存入redis中【<code>userId</code>作为Key，用户信息作为Value】</p>\n<h6 id=\"②自定义UserDetailsService\">②自定义UserDetailsService</h6>\n<p>​\t\t\t\t在这个实现类中去查询数据库</p>\n<blockquote>\n<p>【因为原本这个<strong>接口的实现类</strong>是<strong>在内存中查询用户信息</strong>，不符合我们的要求，所以需要我们自己去实现它来自定义】</p>\n<p>在这个实现类中去查询数据库</p>\n</blockquote>\n<h5 id=\"校验：\">校验：</h5>\n<h6 id=\"定义Jwt认证过滤器\">定义Jwt认证过滤器</h6>\n<ul>\n<li>\n<p>获取token</p>\n</li>\n<li>\n<p>解析token获取其中的userid</p>\n</li>\n<li>\n<p>从redis中获取用户信息【如果每次请求都查询数据库就很浪费时间】</p>\n</li>\n<li>\n<p>存入SecurityContextHolder</p>\n</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111801931.png\" style=\"zoom:33%;\">\n<h4 id=\"2-3-2-准备工作\">2.3.2 准备工作</h4>\n<p>创建Maven工程，引入依赖</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--SpringSecurity启动器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--redis依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--fastjson依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.33<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jwt依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>添加Redis相关配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.type.TypeFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t作用：把Key序列化为String,Value序列化为json</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis使用FastJson序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sg</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FastJsonRedisSerializer</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">RedisSerializer</span>&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Charset</span> <span class=\"variable\">DEFAULT_CHARSET</span> <span class=\"operator\">=</span> Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; clazz;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FastJsonRedisSerializer</span><span class=\"params\">(Class&lt;T&gt; clazz)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clazz = clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] serialize(T t) <span class=\"keyword\">throws</span> SerializationException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">deserialize</span><span class=\"params\">(<span class=\"type\">byte</span>[] bytes)</span> <span class=\"keyword\">throws</span> SerializationException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"literal\">null</span> || bytes.length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON.parseObject(str, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> JavaType <span class=\"title function_\">getJavaType</span><span class=\"params\">(Class&lt;?&gt; clazz)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.FastJsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory connectionFactory)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(connectionFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">FastJsonRedisSerializer</span> <span class=\"variable\">serializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastJsonRedisSerializer</span>(Object.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class=\"line\">        template.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        template.setValueSerializer(serializer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        template.setHashValueSerializer(serializer);</span><br><span class=\"line\"></span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>③ 响应类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseResult</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询到的结果数据，</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseResult</span><span class=\"params\">(Integer code, String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseResult</span><span class=\"params\">(Integer code, T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCode</span><span class=\"params\">(Integer code)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMsg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMsg</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setData</span><span class=\"params\">(T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseResult</span><span class=\"params\">(Integer code, String msg, T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>④工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Jwts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.SecretKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JWT工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有效期为</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Long</span> <span class=\"variable\">JWT_TTL</span> <span class=\"operator\">=</span> <span class=\"number\">60</span> * <span class=\"number\">60</span> *<span class=\"number\">1000L</span>;<span class=\"comment\">// 60 * 60 *1000  一个小时</span></span><br><span class=\"line\">    <span class=\"comment\">//设置秘钥明文</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">JWT_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sangeng&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getUUID</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replaceAll(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成jtw</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createJWT</span><span class=\"params\">(String subject)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JwtBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> getJwtBuilder(subject, <span class=\"literal\">null</span>, getUUID());<span class=\"comment\">// 设置过期时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成jtw</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ttlMillis token超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createJWT</span><span class=\"params\">(String subject, Long ttlMillis)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JwtBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> getJwtBuilder(subject, ttlMillis, getUUID());<span class=\"comment\">// 设置过期时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JwtBuilder <span class=\"title function_\">getJwtBuilder</span><span class=\"params\">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SignatureAlgorithm</span> <span class=\"variable\">signatureAlgorithm</span> <span class=\"operator\">=</span> SignatureAlgorithm.HS256;</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">secretKey</span> <span class=\"operator\">=</span> generalKey();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">nowMillis</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(nowMillis);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ttlMillis==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ttlMillis=JwtUtil.JWT_TTL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">expMillis</span> <span class=\"operator\">=</span> nowMillis + ttlMillis;</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">expDate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(expMillis);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jwts.builder()</span><br><span class=\"line\">                .setId(uuid)              <span class=\"comment\">//唯一的ID</span></span><br><span class=\"line\">                .setSubject(subject)   <span class=\"comment\">// 主题  可以是JSON数据</span></span><br><span class=\"line\">                .setIssuer(<span class=\"string\">&quot;sg&quot;</span>)     <span class=\"comment\">// 签发者</span></span><br><span class=\"line\">                .setIssuedAt(now)      <span class=\"comment\">// 签发时间</span></span><br><span class=\"line\">                .signWith(signatureAlgorithm, secretKey) <span class=\"comment\">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class=\"line\">                .setExpiration(expDate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> subject</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ttlMillis</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createJWT</span><span class=\"params\">(String id, String subject, Long ttlMillis)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JwtBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> getJwtBuilder(subject, ttlMillis, id);<span class=\"comment\">// 设置过期时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">//        String jwt = createJWT(&quot;2123&quot;);</span></span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> parseJWT(<span class=\"string\">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIyOTY2ZGE3NGYyZGM0ZDAxOGU1OWYwNjBkYmZkMjZhMSIsInN1YiI6IjIiLCJpc3MiOiJzZyIsImlhdCI6MTYzOTk2MjU1MCwiZXhwIjoxNjM5OTY2MTUwfQ.NluqZnyJ0gHz-2wBIari2r3XpPp06UMn4JS2sWHILs0&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> claims.getSubject();</span><br><span class=\"line\">        System.out.println(subject);</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(claims);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成加密后的秘钥 secretKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SecretKey <span class=\"title function_\">generalKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(encodedKey, <span class=\"number\">0</span>, encodedKey.length, <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jwt</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Claims <span class=\"title function_\">parseJWT</span><span class=\"params\">(String jwt)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">secretKey</span> <span class=\"operator\">=</span> generalKey();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jwts.parser()</span><br><span class=\"line\">                .setSigningKey(secretKey)</span><br><span class=\"line\">                .parseClaimsJws(jwt)</span><br><span class=\"line\">                .getBody();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.BoundSetOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.HashOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisCache</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 缓存的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> T value)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 缓存的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit 时间颗粒度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> T value, <span class=\"keyword\">final</span> Integer timeout, <span class=\"keyword\">final</span> TimeUnit timeUnit)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置有效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true=设置成功；false=设置失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">expire</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置有效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit 时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true=设置成功；false=设置失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">expire</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout, <span class=\"keyword\">final</span> TimeUnit unit)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存键值对应的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> operation.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除单个对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">deleteObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除集合对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> collection 多个对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">deleteObject</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection collection)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(collection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存List数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataList 待缓存的List数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"type\">long</span> <span class=\"title function_\">setCacheList</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> List&lt;T&gt; dataList)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的list对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存键值对应的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">getCacheList</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().range(key, <span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存Set</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataSet 缓存的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存数据的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class=\"title function_\">setCacheSet</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> Set&lt;T&gt; dataSet)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class=\"line\">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            setOperation.add(it.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> setOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的set</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; Set&lt;T&gt; <span class=\"title function_\">getCacheSet</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存Map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataMap</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheMap</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> Map&lt;String, T&gt; dataMap)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataMap != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的Map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class=\"title function_\">getCacheMap</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 往Hash中存入数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hKey Hash键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String hKey, <span class=\"keyword\">final</span> T value)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取Hash中的数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hKey Hash键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Hash中的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String hKey)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> opsForHash.get(key, hKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除Hash中的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hkey</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String hkey)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">HashOperations</span> <span class=\"variable\">hashOperations</span> <span class=\"operator\">=</span> redisTemplate.opsForHash();</span><br><span class=\"line\">        hashOperations.delete(key, hkey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取多个Hash中的数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hKeys Hash键集合</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Hash对象集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">getMultiCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> Collection&lt;Object&gt; hKeys)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern 字符串前缀</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;String&gt; <span class=\"title function_\">keys</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.keys(pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebUtils</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将字符串渲染到客户端</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response 渲染对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string 待渲染的字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">renderString</span><span class=\"params\">(HttpServletResponse response, String string)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            response.setStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">            response.setContentType(<span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">            response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">            response.getWriter().print(string);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>⑤实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户表(User)实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 三更</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;sys_user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">40356785423868312L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 主键</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 昵称</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nickName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 账号状态（0正常 1停用）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 邮箱</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 手机号</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phonenumber;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户性别（0男，1女，2未知）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 头像</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String avatar;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户类型（0管理员，1普通用户）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userType;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 创建人的用户id</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long createBy;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 创建时间</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 更新人</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long updateBy;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 更新时间</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date updateTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 删除标志（0代表未删除，1代表已删除）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer delFlag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-3-实现\">2.3.3 实现</h4>\n<h5 id=\"2-3-3-1-数据库校验用户\">2.3.3.1 数据库校验用户</h5>\n<p>​\t从之前的分析我们可以知道，我们可以自定义一个UserDetailsService,让SpringSecurity使用我们的UserDetailsService。我们自己的UserDetailsService可以从数据库中查询用户名和密码。</p>\n<h6 id=\"准备工作\">准备工作</h6>\n<p>​\t我们先创建一个用户表， 建表语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `sys_user` (</span><br><span class=\"line\">  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class=\"line\">  `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class=\"line\">  `nick_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class=\"line\">  `password` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class=\"line\">  `status` CHAR(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class=\"line\">  `email` VARCHAR(64) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class=\"line\">  `phonenumber` VARCHAR(32) DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class=\"line\">  `sex` CHAR(1) DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class=\"line\">  `avatar` VARCHAR(128) DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class=\"line\">  `user_type` CHAR(1) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class=\"line\">  `create_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class=\"line\">  `create_time` DATETIME DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class=\"line\">  `update_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class=\"line\">  `update_time` DATETIME DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class=\"line\">  `del_flag` INT(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;</span><br></pre></td></tr></table></figure>\n<p>​\t\t配置数据库信息</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">&#x27;00000000&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t定义Mapper接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t配置Mapper扫描</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.ry.security.mapper&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TokenApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(TokenApplication.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​\t   测试MP是否能正常使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUserMapper</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; users = userMapper.selectList(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111838635.png\" alt=\"image-20230311183819554\" style=\"zoom:25%;\">\n<h6 id=\"核心代码实现\">核心代码实现</h6>\n<p>我们要创建一个类<code>UserDetailsServiceImpl</code>来实现**<code>UserDetailsService</code>**接口，来让它实现在数据库里面查询，因为它原本的实现类是查询内存的。【在Service包中】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据用户名查询用户信息</span></span><br><span class=\"line\">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        wrapper.eq(User::getUserName,username);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userMapper.selectOne(wrapper);</span><br><span class=\"line\">        <span class=\"comment\">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(user))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//封装成UserDetails对象返回 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginUser</span>(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为UserDetailsService方法的返回值是UserDetails类型，所以需要定义一个类，实现该接口，把用户信息封装在其中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>   这里都要是true!!!!!</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginUser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetails</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getPassword();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getUserName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加{noop}。例如</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111906748.png\" alt=\"image-20230311190634698\" style=\"zoom:25%;\">\n<p>否则报错：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111907832.png\" alt=\"image-20230311190748794\" style=\"zoom:25%;\">\n<p>这样登陆的时候就可以用ry作为用户名，1234作为密码来登陆了。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111903258.png\" alt=\"image-20230311190316143\" style=\"zoom: 12%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111907018.png\" alt=\"image-20230311190700940\" style=\"zoom:25%;\">\n<h5 id=\"2-3-3-2-密码加密存储\">2.3.3.2 密码加密存储</h5>\n<p>​\t实际项目中我们不会把密码明文存储在数据库中。</p>\n<p>​\t默认使用的<code>PasswordEncoder</code>要求数据库中的密码格式为：{id}password 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换<code>PasswordEncoder</code>。</p>\n<p>​\t我们一般使用SpringSecurity为我们提供的<code>BCryptPasswordEncoder</code>。</p>\n<p>​\t我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。</p>\n<p>​\t我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111909581.png\" alt=\"image-20230311190930460\" style=\"zoom:25%;\">\n<p>但是这里要修改为加密之后的：</p>\n<p>否则还是报错</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111912623.png\" alt=\"image-20230311191204575\" style=\"zoom:25%;\">\n<p>如何进行加密：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> PasswordEncoder passwordEncoder;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testgetencode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">encode</span> <span class=\"operator\">=</span> passwordEncoder.encode(<span class=\"string\">&quot;1234&quot;</span>);</span><br><span class=\"line\">      System.out.println(encode); <span class=\"comment\">//$2a$10$ezRq7YM5Pqaa2JArn4J2i.bMRZ00NRhtbBA97fOJnixCWZk3pRjD6</span></span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   加密后的信息是动态变化的，因为我们要使用，matches()来进行比较。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">matches</span> <span class=\"operator\">=</span> passwordEncoder.matches(<span class=\"string\">&quot;1234&quot;</span>, encode);</span><br><span class=\"line\">      System.out.println(matches);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">matches2</span> <span class=\"operator\">=</span> passwordEncoder.matches(<span class=\"string\">&quot;12345&quot;</span>, encode);</span><br><span class=\"line\">      System.out.println(matches2);<span class=\"comment\">//false</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>得到之后：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111917106.png\" alt=\"image-20230311191708068\" style=\"zoom:25%;\">\n<p>此时重新访问</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111917942.png\" alt=\"image-20230311191701887\" style=\"zoom:25%;\">\n<h5 id=\"2-3-3-3-登陆接口\">2.3.3.3 登陆接口</h5>\n<p>​\t接下我们需要自定义登陆接口，然后让SpringSecurity对这个接口放行,让用户访问这个接口的时候不用登录也能访问。</p>\n<p>​\t在接口中我们通过<code>AuthenticationManager</code>的<code>authenticate</code>方法来进行用户认证,所以需要在SecurityConfig中配置把AuthenticationManager注入容器。</p>\n<p>​\t认证成功的话要生成一个jwt，放入响应中返回。并且为了让用户下回请求时能通过jwt识别出具体的是哪个用户，我们需要把用户信息存入redis，可以把用户id作为key。</p>\n<ul>\n<li>接下我们需要自定义登陆接口，<strong>然后让SpringSecurity对这个接口放行,让用户访问这个接口的时候不用登录也能访问。</strong>&lt;在配置类中实现的，http.XXXXXX~…….处&gt;</li>\n</ul>\n<h6 id=\"创建登录接口\">创建登录接口</h6>\n<blockquote>\n<p>此处还涉及创建Service和创建service的实现类，并实现login方法，这个方法就是获取user对象之后的实际登录的逻辑</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoginServcie loginServcie;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">login</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loginServcie.login(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>==对接口进行放行==</p>\n<ul>\n<li>先获取 AuthenticationManager,注入到容器中</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    拿到 AuthenticationManager</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration auth;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> auth.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>==login具体方法：==</p>\n<ul>\n<li>\n<p>在接口中我们通过<code>AuthenticationManager</code>的<code>authenticate</code>方法来进行用户认证,所以需要在SecurityConfig中配置把AuthenticationManager注入容器。</p>\n</li>\n<li>\n<p>认证成功的话要生成一个jwt，放入响应中返回。并且为了让用户下回请求时能通过jwt识别出具体的是哪个用户，我们需要把用户信息存入redis，可以把用户id作为key。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.LoginUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.ResponseResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.service.LoginService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.JwtUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.RedisCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LoginService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisCache redisCache;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">login</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * loginService.login();的核心流程：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         * 注入AuthenticationManager和RedisCache</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 调用AuthenticationManager的authenticate方法来进行用户认证。返回Authentication</span></span><br><span class=\"line\"><span class=\"comment\">         *      使用authenticate方法就需要传入Authentication，</span></span><br><span class=\"line\"><span class=\"comment\">         *      但Authentication是接口，因此需要去找它的实现类。</span></span><br><span class=\"line\"><span class=\"comment\">         *      这里我们使用Authentication的实现类是UsernamePasswordAuthenticationToken。</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 此时传入的Authentication只有用户名和密码：</span></span><br><span class=\"line\"><span class=\"comment\">         *      源码中参数</span></span><br><span class=\"line\"><span class=\"comment\">         * principal 属性为用户名</span></span><br><span class=\"line\"><span class=\"comment\">         * credentials 属性为密码</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用authenticate方法，返回的Authentication。</span></span><br><span class=\"line\"><span class=\"comment\">         *    如果不为空的话，传出的Authentication：</span></span><br><span class=\"line\"><span class=\"comment\">         *      Principal属性是Userdetails</span></span><br><span class=\"line\"><span class=\"comment\">         *      credentials 属性为null</span></span><br><span class=\"line\"><span class=\"comment\">         *    如果Authentication为NULL，</span></span><br><span class=\"line\"><span class=\"comment\">         *          说明认证没通过，要么没查询到这个用户，要么密码比对不通过。然后就抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\">         *    如果认证通过，获取UserId，JwtUtil要将UserId加密成一个token。</span></span><br><span class=\"line\"><span class=\"comment\">         *    将用户信息Authentication，存入redis。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        调用 AuthenticationManager 的authenticate方法来进行用户认证</span></span><br><span class=\"line\">        <span class=\"comment\">// 怎么从容器拿到 AuthenticationManager  --&gt; 配置类中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这里我们使用Authentication的实现类是UsernamePasswordAuthenticationToken。</span></span><br><span class=\"line\">        <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">usernamePasswordAuthenticationToken</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(user.getUserName(), user.getPassword());</span><br><span class=\"line\">        <span class=\"comment\">//调用AuthenticationManager的authenticate方法来进行用户认证,使用authenticate方法就需要传入Authentication的实现类</span></span><br><span class=\"line\">        <span class=\"type\">Authentication</span> <span class=\"variable\">authenticate</span> <span class=\"operator\">=</span> authenticationManager.authenticate(usernamePasswordAuthenticationToken);</span><br><span class=\"line\"><span class=\"comment\">//        认证没通过，要么没查询到这个用户，要么密码比对不通过。然后就抛出异常。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(authenticate))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        如果认证通过，</span></span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class=\"line\"><span class=\"comment\">//       获取UserId，</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> loginUser.getUser().getId().toString();</span><br><span class=\"line\">        <span class=\"comment\">//JwtUtil要将UserId加密成一个token。</span></span><br><span class=\"line\">        String  token= JwtUtil.createJWT(userId);</span><br><span class=\"line\"><span class=\"comment\">//        将用户信息Authentication，存入redis,存的是对象</span></span><br><span class=\"line\">        redisCache.setCacheObject(<span class=\"string\">&quot;login：&quot;</span>+userId, loginUser);</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;token&quot;</span>, token);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(<span class=\"number\">200</span>,<span class=\"string\">&quot;登陆成功&quot;</span>,map);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在SecurityConfig中再进行配置，然后用postman测试</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[涉及版本替换][<a href=\"https://blog.csdn.net/rq12345688/article/details/125479657\">https://blog.csdn.net/rq12345688/article/details/125479657</a>]</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    拿到 AuthenticationManager</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入 AuthenticationConfiguration</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration auth;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> auth.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 替换旧版本中的configure(HttpSecurity http)方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">                .csrf().disable()</span><br><span class=\"line\">                <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">                <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">                .anyRequest().authenticated();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>==打开本地redis==</p>\n<p>测试结果：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303112121287.png\" alt=\"image-20230311212132245\" style=\"zoom:33%;\">\n<h5 id=\"2-3-3-4-认证过滤器\">2.3.3.4 认证过滤器</h5>\n<p>为什么要写这么一个过滤器？</p>\n<p><code>SpringSecurity</code>自带的过滤器中是用来认证用户名和密码的但我们并没有使用它，在配置的时候就去掉了。之前的登录接口我们生成了一个token，当前端访问后端的时候需要携带这个token。而这个过滤器就是认证token的。</p>\n<p>大致流程：</p>\n<p>​\t我们需要自定义一个过滤器，这个过滤器会去获取请求头中的token，对token进行解析取出其中的userid。使用userid去redis中获取对应的LoginUser对象。然后封装Authentication对象存入SecurityContextHolder</p>\n<p>流程解析：</p>\n<p>==自定义一个<strong>过滤器</strong>==</p>\n<ol>\n<li>\n<p>获取请求头中的<code>token</code></p>\n<ol>\n<li>\n<p>如果获取的<code>token</code>字符串为空，说明前端访问后端就没有携带token。然后<strong>放行，return</strong></p>\n<blockquote>\n<p><strong>为什么是放行而不是抛异常呢？</strong></p>\n<p>因为没有携带token，有可能前端是想要登录，因此不能抛异常。</p>\n<p>就算是要访问其他资源，我们直接放行，**<code>Authentication</code>**对象没有用户任何信息，后面的过滤器也会抛出异常。后面也不会进行认证。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li>\n<p>使用<code>JwtUtil</code>对<code>token</code>进行解析取出其中的<code>userid</code>。</p>\n<p>如果<code>token</code>解析失败，说明前端携带的token不合法，就会抛出异常。</p>\n</li>\n<li>\n<p>使用<code>userid</code>去<code>redis</code>中获取对应的<code>LoginUser</code>对象。</p>\n</li>\n<li>\n<p>然后封装**<code>Authentication</code>**对象存入<code>SecurityContextHolder</code>。</p>\n<p>在封装**<code>Authentication</code>**时，使用的实现类是<code>UsernamePasswordAuthenticationToken</code>&lt;和login中认证的思想一致&gt;</p>\n<p>注意UsernamePasswordAuthenticationToken源码为</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303112153480.png\" alt></p>\n<blockquote>\n<p>该过滤器实现的接口并不是之前的<code>Filter</code>，而是去继承<code>OncePerRequestFilter</code>。</p>\n<p><code>OncePerRequestFilter</code>是Spring Boot里面的一个过滤器<strong>抽象类</strong>，这个过滤器抽象类通常被用于继承实现并在每次请求时<strong>只执行一次过滤</strong>。<strong>他能够确保在一次请求只通过一次filter，而不需要重复执行</strong></p>\n<p>而<code>Servlet</code>的<code>Filter</code>可能会执行多次。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.Filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.LoginUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.JwtUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.RedisCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.net.httpserver.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取请求头中的`token`</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 如果获取的`token`字符串为空，说明前端访问后端就没有携带token。然后放行，直接return</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 使用`JwtUtil`对`token`进行解析取出其中的`userid`。</span></span><br><span class=\"line\"><span class=\"comment\"> *         如果`token`解析失败，说明前端携带的token不合法，就会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 使用`userid`去`redis`中获取对应的`LoginUser`对象。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 然后封装`Authentication`对象存入`SecurityContextHolder`。</span></span><br><span class=\"line\"><span class=\"comment\"> *      在封装`Authentication`时，使用的实现类是`UsernamePasswordAuthenticationToken`&lt;和login中认证的思想一致&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">//OncePerRequestFilter可以保证请求的安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtAuthenticationTokenFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">JwtAuthenticationTokenFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisCache redisCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先需要获取token,login中在请求头map了这样的token</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断token是否为Null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.hasText(token))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//放行</span></span><br><span class=\"line\">            filterChain.doFilter(request, response);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String userId;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//使用`JwtUtil`对`token`进行解析取出其中的`userid`。</span></span><br><span class=\"line\">            <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> JwtUtil.parseJWT(token);</span><br><span class=\"line\">            userId = claims.getSubject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果`token`解析失败，说明前端携带的token不合法，就会抛出异常。</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;token非法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//使用`userid`去`redis`中获取对应的`LoginUser`对象。</span></span><br><span class=\"line\">         String key=<span class=\"string\">&quot;login：&quot;</span>+userId;</span><br><span class=\"line\">         <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> redisCache.getCacheObject(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(loginUser))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户未登录&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最后封装`UsernamePasswordAuthenticationToken`对象存入`SecurityContextHolder`</span></span><br><span class=\"line\">        <span class=\"comment\">//TODO 获取权限信息封装到Authentication中</span></span><br><span class=\"line\">        <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">usernamePasswordAuthenticationToken</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(loginUser,<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得登录的权限放行</span></span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>写完过滤器之要将其加到整个流程中的过滤器链中,config中配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.Filter.JwtAuthenticationTokenFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JwtAuthenticationTokenFilter  jwtAuthenticationTokenFilter ;</span><br><span class=\"line\">    <span class=\"comment\">//创建BCryptPasswordEncoder注入容器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    拿到 AuthenticationManager</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入 AuthenticationConfiguration</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration auth;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> auth.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 替换旧版本中的configure(HttpSecurity http)方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">                .csrf().disable()</span><br><span class=\"line\">                <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">                <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">                .anyRequest().authenticated();</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//把token校验过滤器添加到过滤器链中</span></span><br><span class=\"line\">        <span class=\"comment\">//通过字节码对象指定要加到哪一个过滤器之前，现在这里是加载到 UsernamePasswordAuthenticationFilter  之前</span></span><br><span class=\"line\">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter .class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>postman调试：</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303112218075.png\" alt></p>\n<p>此处对本地redis进行了配置：&lt;否则保错&gt;</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303112218620.png\" alt=\"image-20230311221821568\" style=\"zoom:25%;\">\n<p>测试 /hello</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303112242998.png\" alt=\"image-20230311224217961\" style=\"zoom:25%;\">\n<blockquote>\n<p>注：</p>\n<p>这里的“login：”+useId 的两处要保持一致</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303112244261.png\" alt=\"image-20230311224408225\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303112244152.png\" alt=\"image-20230311224430113\" style=\"zoom:25%;\">\n<p>这里面的：是中文还是英文都行，但是要一致，以为loginServiceImpl是先存储的，所以以现存的为主，或者把redis里面的键值删去再重新存储。一定注意！！！要一致！！！！！</p>\n</blockquote>\n<h5 id=\"2-3-3-5-退出登陆\">2.3.3.5 退出登陆</h5>\n<p>​\t我们只需要定义一个登陆接口，然后获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.ResponseResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">LoginService</span> &#123;</span><br><span class=\"line\">    ResponseResult <span class=\"title function_\">login</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResponseResult <span class=\"title function_\">logout</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.LoginUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.ResponseResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.service.LoginService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.JwtUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.RedisCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LoginService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisCache redisCache;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">logout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可。</span></span><br><span class=\"line\">        <span class=\"type\">Authentication</span> <span class=\"variable\">authentication</span> <span class=\"operator\">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">useid</span> <span class=\"operator\">=</span> loginUser.getUser().getId().toString();</span><br><span class=\"line\">        redisCache.deleteObject(<span class=\"string\">&quot;login：&quot;</span>+useid);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;退出成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoginService loginService;</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">login</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loginService.login(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/logout&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">logout</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loginService.logout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121655999.png\" style=\"zoom: 33%;\">\n<p>总结：</p>\n<ul>\n<li>\n<p>我们自定义了**<code>UserDetailsService</code><strong>接口实现类，来实现数据库查询。当中用到了我们定义的</strong><code>UserDetails</code>接口的实现类——<code>LoginUser</code>**。</p>\n</li>\n<li>\n<p>在**<code>LoginServiceImpl</code><strong>这一实现类中，我们需要对密码进行解密解析并对比。因为我们使用了</strong><code>PasswordEncoder</code>接口的其他实现类<code>BCryptPasswordEncoder</code>**。</p>\n</li>\n<li>\n<p>在实现登录接口的时候</p>\n<ul>\n<li>\n<p>需要**<code>AuthenticationManager</code>的<code>authenticate</code>方法**进行认证。</p>\n</li>\n<li>\n<p>传入**<code>Authentication</code>**接口的实现类是<code>UsernamePasswordAuthenticationToken</code>。构造方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">UsernamePasswordAuthenticationToken</span><span class=\"params\">(Object principal, Object credentials)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这表示该**<code>Authentication</code><strong>是</strong>未认证的**。之后会通过<code>UsernamePasswordAuthenticationFilter</code>过滤器来认证。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>在实现认证过滤器时，</p>\n<ul>\n<li>\n<p>需要使用<code>SecurityContextHolder.getContext().setAuthentication()</code>方法，将用户信息**<code>Authentication</code>**存进去。方便其他Filter使用。</p>\n</li>\n<li>\n<p>传入**<code>Authentication</code>**接口的实现类是<code>UsernamePasswordAuthenticationToken</code>。构造方法是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">UsernamePasswordAuthenticationToken</span><span class=\"params\">(Object principal, Object credentials, Collection&lt;? extends GrantedAuthority&gt; authorities)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这表示是通过**<code>Authentication</code>实现认证的**。之后就不会通过<code>UsernamePasswordAuthenticationFilter</code>过滤器来认证。</p>\n<blockquote>\n<p>通过DEBUG发现，如果携带token。</p>\n<ul>\n<li>context域中存入<strong>已认证的Authentication</strong>，就不会访问<code>UserDetailsServiceImpl</code>。</li>\n<li>context域中存入<strong>未认证的Authentication</strong>，就会访问<code>UserDetailsServiceImpl</code>，来进行认证。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>注：当我们使用配置类时，就已经<strong>去掉了<code>UsernamePasswordAuthenticationFilter</code></strong>。</p>\n<p>因为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//实际上下面这段我们已经删掉了</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">     <span class=\"built_in\">super</span>.configure(http);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下这个<code>super.configure(http);</code>这个父类的方法，它进行了<strong>默认的配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.logger.debug(<span class=\"string\">&quot;Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity).&quot;</span>);</span><br><span class=\"line\"> ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest())</span><br><span class=\"line\">                 .authenticated().and())</span><br><span class=\"line\">  \t\t\t\t.formLogin().and())\t\t<span class=\"comment\">//formLogin()......</span></span><br><span class=\"line\"> \t\t\t\t.httpBasic();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看这个<code>formLogin()</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> FormLoginConfigurer&lt;HttpSecurity&gt; <span class=\"title function_\">formLogin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> (FormLoginConfigurer)<span class=\"built_in\">this</span>.getOrApply(<span class=\"keyword\">new</span> <span class=\"title class_\">FormLoginConfigurer</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再查看<code>FormLoginConfigurer()</code>这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">FormLoginConfigurer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">super</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationFilter</span>(), (String)<span class=\"literal\">null</span>);</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.usernameParameter(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\"> <span class=\"built_in\">this</span>.passwordParameter(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，它添加了<code>UsernamePasswordAuthenticationFilter()</code>这个过滤器。</p>\n<p>但是我们配置的时候，去掉了<code>super.configure(http);</code>，也就是说不使用<strong>默认配置</strong>了</p>\n<p>那也就是说，不添加了<code>UsernamePasswordAuthenticationFilter()</code>这个过滤器。所以我们根本没使用这个过滤器。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-授权\">3. 授权</h2>\n<h3 id=\"3-0-权限系统的作用\">3.0 权限系统的作用</h3>\n<p>​\t例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p>\n<p>​\t总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</p>\n<p>​\t我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p>\n<p>​\t所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p>\n<p>​</p>\n<h5 id=\"相关概念\">相关概念</h5>\n<h6 id=\"主体\">主体</h6>\n<p>英文单词：principal</p>\n<p>使用系统的用户或设备或从其他系统远程登录的用户等等。简单说就是谁使用系统谁就是主体。</p>\n<h6 id=\"认证\">认证</h6>\n<p>英文单词：authentication</p>\n<p>权限管理系统确认一个主体的身份，允许主体进入系统。简单说就是“主体”证明自己是谁。</p>\n<p>笼统的认为就是以前所做的登录操作。</p>\n<h6 id=\"授权\">授权</h6>\n<p>英文单词：authorization</p>\n<p>将操作系统的“权力”“授予”“主体”，这样主体就具备了操作系统中特定功能的能力。</p>\n<p>所以简单来说，授权就是给用户分配权限。</p>\n<h3 id=\"3-1-授权基本流程\">3.1 授权基本流程</h3>\n<p>​\t在SpringSecurity中，会使用默认的==FilterSecurityInterceptor==来进行权限校验。在FilterSecurityInterceptor中会从==SecurityContextHolder==获取其中的<code>Authentication</code>，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p>\n<p>​\t所以我们在项目中只需要把当前登录用户的<code>权限信息也存入Authentication</code>。 然后设置我们的资源所需要的权限即可。</p>\n<h3 id=\"3-2-授权实现\">3.2 授权实现</h3>\n<h4 id=\"3-2-1-限制访问资源所需权限\">3.2.1 限制访问资源所需权限</h4>\n<p>​\t在<code>SpringSecurity</code>中，用什么表示权限？———— 权限其实就是 <strong>带有特殊意义的字符串</strong>。</p>\n<p>​\tSpringSecurity为我们提供了==基于注解的权限控制==方案，这也是我们项目中==主要采用的方式==。我们可以使用注解去指定访问对应的资源所需的权限。</p>\n<p>​\t但是要使用它我们需要先开启相关配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123; </span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t然后就可以使用对应的注解。@PreAuthorize</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span> <span class=\"comment\">//先直接把权限信息写死封装到UserDetails中进行测试</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-2-封装权限信息\">3.2.2 封装权限信息</h4>\n<p>​\t我们前面在写UserDetailsServiceImpl的时候说过，在查询出用户后还要获取对应的权限信息，封装到UserDetails中返回。</p>\n<p>​\t我们现在先直接把权限信息写死封装到UserDetails中进行测试。</p>\n<p>我们在上面登录的时候未确定权限，所以我们的切入点就在那两处==TODO==上</p>\n<p>==TODO：==</p>\n<p>​\tLoginUser修改完后我们就可以在UserDetailsServiceImpl中去把权限信息封装到LoginUser中了。我们写死权限进行测试，后面我们再从数据库中查询权限信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//UserDetailsService  是Security提供的 ，自己不能定义</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">//TODO 根据用户查询权限信息</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;test&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// return new LoginUser(user);  // 去LoginUser中进行修改为下面这行</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginUser</span>(user,list);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>我们之前定义了UserDetails的实现类LoginUser，想要让其能封装权限信息就要对其进行修改。</p>\n</li>\n<li>\n<p>需要说明的是：</p>\n<ul>\n<li>\n<p><code>private List&lt;String&gt; permissions;</code>代表权限字符串集合。</p>\n</li>\n<li>\n<p><code>private List&lt;SimpleGrantedAuthority&gt; authorities;</code>代表权限集合，我们要把<code>LoginUser</code>存入到<code>Redis</code>当中，默认情况下不会将<code>SimpleGrantedAuthority</code>进行序列化的，到时候会出问题报异常，因此需要使用<code>@JSONField(serialize = false)</code>禁止让他序列化。</p>\n</li>\n<li>\n<p><code>getAuthorities()</code>：这个方法是用来获取权限信息，需要返回权限信息的集合。</p>\n<p>方法体内就是<strong>把<code>List&lt;String&gt;</code>转换为<code>List&lt;SimpleGrantedAuthority&gt;</code>。</strong></p>\n</li>\n<li>\n<p><code>SimpleGrantedAuthority</code>：这个类是<code>GrantedAuthority</code>接口的实现类，<strong>构造方法是传入一个字符串</strong>。</p>\n</li>\n<li>\n<p>还新增了一个构造方法。<code>public LoginUser(User user, List&lt;String&gt; permissions)</code>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginUser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetails</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;  <span class=\"comment\">//登录密码和账号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//存储字符串类型的权限信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; permissions;  <span class=\"comment\">//授权信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LoginUser</span><span class=\"params\">(User user,List&lt;String&gt; permissions)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = user;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.permissions = permissions;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//存储SpringSecurity所需要的权限信息的集合，不让其序列化</span></span><br><span class=\"line\">    <span class=\"meta\">@JSONField(serialize = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class=\"line\">    <span class=\"comment\">//  这个方法就是权限相关的，之后调用这个方法，所以要重写</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(permissions))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!Objects.isNull(authorities))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> authorities;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        使用集合的方式</span></span><br><span class=\"line\"><span class=\"comment\">//        List&lt;GrantedAuthority&gt; newList = new ArrayList&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">//        for (String  permission:permissions) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(permission);</span></span><br><span class=\"line\"><span class=\"comment\">//            newList.add(simpleGrantedAuthority);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中 ，stream流方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        authorities = permissions.stream()</span><br><span class=\"line\">                                    .map(SimpleGrantedAuthority::<span class=\"keyword\">new</span>)</span><br><span class=\"line\">                                     .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authorities;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getPassword();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getUserName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>==ToDo==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.Filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.LoginUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.JwtUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.RedisCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.net.httpserver.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取请求头中的`token`</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 如果获取的`token`字符串为空，说明前端访问后端就没有携带token。然后放行，直接return</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 使用`JwtUtil`对`token`进行解析取出其中的`userid`。</span></span><br><span class=\"line\"><span class=\"comment\"> *         如果`token`解析失败，说明前端携带的token不合法，就会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 使用`userid`去`redis`中获取对应的`LoginUser`对象。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 然后封装`Authentication`对象存入`SecurityContextHolder`。</span></span><br><span class=\"line\"><span class=\"comment\"> *      在封装`Authentication`时，使用的实现类是`UsernamePasswordAuthenticationToken`&lt;和login中认证的思想一致&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">//OncePerRequestFilter可以保证请求的安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtAuthenticationTokenFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">JwtAuthenticationTokenFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisCache redisCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">       ........</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最后封装`UsernamePasswordAuthenticationToken`对象存入`SecurityContextHolder`</span></span><br><span class=\"line\">        <span class=\"comment\">//TODO 获取权限信息封装到Authentication中</span></span><br><span class=\"line\">        <span class=\"comment\">//UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =</span></span><br><span class=\"line\">                                <span class=\"comment\">//new UsernamePasswordAuthenticationToken(loginUser,null, null);</span></span><br><span class=\"line\">        <span class=\"comment\">//修改为</span></span><br><span class=\"line\">          <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">usernamePasswordAuthenticationToken</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(loginUser,<span class=\"literal\">null</span>, loginUser.getAuthorities());</span><br><span class=\"line\">        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得登录的权限放行</span></span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​\t此时测试要重新post,才会有权限信息</p>\n<p>此时debug:</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120017742.png\" alt=\"image-20230312001700699\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120012046.png\" alt=\"image-20230312001257000\" style=\"zoom:15%;\">\n<p>一旦修改权限：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120018881.png\" alt=\"image-20230312001815835\" style=\"zoom:25%;\">\n<p>就不可访问了</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121655149.png\" alt=\"image-20230312165538116\" style=\"zoom:33%;\">\n<h4 id=\"3-2-3-从数据库查询权限信息\">3.2.3 从数据库查询权限信息</h4>\n<h5 id=\"3-2-3-1-RBAC权限模型\">3.2.3.1 RBAC权限模型</h5>\n<p>​\tRBAC权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</p>\n<blockquote>\n<p>下表的关系：</p>\n<p>基本表：</p>\n<ul>\n<li>sys_user：用户表，记录用户的基本信息。</li>\n<li>sys_role：角色表，记录一些角色信息，比如 项目经理、程序员，项目组组长….</li>\n<li>sys_menu：权限表，记录一些权限信息，比如，删除权限，更新权限等等…</li>\n</ul>\n<p>关系表：</p>\n<ul>\n<li>sys_user_role：用户和角色是多对多的关系，一个用户可以有多个角色，一个角色可以被多个用户所拥有【这个表描述，一个用户有哪些角色】</li>\n<li>sys_role_menu：角色和权限也是多对多关系【这个表描述，一个角色有哪些权限】</li>\n</ul>\n<p>这样就可以描述了 一个用户有哪些权限了。</p>\n</blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303111703982.png\" alt=\"image-20211222110249727\" style=\"zoom:33%;\">\n<h5 id=\"3-2-3-2-准备工作\">3.2.3.2 准备工作</h5>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE <span class=\"comment\">/*!32312 IF NOT EXISTS*/</span>`sg_security` <span class=\"comment\">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">USE `sg_security`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_menu`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_menu` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `menu_name` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单名&#x27;</span>,</span><br><span class=\"line\">  `path` <span class=\"type\">varchar</span>(<span class=\"number\">200</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;路由地址&#x27;</span>,</span><br><span class=\"line\">  `component` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;组件路径&#x27;</span>,</span><br><span class=\"line\">  `visible` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单状态（0显示 1隐藏）&#x27;</span>,</span><br><span class=\"line\">  `status` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单状态（0正常 1停用）&#x27;</span>,</span><br><span class=\"line\">  `perms` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;权限标识&#x27;</span>,</span><br><span class=\"line\">  `icon` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;#&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单图标&#x27;</span>,</span><br><span class=\"line\">  `create_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `create_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `del_flag` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;是否删除（0未删除 1已删除）&#x27;</span>,</span><br><span class=\"line\">  `remark` <span class=\"type\">varchar</span>(<span class=\"number\">500</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;备注&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4 COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;菜单表&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_role`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_role` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `role_key` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;角色权限字符串&#x27;</span>,</span><br><span class=\"line\">  `status` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;角色状态（0正常 1停用）&#x27;</span>,</span><br><span class=\"line\">  `del_flag` <span class=\"type\">int</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;del_flag&#x27;</span>,</span><br><span class=\"line\">  `create_by` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `create_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_by` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `remark` <span class=\"type\">varchar</span>(<span class=\"number\">500</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;备注&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4 COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;角色表&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_role_menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_role_menu`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_role_menu` (</span><br><span class=\"line\">  `role_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;角色ID&#x27;</span>,</span><br><span class=\"line\">  `menu_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单id&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`role_id`,`menu_id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_user` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_user`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_user` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;主键&#x27;</span>,</span><br><span class=\"line\">  `user_name` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>,</span><br><span class=\"line\">  `nick_name` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;昵称&#x27;</span>,</span><br><span class=\"line\">  `password` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;密码&#x27;</span>,</span><br><span class=\"line\">  `status` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;账号状态（0正常 1停用）&#x27;</span>,</span><br><span class=\"line\">  `email` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;邮箱&#x27;</span>,</span><br><span class=\"line\">  `phonenumber` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;手机号&#x27;</span>,</span><br><span class=\"line\">  `sex` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户性别（0男，1女，2未知）&#x27;</span>,</span><br><span class=\"line\">  `avatar` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;头像&#x27;</span>,</span><br><span class=\"line\">  `user_type` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;1&#x27;</span> COMMENT <span class=\"string\">&#x27;用户类型（0管理员，1普通用户）&#x27;</span>,</span><br><span class=\"line\">  `create_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;创建人的用户id&#x27;</span>,</span><br><span class=\"line\">  `create_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;创建时间&#x27;</span>,</span><br><span class=\"line\">  `update_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;更新人&#x27;</span>,</span><br><span class=\"line\">  `update_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;更新时间&#x27;</span>,</span><br><span class=\"line\">  `del_flag` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;删除标志（0代表未删除，1代表已删除）&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4 COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;用户表&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_user_role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_user_role`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_user_role` (</span><br><span class=\"line\">  `user_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;用户id&#x27;</span>,</span><br><span class=\"line\">  `role_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;角色id&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`user_id`,`role_id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT </span><br><span class=\"line\">\tDISTINCT m.`perms`</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\tsys_user_role ur</span><br><span class=\"line\">\tLEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class=\"line\">\tLEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class=\"line\">\tLEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\tuser_id = 3</span><br><span class=\"line\">\tAND r.`status` = 0</span><br><span class=\"line\">\tAND m.`status` = 0</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120038554.png\" alt=\"image-20230312003827502\" style=\"zoom:25%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 菜单表(Menu)实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> makejava</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-11-24 15:30:08</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(value=&quot;sys_menu&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Menu</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">54979041104113736L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单名</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String menuName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 路由地址</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String path;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 组件路径</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String component;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单状态（0显示 1隐藏）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String visible;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单状态（0正常 1停用）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 权限标识</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String perms;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单图标</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String icon;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long createBy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long updateBy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date updateTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 是否删除（0未删除 1已删除）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer delFlag;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 备注</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String remark;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-2-3-3-代码实现\">3.2.3.3 代码实现</h5>\n<p>​\t我们只需要根据用户id去查询到其所对应的权限信息即可。</p>\n<p>​\t所以我们可以先定义个mapper，其中提供一个方法可以根据userid查询权限信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.Menu;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MenuMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; <span class=\"title function_\">selectPermsByUserId</span><span class=\"params\">(Long userid)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​\t尤其是自定义方法，所以需要创建对应的mapper文件，定义对应的sql语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.ry.security.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectPermsByUserId&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT</span><br><span class=\"line\">        DISTINCT m.`perms`</span><br><span class=\"line\">        FROM</span><br><span class=\"line\">        sys_user_role ur</span><br><span class=\"line\">        LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class=\"line\">        LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class=\"line\">        LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class=\"line\">        WHERE</span><br><span class=\"line\">        user_id = #&#123;userid&#125;\t\t\t\t<span class=\"comment\">&lt;!--user_id需要使用占位符--&gt;</span></span><br><span class=\"line\">        AND r.`status` = 0</span><br><span class=\"line\">        AND m.`status` = 0</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​\t在application.yml中配置mapperXML文件的位置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/sg_security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath*:/mapper/**/*.xml</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​\t然后我们可以在UserDetailsServiceImpl中去调用该mapper的方法查询权限信息封装到LoginUser对象中即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.LoginUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.Menu;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.mapper.MenuMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Array;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//UserDetailsService  是Security提供的 ，自己不能定义</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MenuMapper menuMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 首先要根据传入的Username参数，查询数据库</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果没有这个用户Objects.isNull(user)，就抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 根据用户查询权限信息</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 添加到**UserDetails接口的实现类**中</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据用户名查询用户信息</span></span><br><span class=\"line\">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        userQueryWrapper.eq(<span class=\"string\">&quot;user_name&quot;</span>,username );</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userMapper.selectOne(userQueryWrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(user))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UsernameNotFoundException</span>(<span class=\"string\">&quot;用户名或密码异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 根据用户查询权限信息</span></span><br><span class=\"line\">        <span class=\"comment\">//ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(&quot;test&quot;,&quot;admin&quot;));</span></span><br><span class=\"line\">        List&lt;String&gt; permissionKeyList = menuMapper.selectPermsByUserId(user.getId());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginUser</span>(user,permissionKeyList);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>之后进行测试，先post 再get</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120039757.png\" alt=\"image-20230312003905708\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120039031.png\" alt=\"image-20230312003923982\" style=\"zoom:25%;\">\n<h2 id=\"4-自定义失败处理\">4. 自定义失败处理</h2>\n<p>​\t在认证失败或者是授权失败的情况下，能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。</p>\n<p>例如：当我们登录时</p>\n<p>如果登录失败，返回的<code>JSON</code>如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timestamp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2022-08-21T14:00:09.643+00:00&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">403</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;error&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Forbidden&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/user/login&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果登录成功，返回的<code>JSON</code>如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">200</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;登陆成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIwYjk4YTY3NWUyMGY0YTljOWFkOTU2YTYwYTU3YjUwNCIsInN1YiI6IjMiLCJpc3MiOiJzZyIsImlhdCI6MTY3ODU1MjYyNywiZXhwIjoxNjc4NTU2MjI3fQ.zAlzXg6d-qqlKWYKGP1JXuUTFY1qnz-2aV-OsgUqIHs&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>为了统一<code>JSON</code>的格式</p>\n<p>​\t在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常,就会被<code>ExceptionTranslationFilter</code>捕获到,之后在<code>ExceptionTranslationFilter</code>中会去判断是认证失败还是授权失败出现的异常。</p>\n<blockquote>\n<p>但是我们一般的程序中出现异常时：需要DEBUG去查看，然后<code>try...catch</code>捕获异常，看看是什么原因报错。</p>\n</blockquote>\n<ul>\n<li>\n<p>如果是==认证==过程中出现的异常会被封装成<code>AuthenticationException</code>然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p>\n</li>\n<li>\n<p>如果是==授权==过程中出现的异常会被封装成<code>AccessDeniedException</code>然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p>\n</li>\n<li>\n<p>所以如果我们需要自定义异常处理，我们只需要自定义<code>AuthenticationEntryPoint</code>和<code>AccessDeniedHandler</code>的==实现类==然后配置给SpringSecurity即可。</p>\n</li>\n</ul>\n<h4 id=\"做法：\">做法：</h4>\n<h5 id=\"创建一个包-handler\">创建一个包 <code>handler</code></h5>\n<h5 id=\"自定义实现类\">自定义实现类</h5>\n<h6 id=\"1、实现AuthenticationEntryPoint接口【处理认证过程中】，重写对应的方法\">1、实现<code>AuthenticationEntryPoint</code>接口【处理认证过程中】，重写对应的方法</h6>\n<ul>\n<li>首先需要定义一个响应对象，<code>new ResponseResult(403, &quot;权限不足&quot;);</code></li>\n</ul>\n<p>​\t\t或者是<code>new ResponseResult(HttpStatus.FORBIDDEN.value(), &quot;权限不足&quot;);</code></p>\n<p>​\t\t认证失败响应码可以是401，或者是<code>HttpStatus.UNAUTHORIZED.value()</code>。</p>\n<ul>\n<li>\n<p>将对象序列化为<code>JSON</code>字符串<code>JSON.toJSONString()</code></p>\n</li>\n<li>\n<p>使用<code>WebUtils</code>工具类，将字符串写到<code>response</code>中</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.handler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.ResponseResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.WebUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AccessDeniedHandlerImpl</span>  <span class=\"keyword\">implements</span> <span class=\"title class_\">AccessDeniedHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        <span class=\"type\">ResponseResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(HttpStatus.FORBIDDEN.value(),<span class=\"string\">&quot;您的权限不足&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> JSON.toJSONString(result);</span><br><span class=\"line\">        WebUtils.renderString(response,json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"2、实现AccessDeniedHandler接口【处理授权过程中】\">2、实现<code>AccessDeniedHandler</code>接口【处理授权过程中】</h6>\n<p>过程和上面一样</p>\n<p>权限不足响应码可以是403，或者是<code>HttpStatus.FORBIDDEN.value()</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.handler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.ResponseResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.utils.WebUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthenticationEntryPointImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationEntryPoint</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">commence</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        <span class=\"type\">ResponseResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(HttpStatus.UNAUTHORIZED.value(),<span class=\"string\">&quot;用户认证失败请查询登录&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> JSON.toJSONString(result);</span><br><span class=\"line\">        <span class=\"comment\">//处理异常</span></span><br><span class=\"line\">        WebUtils.renderString(response,json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置给SpringSecurity\">配置给SpringSecurity</h5>\n<h6 id=\"1、先注入对应的处理器\">1、先注入对应的处理器</h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AccessDeniedHandler accessDeniedHandler;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2、然后我们可以使用HttpSecurity对象的方法去配置。\">2、然后我们可以使用HttpSecurity对象的方法去配置。</h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 替换旧版本中的configure(HttpSecurity http)方法</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">      http</span><br><span class=\"line\">              <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">              .csrf().disable()</span><br><span class=\"line\">              <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">              .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">              .and()</span><br><span class=\"line\">              .authorizeRequests()</span><br><span class=\"line\">              <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">              .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">              <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">              .anyRequest().authenticated();</span><br><span class=\"line\">      <span class=\"comment\">//把token校验过滤器添加到过滤器链中</span></span><br><span class=\"line\">      <span class=\"comment\">//通过字节码对象指定要加到哪一个过滤器之前，现在这里是加载到 UsernamePasswordAuthenticationFilter  之前</span></span><br><span class=\"line\">      http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter .class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//配置异常处理器。</span></span><br><span class=\"line\">      http.exceptionHandling()</span><br><span class=\"line\">              .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class=\"line\">              .accessDeniedHandler(accessDeniedHandler);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120120877.png\" alt=\"image-20230312012056811\" style=\"zoom: 15%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303120126023.png\" alt=\"image-20230312012630965\" style=\"zoom:15%;\">\n<h2 id=\"5-跨域\">5. 跨域</h2>\n<p>​\t浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。</p>\n<p>​\t前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</p>\n<p>​\t所以我们就要处理一下，让前端能进行跨域请求。</p>\n<p>①先新建config并对config类进行配置，运行跨域请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 设置允许跨域的路径</span></span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置允许跨域请求的域名</span></span><br><span class=\"line\">                .allowedOriginPatterns(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 是否允许cookie</span></span><br><span class=\"line\">                .allowCredentials(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置允许的请求方式</span></span><br><span class=\"line\">                .allowedMethods(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置允许的header属性</span></span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 跨域允许时间</span></span><br><span class=\"line\">                .maxAge(<span class=\"number\">3600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>②开启SpringSecurity的跨域访问</p>\n<p>由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 替换旧版本中的configure(HttpSecurity http)方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">     http</span><br><span class=\"line\">             <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">             .csrf().disable()</span><br><span class=\"line\">             <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">             .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">             .and()</span><br><span class=\"line\">             .authorizeRequests()</span><br><span class=\"line\">             <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">             .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">             <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">             .anyRequest().authenticated();</span><br><span class=\"line\">     <span class=\"comment\">//把token校验过滤器添加到过滤器链中</span></span><br><span class=\"line\">     <span class=\"comment\">//通过字节码对象指定要加到哪一个过滤器之前，现在这里是加载到 UsernamePasswordAuthenticationFilter  之前</span></span><br><span class=\"line\">     http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter .class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//配置异常处理器。</span></span><br><span class=\"line\">     http.exceptionHandling()</span><br><span class=\"line\">             .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class=\"line\">             .accessDeniedHandler(accessDeniedHandler);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//允许跨域</span></span><br><span class=\"line\">     http.cors();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时需要另装前端项目，本处不做尝试，只给出演示结果</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121656548.png\" alt=\"image-20230312165606513\" style=\"zoom: 25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121054496.png\" alt=\"image-20230312105458425\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121055499.png\" alt=\"image-20230312105511434\" style=\"zoom:25%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testCors&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">cors</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(<span class=\"number\">200</span>,<span class=\"string\">&quot;testCors&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121058772.png\" alt=\"image-20230312105807707\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121058752.png\" alt=\"image-20230312105831677\" style=\"zoom:25%;\">\n<h2 id=\"6-扩展知识\">6. 扩展知识</h2>\n<h3 id=\"其它权限校验方法\">其它权限校验方法</h3>\n<p>我们前面都是使用@PreAuthorize注解，然后再在其中使用的是hasAuthority方法进行校验。SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。</p>\n<p>​</p>\n<p>这里我们先不急着去介绍这些方法，我们先去理解hasAuthority的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p>\n<p>​</p>\n<p>hasAuthority方法实际是执行到了<code>SecurityExpressionRoot</code>的<code>hasAuthority</code>，大家只要断点调试既可知道它内部的校验原理。</p>\n<p>hasAuthority内部其实是调用authentication的getAuthorities方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p>\n<blockquote>\n<p>补充：</p>\n<p>参考：</p>\n<ul>\n<li>\n<p><a href=\"https://blog.csdn.net/qq_35067322/article/details/124207162\">https://blog.csdn.net/qq_35067322/article/details/124207162</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/9f1aab4440d2\">https://www.jianshu.com/p/9f1aab4440d2</a></p>\n</li>\n</ul>\n<p><code>Spring Security</code>默认是关闭方法注解的，开启它只需要通过引入<code>@EnableGlobalMethodSecurity</code>注解即可:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">&gt;<span class=\"meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//... </span></span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@EnableGlobalMethodSecurity</code> 提供了以下三个参数:</p>\n<ul>\n<li><code>prePostEnabled</code>：基于表达式的注解</li>\n<li><code>securedEnabled</code>：开启基于角色的注解</li>\n<li><code>jsr250Enabled</code>：开启对JSR250的注解。</li>\n</ul>\n<p>可以根据需要选择使用这三种的一种或者其中几种。</p>\n<p>下面我们大概了解一下 <code>prePostEnabled = true</code></p>\n<p>开启后支持<strong>Spring EL表达式</strong>，如果没有访问方法的权限，会抛出<code>AccessDeniedException</code>，启用了如下注解：</p>\n</blockquote>\n<h5 id=\"prePostEnabled-true\"><code>prePostEnabled = true</code></h5>\n<blockquote>\n<p><strong>@PreAuthorize</strong>：进入<strong>方法之前</strong>验证授权</p>\n<ul>\n<li>可以使用SPEL表达式或者调用自带的方法，例如：</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;#userId == authentication.principal.userId or hasAuthority(‘ADMIN’)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">changePassword</span><span class=\"params\">(<span class=\"type\">long</span> userId )</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>表示在<code>changePassword</code>方法执行之前，判断方法参数<code>userId</code>的值是否等于<code>principal</code>中保存的当前用户的<code>userId</code>，或者当前用户是否具有<code>ROLE_ADMIN</code>权限，两种符合其一，就可以访问该 方法。</p>\n<p>使用方法进行校验：</p>\n<p><code>hasAuthority</code>：只能传入一个权限，只有用户有这个权限才可以访问资源。</p>\n<p><code>hasAnyAuthority</code>：可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;test&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p><code>hasRole</code>：要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;hasRole(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用户有<code>system:dept:list</code>权限是无法访问的，得有<code>ROLE_system:dept:list</code>权限才可以</p>\n</blockquote>\n<p><code>hasAnyRole</code>：有任意的角色就可以访问。</p>\n<ul>\n<li>hasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>@PostAuthorize</strong>：检查授权<strong>方法之后</strong>才被执行并且可以影响执行方法的</p>\n<ul>\n<li><strong>@PostAuthorize</strong>：检查授权<strong>方法之后</strong>才被执行并且可以影响执行方法的返回值</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostAuthorize(&quot;returnObject.username == authentication.principal.nickName&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CustomUser <span class=\"title function_\">loadUserDetail</span><span class=\"params\">(String username)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userRoleRepository.loadUserByUserName(username);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>@PostFilter</strong>：在方法执行之后执行，而且这里可以调用方法的返回值，然后对返回值进行过滤或处理或修改并返回</p>\n<p><strong>@PreFilter</strong>：在方法执行之前执行，而且这里可以调用方法的参数，然后对参数值进行过滤或处理或修改</p>\n</blockquote>\n<h5 id=\"securedEnabled-true\"><code>securedEnabled=true</code></h5>\n<blockquote>\n<p>主要开启了**@Secured**</p>\n<p>注解规定了访问访方法的角色列表，在列表中最少指定一种角色</p>\n<p><code>@Secured</code>在方法上指定安全性，要求 角色/权限等 只有对应 角色/权限 的用户才可以调用这些方法。 如果有人试图调用一个方法，但是不拥有所需的 角色/权限，那会将会拒绝访问将引发异常</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Secured(&quot;ROLE_VIEWER&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">SecurityContext</span> <span class=\"variable\">securityContext</span> <span class=\"operator\">=</span> SecurityContextHolder.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> securityContext.getAuthentication().getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Secured(&#123; &quot;ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot; &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>@Secured(&quot;ROLE_VIEWER&quot;)</code> 表示只有拥有<code>ROLE_VIEWER</code>角色的用户，才能够访问<code>getUsername()</code>方法。</p>\n<p><code>@Secured(&#123; &quot;ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot; &#125;)</code> 表示用户拥有”<code>ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot;</code> 两个角色中的任意一个角色，均可访问 <code>getUsername2</code> 方法。</p>\n<blockquote>\n<p>@Secured,不支持Spring EL表达式</p>\n</blockquote>\n</blockquote>\n<h5 id=\"jsr250Enabled-true\"><code>jsr250Enabled = true</code></h5>\n<blockquote>\n<ol>\n<li><strong>@DenyAll</strong>：拒绝所有权限</li>\n<li><strong>@RolesAllowed</strong>：在功能及使用方法上与 <code>@Secured</code> 完全相同</li>\n<li><strong>@PermitAll</strong>：接受所有权限</li>\n</ol>\n</blockquote>\n<h3 id=\"基于配置的权限控制\">基于配置的权限控制</h3>\n<p>​\t我们也可以在配置类中使用使用配置的方式对资源进行权限控制。使用配置文件进行权限控制方案，适合对<strong>静态资源</strong>进行配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">                .csrf().disable()</span><br><span class=\"line\">                <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">                <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">                .anyRequest().authenticated();</span><br><span class=\"line\">        <span class=\"comment\">//把token校验过滤器添加到过滤器链中</span></span><br><span class=\"line\">        <span class=\"comment\">//通过字节码对象指定要加到哪一个过滤器之前，现在这里是加载到 UsernamePasswordAuthenticationFilter  之前</span></span><br><span class=\"line\">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter .class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//配置异常处理器。</span></span><br><span class=\"line\">        http.exceptionHandling()</span><br><span class=\"line\">                .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class=\"line\">                .accessDeniedHandler(accessDeniedHandler);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//允许跨域</span></span><br><span class=\"line\">        http.cors();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//基于配置的权限控制</span></span><br><span class=\"line\">         http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/hello&quot;</span>).hasAuthority(<span class=\"string\">&quot;system:test:index&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">        </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"权限配置解析\">权限配置解析</h4>\n<blockquote>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41865652/article/details/123685248\">https://blog.csdn.net/qq_41865652/article/details/123685248</a></p>\n<p><a href=\"https://blog.csdn.net/Shair911/article/details/104181917/\">https://blog.csdn.net/Shair911/article/details/104181917/</a></p>\n<p><code>http.</code></p>\n<ul>\n<li>\n<p><code>authorizeRequests()</code>主要是对<code>url</code>进行访问权限控制，通过这个方法来实现<code>url</code>授权操作。</p>\n</li>\n<li>\n<p><code>anyRequest()</code>，表示匹配所有的<code>url</code>请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests()</span><br><span class=\"line\">     <span class=\"comment\">// 匹配所有的请求，并且所有请求都需要登录认证</span></span><br><span class=\"line\">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>antMatcher(String regx)</code>，传递一个<code>ant</code>表达式参数，表示匹配所有满足<code>ant</code>表达式的请求</p>\n<ul>\n<li>\n<p><strong>ant表达式中特殊字符解释</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">规则</th>\n<th style=\"text-align:left\">解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">？</td>\n<td style=\"text-align:left\">匹配一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">匹配0个或多个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">**</td>\n<td style=\"text-align:left\">匹配0个或多个目录</td>\n</tr>\n</tbody>\n</table>\n<p>配置类代码示例：</p>\n</li>\n</ul>\n</li>\n</ul>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests()</span><br><span class=\"line\">          <span class=\"comment\">// 允许登录页面匿名访问</span></span><br><span class=\"line\">         .antMatchers(<span class=\"string\">&quot;/showLogin&quot;</span>, <span class=\"string\">&quot;/errPage&quot;</span>).anonymous()</span><br><span class=\"line\">          <span class=\"comment\">// 所有的静态资源允许匿名访问</span></span><br><span class=\"line\">          .antMatchers(</span><br><span class=\"line\">                  <span class=\"string\">&quot;/css/**&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/js/**&quot;</span>,</span><br><span class=\"line\">                  <span class=\"string\">&quot;/images/**&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/fonts/**&quot;</span>,</span><br><span class=\"line\">                 <span class=\"string\">&quot;/favicon.ico&quot;</span></span><br><span class=\"line\">                ).anonymous()</span><br><span class=\"line\">         <span class=\"comment\">// 其他所有的请求都需要登录认证</span></span><br><span class=\"line\">          .anyRequest().authenticated();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>antMatcher(HttpMethod.*, String regx)</code>，传递一个请求方法类型参数加ant表达式参数，表示匹配所有满足ant表达式的指定请求方式的<code>url</code></p>\n<p>请求方式的枚举类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET,</span><br><span class=\"line\">HEAD,</span><br><span class=\"line\">POST,</span><br><span class=\"line\">PUT,</span><br><span class=\"line\">PATCH,</span><br><span class=\"line\">DELETE,</span><br><span class=\"line\">OPTIONS,</span><br><span class=\"line\">TRACE;</span><br></pre></td></tr></table></figure>\n<p>配置类代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests()</span><br><span class=\"line\">    <span class=\"comment\">// 允许GET请求登录页面匿名访问</span></span><br><span class=\"line\">   .antMatchers(HttpMethod.GET, <span class=\"string\">&quot;/showLogin&quot;</span>, <span class=\"string\">&quot;/errPage&quot;</span>).anonymous();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n</code></pre>\n</blockquote>\n<h4 id=\"访问控制方法\">访问控制方法</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名称</th>\n<th style=\"text-align:left\">方法作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>permitAll()</code></td>\n<td style=\"text-align:left\">表示所匹配的URL任何人都允许访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>anonymous()</code></td>\n<td style=\"text-align:left\">表示可以<strong>匿名访问</strong>匹配的URL。和<code>permitAll()</code>效果类似，只是设置为<code>anonymous()</code>的url会执行<code>filterChain</code>中的filter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>denyAll()</code></td>\n<td style=\"text-align:left\">表示所匹配的URL都不允许被访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>authenticated()</code></td>\n<td style=\"text-align:left\">表示所匹配的URL都需要被认证才能访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rememberMe()</code></td>\n<td style=\"text-align:left\">允许通过remember-me登录的用户访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>access()</code></td>\n<td style=\"text-align:left\"><code>SpringEl</code>表达式结果为true时可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fullyAuthenticated()</code></td>\n<td style=\"text-align:left\">用户完全认证可以访问（非remember-me下自动登录）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasRole()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示角色，则其角色可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasAnyRole()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示角色，则其中任何一个角色可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasAuthority()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示权限，则其权限可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasAnyAuthority()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示权限，则其中任何一个权限可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasIpAddress()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示<code>IP</code>地址，如果用户<code>IP</code>和参数匹配，则可以访问</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>配置案例示例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//任何用户都可以访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).permitAll();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).access(<span class=\"string\">&quot;permitAll&quot;</span>);]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//任何用户都不能访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).denyAll();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).access(<span class=\"string\">&quot;denyAll&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//认证用户可以访问（除了匿名认证）</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).authenticated();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;authenticated&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//认证用户可以访问（除了匿名认证，记住我）</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).fullyAuthenticated();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;fullyAuthenticated&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//记住我的认证可以访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).rememberMe();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;rememberMe&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匿名用户可以访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).anonymous();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;anonymous&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否有权限</span></span><br><span class=\"line\">\t   http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).hasAuthority(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).access(<span class=\"string\">&quot;hasAuthority(&#x27;user&#x27;)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否有任意一个权限</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).hasAnyAuthority(<span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).access(<span class=\"string\">&quot;hasAnyAuthority(&#x27;update&#x27;,&#x27;delete&#x27;,&#x27;insert&#x27;)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//spring security中的role并非是一个或多个权限的集合，而是权限的一种，通常以ROLE_开头</span></span><br><span class=\"line\"><span class=\"comment\">//role就是ROLE_开头的权限</span></span><br><span class=\"line\"><span class=\"comment\">//注意：hasRole、hasAnyRole里面的role不需要以ROLE_开头，否则会报异常</span></span><br><span class=\"line\"><span class=\"comment\">//注意：如果在access里面使用hasRole、hasAnyRole则ROLE_前缀可加，可不加</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).hasRole(<span class=\"string\">&quot;GUEST&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).access(<span class=\"string\">&quot;hasRole(&#x27;GUEST&#x27;)&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).hasAuthority(<span class=\"string\">&quot;ROLE_GUEST&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).hasAnyRole(<span class=\"string\">&quot;GUEST&quot;</span>, <span class=\"string\">&quot;USER&quot;</span>, <span class=\"string\">&quot;ADMIN&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).access(<span class=\"string\">&quot;hasAnyRole(&#x27;ROLE_GUEST&#x27;,&#x27;ROLE_USER&#x27;,&#x27;ROLE_ADMIN&#x27;)&quot;</span>);</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>​</p>\n<h3 id=\"自定义权限校验方法\">自定义权限校验方法</h3>\n<p>我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法。</p>\n<p>做法：</p>\n<p>只需要定义一个类，该类<strong>使用注解注入到Spring容器中</strong>。</p>\n<p>然后在类中定义一个方法，让它的<strong>返回值为布尔类型</strong>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.expression;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.bean.LoginUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;expression&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGExpressionRoot</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAuthority</span><span class=\"params\">(String authority)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前用户的权限</span></span><br><span class=\"line\">        <span class=\"type\">Authentication</span> <span class=\"variable\">authentication</span> <span class=\"operator\">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class=\"line\">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class=\"line\">        <span class=\"comment\">//判断用户权限集合中是否存在authority</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> permissions.contains(authority);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​\t 在SPEL表达式中使用 <code>@expression </code>相当于获取容器中bean的名字为expression的对象。然后再调用这个对象的hasAuthority方法就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;@expression.hasAuthority(&#x27;authority&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试debug：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121144206.png\" alt=\"image-20230312114430181\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121145812.png\" alt=\"image-20230312114546756\" style=\"zoom:25%;\">\n<p>只要将上面的controller方法进行修改就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;@expression.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span>   <span class=\"comment\">//初步学习，写成静态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121147718.png\" alt=\"image-20230312114735684\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121147193.png\" alt=\"image-20230312114716166\" style=\"zoom:25%;\">\n<h3 id=\"CSRF-2\">CSRF</h3>\n<p>​\tCSRF是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p>\n<p>​\t<a href=\"https://blog.csdn.net/freeking101/article/details/86537087\">https://blog.csdn.net/freeking101/article/details/86537087</a></p>\n<p>​\tSpringSecurity去防止CSRF攻击的方式就是通过csrf_token。后端会生成一个csrf_token，前端发起请求的时候需要携带这个csrf_token,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p>\n<p>​\t我们可以发现CSRF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储在cookie中；并且需要前端代码去把token设置到请求头中才可以，所以CSRF攻击也就不用担心了。</p>\n<p>​\t上面代码中关闭csrf的原因：</p>\n<p>​\t\t\t\t前后端分离的项目请求头会带有token，所以关闭。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http</span><br><span class=\"line\">        <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">        .csrf().disable()</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-认证处理器：\">7.认证处理器：</h2>\n<h3 id=\"回顾之前的认证方案\">回顾之前的认证方案</h3>\n<p>我们的认证是自定义了一个认证处理器<code>JwtAuthenticationTokenFilter</code>，并把他加在了<code>UsernamePasswordAuthenticationFilter</code>过滤器的前面。<strong>在过滤器链中我们去掉了<code>UsernamePasswordAuthenticationFilter</code></strong>,转而使用的是我们自己的过滤器</p>\n<p>登录认证的过程是：</p>\n<ol>\n<li>\n<p>先经过<code>JwtAuthenticationTokenFilter</code>，查看token。</p>\n</li>\n<li>\n<p>token为null放行。</p>\n</li>\n<li>\n<p>然后进入登录接口<code>/user/login</code>，然后调用了Service层的<code>LoginService</code>。</p>\n</li>\n<li>\n<p>在<code>LoginServiceImpl</code>里，实现了<strong>认证过程</strong>。</p>\n<p>调用<code>authenticationManager.authenticate()</code>方法进行认证。</p>\n<ul>\n<li>认证成功【<code>UsernamePasswordAuthenticationToken!=null</code>】</li>\n</ul>\n<blockquote>\n<ol>\n<li>在<code>UsernamePasswordAuthenticationToken</code>中去获取<code>UserDetails</code>的实现类<code>LoginUser</code>。</li>\n<li>从<code>Loginuser</code>中获取<code>UserId</code>。</li>\n<li>使用<code>Jwt</code>工具类加密<code>userId</code>生成<code>token</code>。</li>\n<li>将<code>Loginuser</code>存储到<code>redis</code>中。</li>\n<li>将<code>token</code>封装成响应体返回给前端。</li>\n</ol>\n</blockquote>\n<ul>\n<li>认证失败【<code>UsernamePasswordAuthenticationToken==null</code>】</li>\n</ul>\n<blockquote>\n<p>抛出异常。<code>throw new RuntimeException(&quot;用户名或密码错误&quot;);</code></p>\n</blockquote>\n</li>\n</ol>\n<p><strong>注意：我们没有使用<code>UsernamePasswordAuthenticationFilter</code></strong></p>\n<h3 id=\"其他认证思路\">其他认证思路:</h3>\n<p>我们将<strong>认证成功处理的内容</strong> 和 <strong>认证失败处理的内容</strong>都放在了<code>LoginServiceImpl</code>。</p>\n<p>而实际上<code>UsernamePasswordAuthenticationFilter</code>过滤器，里面自带了认证成功处理器和认证失败处理器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UsernamePasswordAuthenticationFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractAuthenticationProcessingFilter</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p><code>UsernamePasswordAuthenticationFilter</code>继承了一个抽象的父类<code>AbstractAuthenticationProcessingFilter</code>。</p>\n<p>我们来看一看其中的<code>doFilter</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractAuthenticationProcessingFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">GenericFilterBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationEventPublisherAware</span>, MessageSourceAware &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AuthenticationSuccessHandler</span> <span class=\"variable\">successHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SavedRequestAwareAuthenticationSuccessHandler</span>();  <span class=\"comment\">//默认的认证成功处理器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AuthenticationFailureHandler</span> <span class=\"variable\">failureHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleUrlAuthenticationFailureHandler</span>();<span class=\"comment\">//默认的认证失败处理器。</span></span><br><span class=\"line\">   <span class=\"comment\">//.....</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> (HttpServletRequest)req;</span><br><span class=\"line\">        <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> (HttpServletResponse)res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.requiresAuthentication(request, response)) &#123;</span><br><span class=\"line\">            chain.doFilter(request, response);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.logger.debug(<span class=\"string\">&quot;Request is to process authentication&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Authentication authResult;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                authResult = <span class=\"built_in\">this</span>.attemptAuthentication(request, response);<span class=\"comment\">//获取用户信息Authentication</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (authResult == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InternalAuthenticationServiceException var8) &#123;<span class=\"comment\">//发生异常---&gt;认证失败</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.logger.error(<span class=\"string\">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, var8);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.unsuccessfulAuthentication(request, response, var8);<span class=\"comment\">//调用了认证失败处理方法。</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (AuthenticationException var9) &#123;<span class=\"comment\">//发生异常---&gt;认证失败</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.unsuccessfulAuthentication(request, response, var9);<span class=\"comment\">//调用了认证失败处理方法。</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class=\"line\">                chain.doFilter(request, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//能运行到这说明认证成功了</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.successfulAuthentication(request, response, chain, authResult);<span class=\"comment\">//调用认证成功处理方法。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//successfulAuthentication  认证成功处理方法</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">successfulAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">       <span class=\"comment\">//省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);<span class=\"comment\">//调用了认证成功处理器的处理方法。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//unsuccessfulAuthentication 认证失败处理方法。</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unsuccessfulAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//省略...</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.failureHandler.onAuthenticationFailure(request, response, failed);<span class=\"comment\">//调用了认证失败处理器的处理方法。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>private AuthenticationSuccessHandler successHandler</code>认证成功处理器<strong>接口</strong></li>\n<li><code>private AuthenticationFailureHandler failureHandler</code>认证失败处理器<strong>接口</strong></li>\n</ul>\n<h4 id=\"思路\">思路</h4>\n<p>实际上在<code>UsernamePasswordAuthenticationFilter</code>进行登录认证的时候</p>\n<ul>\n<li>如果登录成功了是会调用<code>AuthenticationSuccessHandler</code>的方法进行认证成功后的处理的。<code>AuthenticationSuccessHandler</code>就是登录成功处理器。</li>\n<li>如果认证失败了是会调用<code>AuthenticationFailureHandler</code>的方法进行认证失败后的处理的。<code>AuthenticationFailureHandler</code>就是登录失败处理器。</li>\n</ul>\n<p>因此</p>\n<p>我们也可以自己去自定义成功处理器进行成功后的相应处理。</p>\n<h3 id=\"自定义认证处理器\">自定义认证处理器</h3>\n<h4 id=\"基本步骤\">基本步骤</h4>\n<h5 id=\"Hander中：\">Hander中：</h5>\n<p>1、实现XXX接口</p>\n<p>2、重写对应借接口的方法</p>\n<p>3、注入容器@Component</p>\n<h5 id=\"Config配置类中\">Config配置类中</h5>\n<p>1、在配置类的方法中进行调用和属性的注入</p>\n<p>2、配置注入容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            http.    ……</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"认证成功处理器\">认证成功处理器</h4>\n<p>先写一个成功的Handler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.handler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationSuccessHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;认证成功了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再在config中使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//要调用登录表单才能是使用，所以会有formLogin</span></span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\"><span class=\"comment\">//                配置认证成功处理器</span></span><br><span class=\"line\">                .successHandler(successHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//配置认证规则</span></span><br><span class=\"line\">         http.authorizeRequests().anyRequest().authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>验证结果：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121220044.png\" alt=\"image-20230312122056004\" style=\"zoom:25%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121219750.png\" alt=\"image-20230312121924630\" style=\"zoom:25%;\">\n<h4 id=\"认证失败处理器\">认证失败处理器</h4>\n<p>​\t实际上在<code>UsernamePasswordAuthenticationFilter</code>进行登录认证的时候，如果认证失败了是会调用<code>AuthenticationFailureHandler</code>的方法进行认证失败后的处理的。<code>AuthenticationFailureHandler</code>就是登录失败处理器。</p>\n<p>​\t我们也可以自己去自定义失败处理器进行失败后的相应处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.handler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGFailureHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationFailureHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;认证失败了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//要调用登录表单才能是使用，所以会有formLogin</span></span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\"><span class=\"comment\">//                配置认证成功处理器</span></span><br><span class=\"line\">                .successHandler(successHandler)</span><br><span class=\"line\"><span class=\"comment\">//                配置认证失败处理器</span></span><br><span class=\"line\">                .failureHandler(failureHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//配置认证规则</span></span><br><span class=\"line\">         http.authorizeRequests().anyRequest().authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试结果：</p>\n<p>（输入错误的信息，/login为空白页，控制台输出 认证失败了 ，再访问/hello之后结果为：）</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121224749.png\" alt=\"image-20230312122410659\" style=\"zoom:25%;\">\n<h4 id=\"登出成功处理器\">登出成功处理器</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.handler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LogoutSuccessHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;注销成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//要调用登录表单才能是使用，所以会有formLogin</span></span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\"><span class=\"comment\">//                配置认证成功处理器</span></span><br><span class=\"line\">                .successHandler(successHandler)</span><br><span class=\"line\"><span class=\"comment\">//                配置认证失败处理器</span></span><br><span class=\"line\">                .failureHandler(failureHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.logout()</span><br><span class=\"line\"><span class=\"comment\">//                配置注销成功处理器</span></span><br><span class=\"line\">            .logoutSuccessHandler(logoutSuccessHandler);</span><br><span class=\"line\">        <span class=\"comment\">//配置认证规则</span></span><br><span class=\"line\">         http.authorizeRequests().anyRequest().authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>登录成功之后退出登录的测试结果：</p>\n<p>输入地址：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121228162.png\" alt=\"image-20230312122819114\" style=\"zoom:25%;\">\n<p>点击Log Out：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121229674.png\" alt=\"image-20230312122903637\" style=\"zoom:25%;\">\n<p>控制台显示：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121229844.png\" alt=\"image-20230312122938807\" style=\"zoom:25%;\">\n<h2 id=\"8-源码讲解\">8. 源码讲解</h2>\n<h3 id=\"SpringSecurity-的过滤器介绍\"><strong>SpringSecurity</strong> 的过滤器介绍</h3>\n<p>SpringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的 ==15个过滤器==进行说明:</p>\n<ul>\n<li>\n<p>（1） <code>WebAsyncManagerIntegrationFilter</code>：将 Security 上下文与 Spring Web 中用于处理异步请求映射的 WebAsyncManager 进行集成。</p>\n</li>\n<li>\n<p>（2） <code>SecurityContextPersistenceFilter</code>：在每次请求处理之前将该请求相关的安全上下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder 中的信息清除，例如在 Session 中维护一个用户的安全信息就是这个过滤器处理的。</p>\n</li>\n<li>\n<p>（3）<code>HeaderWriterFilter</code>：用于将头信息加入响应中。</p>\n</li>\n<li>\n<p>（4）<code>CsrfFilter</code>: 用于处理跨站请求伪造。</p>\n</li>\n<li>\n<p>（5）<code>ogoutFilter</code>:用于处理退出登录</p>\n</li>\n<li>\n<p>（6）<code>UsernamePasswordAuthenticationFilter</code>:用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自/log的请求。从表单中获取用户名和密码时，默认使用的表单name值为username和password,这两个值可以通过设置这个过滤器的usernameParameter和passwordParameter两个参数的值进行修改。</p>\n</li>\n<li>\n<p>（7）<code>DefaultLoginPageGeneratingFilter</code>：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。</p>\n</li>\n<li>\n<p>（8）<code>BasicAuthenticationFilter</code>:检测和处理http basic认证。</p>\n</li>\n<li>\n<p>（9）<code>RequestCacheAwareFilter</code>:用来处理请求的缓存。</p>\n</li>\n<li>\n<p>（10）<code>SecurityContextHolderAwareRequestFilter</code>:主要是包装请求对象request。</p>\n</li>\n<li>\n<p>（11）<code>AnonymousAuthenticationFilter</code>:检测SecurityContextHolder中是否存在Authentication对象，如果不存在为其提供一个匿名的Authentication。</p>\n</li>\n<li>\n<p>（12）<code>SessionManagementFilter</code>:管理session的过滤器。</p>\n</li>\n<li>\n<p>（13）<code>ExceptionTranslationFilter</code>:处理AccessDeniedException和AuthenticationExceptio如异常。</p>\n</li>\n<li>\n<p>（14）<code>FilterSecurityInterceptor</code>:可以看做过滤器链的出口。</p>\n</li>\n<li>\n<p>（15）<code>RememberMeAuthenticationFilter</code>:当用户没有登录而直接访问资源时，从cookie里找出用户的信息，如果Spring Security能够识别出用户提供的remember me cookie,用户将不必填写用户名和密码。而是直接登录进入系统，该过滤器默认不开启</p>\n</li>\n</ul>\n<h3 id=\"SpringSecurity基本流程\">SpringSecurity基本流程</h3>\n<p>&lt;与2.1呼应&gt;</p>\n<p>Spring Security 采取过滤链实现认证与授权，只有当前过滤器通过，才能进入下一个过滤器：</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121738655.png\" alt></p>\n<p><code>绿色部分</code>是认证过滤器，需要我们<code>自己配置</code>，可以配置多个认证过滤器。</p>\n<ul>\n<li>\n<p>认证过滤器可以使用Spring Security 提供的认证过滤器，也可以自定义过滤器（例如：短信验证）。</p>\n</li>\n<li>\n<p>认证过滤器要在configure(HttpSecurity http)方法中配置，没有配置不生效。</p>\n<ul>\n<li>\n<p>下面会重点介绍以下三个过滤器：</p>\n<ul>\n<li>\n<p><code>UsernamePasswordAuthenticationFilter</code> 过滤器：</p>\n<p>该过滤器会拦截前端提交的 POST 方式的登录表单请求，并进行身份认证。</p>\n</li>\n<li>\n<p><code>ExceptionTranslationFilter</code> 过滤器：</p>\n<p>该过滤器不需要我们配置，对于前端提交的请求会直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）。</p>\n</li>\n<li>\n<p><code>FilterSecurityInterceptor</code> 过滤器：</p>\n</li>\n<li>\n<p>该过滤器是过滤器链的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，并由ExceptionTranslationFilter 过滤器进行捕获和处理。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"SpringSecurity-认证流程\">SpringSecurity 认证流程</h3>\n<p>认证流程是在 UsernamePasswordAuthenticationFilter 过滤器中处理的，具体流程如下所示：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121741359.png\" alt=\"image-20230312174111328\" style=\"zoom:33%;\">\n<h4 id=\"UsernamePasswordAuthenticationFilter源码\">==UsernamePasswordAuthenticationFilter源码==</h4>\n<p>当前端提交的是一个 POST 方式的登录表单请求，就会被该过滤器拦截，并进行身份认证。该过滤器的 doFilter() 方法实现在其抽象父类<br>\n<code>AbstractAuthenticationProcessingFilter</code> 中，查看==相关源码==：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121742078.png\" alt=\"image-20230312174202017\" style=\"zoom:50%;\">\n<ul>\n<li>上述的 第二 过程调用了 UsernamePasswordAuthenticationFilter 的attemptAuthentication() 方法，源码如下：</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121755800.png\" alt=\"image-20230312175505764\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121755818.png\" alt=\"image-20230312175519777\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121755566.png\" alt=\"image-20230312175528525\" style=\"zoom:33%;\">\n<ul>\n<li>上述的（3）过程创建的 <code>UsernamePasswordAuthenticationToken</code> 是<code>Authentication</code> 接口的<code>实现类</code>，该类有两个构造器，一个用于封装前端请求传入的<code>未认证的用户信息</code>，一个用于封装<code>认证成功后的用户信息</code>：</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121743161.png\" alt=\"image-20230312174334074\" style=\"zoom: 50%;\">\n<ul>\n<li>Authentication 接口的实现类用于存储用户认证信息，查看该接口具体定义：</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121743058.png\" alt=\"image-20230312174357014\" style=\"zoom:50%;\">\n<h4 id=\"ProviderManager-源码\">ProviderManager 源码</h4>\n<ul>\n<li>上述过程中，<code>UsernamePasswordAuthenticationFilter</code> 过滤器的<code>attemptAuthentication()</code>方法的**（5）过程**将未认证的 Authentication 对象传入<code>ProviderManager</code> 类的 <code>authenticate() </code>方法进行身份认证。<code>ProviderManager</code> 是 <code>AuthenticationManager</code> 接口的实现类，该接口是认证相关的核心接口，也是认证的入口。</li>\n<li>在实际开发中，我们可能有多种不同的认证方式，例如：用户名+ 密码、邮箱+密码、手机号+验证码等，而这些认证方式的<code>入口始终只有一个</code>，那就是<code>AuthenticationManager</code>。</li>\n<li>在该接口的常用实现类 <code>ProviderManager</code> 内部会维护一个<code>List\\&lt;AuthenticationProvider&gt;</code>列表，存放多种认证方式，实际上这是委托者模式（Delegate）的应用。</li>\n<li>每种认证方式对应着一个 AuthenticationProvider， AuthenticationManager 根据认证方式的不同（根据传入的 Authentication 类型判断）委托对应的 AuthenticationProvider 进行用户认证。</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121756935.png\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121756113.png\" alt=\"image-20230312175632071\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121756483.png\" alt=\"image-20230312175645448\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121756133.png\" alt=\"image-20230312175655092\" style=\"zoom:33%;\">\n<ul>\n<li>上述认证成功之后的（6）过程，调用 CredentialsContainer 接口定义的eraseCredentials() 方法去除敏感信息。查看UsernamePasswordAuthenticationToken 实现的 eraseCredentials() 方法，该方法实现在其父类中：</li>\n<li>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121747526.png\" alt=\"image-20230312174708376\" style=\"zoom:33%;\">\n</li>\n</ul>\n<h4 id=\"认证成功-失败处理的源码\">认证成功/失败处理的源码</h4>\n<p>上述过程就是认证流程的最核心部分，接下来重新回到<br>\nUsernamePasswordAuthenticationFilter 过滤器的 doFilter() 方法，查看认证成功/失败的处理：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121747782.png\" alt=\"image-20230312174751748\" style=\"zoom:33%;\">\n<img src=\"file:////private/var/folders/lq/np54xb_d14j3kn8d3f6qy0d40000gn/T/com.kingsoft.wpsoffice.mac/wps-yangrui/ksohtml//wps24.png\" alt=\"img\" style=\"zoom:33%;\">\n<h3 id=\"SpringSecurity-权限访问流程\">SpringSecurity 权限访问流程</h3>\n<p>上一个部分通过源码的方式介绍了认证流程，下面介绍权限访问流程，主要是对<code>ExceptionTranslationFilter</code> 过滤器和 <code>FilterSecurityInterceptor</code> 过滤器进行介绍。</p>\n<h4 id=\"ExceptionTranslationFilter-过滤器\">ExceptionTranslationFilter 过滤器</h4>\n<p>该过滤器是用于处理异常的，不需要我们配置，对于前端提交的请求会直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）。具体源码如下：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121749960.png\" alt=\"image-20230312174911921\" style=\"zoom:33%;\">\n<h4 id=\"FilterSecurityInterceptor-过滤器\">FilterSecurityInterceptor 过滤器</h4>\n<p>FilterSecurityInterceptor 是过滤器链的最后一个过滤器，该过滤器是过滤器链的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，最终所抛出的异常会由前一个过滤器ExceptionTranslationFilter 进行捕获和处理。具体源码如下：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121749065.png\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121750871.png\" alt=\"image-20230312175012837\" style=\"zoom:33%;\">\n<p>需要注意，Spring Security 的过滤器链是配置在 SpringMVC 的核心组件DispatcherServlet 运行之前。也就是说，请求通过 Spring Security 的所有过滤器， 不意味着能够正常访问资源，该请求还需要通过 SpringMVC 的拦截器链。</p>\n<h3 id=\"SpringSecurity-请求间共享认证信息\">SpringSecurity 请求间共享认证信息</h3>\n<p>一般认证成功后的用户信息是通过 Session 在多个请求之间共享，那么 Spring Security 中是如何实现将已认证的用户信息对象 Authentication 与 Session 绑定的进行具体分析。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121750244.png\" alt=\"image-20230312175029213\" style=\"zoom:33%;\">\n<ul>\n<li>\n<p>在前面讲解认证成功的处理方法 successfulAuthentication() 时，有以下代码：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121750888.png\" style=\"zoom:33%;\">\n</li>\n<li>\n<p>查看 SecurityContext 接口及其实现类 SecurityContextImpl ， 该类其实就是对</p>\n<p>Authentication 的封装：</p>\n</li>\n<li>\n<p>查看\tSecurityContextHolder 类 ， 该 类 其 实 是 对\tThreadLocal 的 封 装 ， 存 储<br>\nSecurityContext 对象：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121751858.png\" alt=\"image-20230312175104779\" style=\"zoom:33%;\">\n</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121751835.png\" alt=\"image-20230312175133792\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121751812.png\" alt=\"image-20230312175143743\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121752553.png\" alt=\"image-20230312175201506\" style=\"zoom:33%;\">\n<h4 id=\"SecurityContextPersistenceFilter-过滤器\">SecurityContextPersistenceFilter 过滤器</h4>\n<p>前面提到过，在 <code>UsernamePasswordAuthenticationFilter</code> 过滤器认证成功之后，会在认证成功的处理方法中将已认证的用户信息对象 <code>Authentication</code> 封装进<code>SecurityContext</code>，并存入 <code>SecurityContextHolder</code>。<br>\n之后，响应会通过 <code>SecurityContextPersistenceFilter</code> 过滤器，该过滤器的位置在所有过滤器的最前面，请求到来先进它，响应返回最后一个通过它，所以在该过滤器中处理已认证的用户信息对象 <code>Authentication</code> 与 <code>Session</code> 绑定。</p>\n<p>认证成功的响应通过 <code>SecurityContextPersistenceFilter</code> 过滤器时，会从<code>SecurityContextHolder</code> 中取出封装了已认证用户信息对象 <code>Authentication</code> 的<code>SecurityContext</code>，放进 <code>Session</code> 中。当请求再次到来时，请求首先经过该过滤器，该过滤器会判断当前请求的 <code>Session</code> 是否存有 <code>SecurityContext</code> 对象，如果有则将该对象取出再次放入 <code>SecurityContextHolder</code> 中，之后该请求所在的线程获得认证用户信息，后续的资源访问不需要进行身份认证；当响应再次返回时，该过滤器同样从 <code>SecurityContextHolder</code> 取出<code>SecurityContext</code> 对象，放入 <code>Session</code> 中。具体源码如下：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121754746.png\" alt=\"image-20230312175403685\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202303121754179.png\" alt=\"image-20230312175410114\" style=\"zoom:33%;\">\n<h3 id=\"hasAuthority-源码解读\">hasAuthority 源码解读</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityExpressionRoot</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SecurityExpressionOperations</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SecurityExpressionRoot</span><span class=\"params\">(Authentication authentication)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (authentication == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Authentication object cannot be null&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.authentication = authentication;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAuthority</span><span class=\"params\">(String authority)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hasAnyAuthority(authority);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAnyAuthority</span><span class=\"params\">(String... authorities)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hasAnyAuthorityName((String)<span class=\"literal\">null</span>, authorities);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到 <code>hasAuthority() </code>方法存在于<code>SecurityExpressionRoot</code>类中，返回的是布尔类型。</p>\n<p>它调用了<code>hasAnyAuthority()</code>方法。而它又进一步调用了<code>this.hasAnyAuthorityName((String)null, authorities)</code>。</p>\n<p><code>hasAnyAuthorityName</code>源码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAnyAuthorityName</span><span class=\"params\">(String prefix, String... roles)</span> &#123;</span><br><span class=\"line\">    Set&lt;String&gt; roleSet = <span class=\"built_in\">this</span>.getAuthoritySet();</span><br><span class=\"line\">    String[] var4 = roles;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">var5</span> <span class=\"operator\">=</span> roles.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">var6</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; var6 &lt; var5; ++var6) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">role</span> <span class=\"operator\">=</span> var4[var6];</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">defaultedRole</span> <span class=\"operator\">=</span> getRoleWithDefaultPrefix(prefix, role);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (roleSet.contains(defaultedRole)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>传入了两个参数：<strong>前缀字符串</strong> 和 <strong>权限字符串(可变参数)</strong>。</p>\n<ol>\n<li><code>Set&lt;String&gt; roleSet = this.getAuthoritySet();</code>获取权限集合，也就是访问该接口，需要哪些权限。</li>\n<li><code>String[] var4 = roles;</code>，这是我们传入的权限，代表用户具有哪些权限。</li>\n<li>然后遍历该权限数组\n<ol>\n<li><code>String role = var4[var6]</code>获取权限。</li>\n<li><code>String defaultedRole = getRoleWithDefaultPrefix(prefix, role);</code>将前缀和权限名拼接，由于传进来的前缀字符串为null,所以拼接之后不变。</li>\n<li><code>if (roleSet.contains(defaultedRole))return true</code>，如果所需权限集合包含该权限返回true。</li>\n</ol>\n</li>\n<li><code>return false;</code></li>\n</ol>\n<blockquote>\n<p>由此可见，它内部其实是调用<code>authentication</code>的<code>getAuthorities</code>方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p>\n</blockquote>\n<h2 id=\"9-复盘：实现过程中的配置说明\">9.复盘：实现过程中的配置说明</h2>\n<p>在学习这门课的时候，实现各种功能时进行了各种配置。现在将各种配置综合讲述一下。</p>\n<h3 id=\"自定义配置类\">自定义配置类</h3>\n<p>其需要继承<code>WebSecurityConfigurerAdapter</code>这个类。</p>\n<p>在这个类里面做了一些<strong>默认配置</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1、更改PasswordEncoder的实现为BCryptPasswordEncoder。\">1、<strong>更改<code>PasswordEncoder</code>的实现为<code>BCryptPasswordEncoder</code>。</strong></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、注入AuthenticationManager-用它的方法进行认证\">2、<strong>注入<code>AuthenticationManager</code>,用它的方法进行认证</strong></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//    拿到 AuthenticationManager</span></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 注入 AuthenticationConfiguration</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> AuthenticationConfiguration auth;</span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> auth.getAuthenticationManager();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3、http配置方法\">3、<code>http</code>配置方法</h4>\n<blockquote>\n<p><code>http</code>:<code>安全过滤器链</code>配置方法<code>HttpSecurity </code></p>\n</blockquote>\n<h5 id=\"默认配置\">默认配置</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.configure(http);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>super.configure(http);</code>使用了父类中一些<strong>默认配置</strong>。查看源代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest()).authenticated()</span><br><span class=\"line\">                    .and()).</span><br><span class=\"line\">     \t\t\t\tformLogin()</span><br><span class=\"line\">     \t\t\t\t.and())</span><br><span class=\"line\">    \t\t\t\t.httpBasic();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>http.authorizeRequests().anyRequest().authenticated()</code>表示<strong>对任何请求都要进行权限认证</strong></p>\n<p><code>http.formLogin()</code>，表单登录，此处加上了<code>UsernamePasswordAuthenticationFilter</code>过滤器。</p>\n<p>默认配置：</p>\n<ul>\n<li>所有的请求访问都需要被授权。</li>\n<li>使用 form 表单进行登陆(默认路径为/login)，也就是前几篇我们见到的登录页。</li>\n<li>防止 <code>CSRF</code> 攻击、<code>XSS</code>攻击。</li>\n<li>启用 HTTP Basic 认证</li>\n</ul>\n<h5 id=\"自定义配置\">自定义配置</h5>\n<p>关闭防止<code>csrf</code>攻击</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.csrf().disable()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么要关闭防止<code>csrf</code>攻击?</p>\n<p><code>CSRF</code>是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p>\n<p><a href=\"https://blog.csdn.net/freeking101/article/details/86537087\">https://blog.csdn.net/freeking101/article/details/86537087</a></p>\n<p><code>SpringSecurity</code>去防止<code>CSRF</code>攻击的方式就是通过<code>csrf_token</code>。后端会生成一个<code>csrf_token</code>，前端发起请求的时候需要携带这个<code>csrf_token</code>,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p>\n<p>但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可以，所以<code>CSRF</code>攻击也就不用担心了。</p>\n<p>因此使用tolen是天然防止<code>csrf</code>攻击的。</p>\n</blockquote>\n<p>不通过<code>Session</code>获取<code>SecurityContext</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br></pre></td></tr></table></figure>\n<h5 id=\"权限配置\">权限配置</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">                        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure>\n<p>对于登录接口 允许匿名访问除上面外的所有请求全部需要鉴权认证</p>\n<blockquote>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41865652/article/details/123685248\">https://blog.csdn.net/qq_41865652/article/details/123685248</a></p>\n<p><a href=\"https://blog.csdn.net/Shair911/article/details/104181917/\">https://blog.csdn.net/Shair911/article/details/104181917/</a></p>\n</blockquote>\n<p><code>http.authorizeRequests()</code>主要是对<code>url</code>进行访问权限控制，通过这个方法来实现<code>url</code>授权操作。</p>\n<ul>\n<li>\n<p><code>anyRequest()</code>，表示匹配所有的<code>url</code>请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests()</span><br><span class=\"line\">        // 匹配所有的请求，并且所有请求都需要登录认证</span><br><span class=\"line\">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>antMatcher(String regx)</code>，传递一个<code>ant</code>表达式参数，表示匹配所有满足<code>ant</code>表达式的请求</p>\n<ul>\n<li>\n<p><strong>ant表达式中特殊字符解释</strong></p>\n<p>| 规则 | 解释说明          |<br>\n| :— | :---------------- |<br>\n| ？   | 匹配一个字符      |<br>\n| *    | 匹配0个或多个字符 |<br>\n| **   | 匹配0个或多个目录 |</p>\n<p>配置类代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests()</span><br><span class=\"line\">        <span class=\"comment\">// 允许登录页面匿名访问</span></span><br><span class=\"line\">        .antMatchers(<span class=\"string\">&quot;/showLogin&quot;</span>, <span class=\"string\">&quot;/errPage&quot;</span>).anonymous()</span><br><span class=\"line\">        <span class=\"comment\">// 所有的静态资源允许匿名访问</span></span><br><span class=\"line\">        .antMatchers(</span><br><span class=\"line\">                <span class=\"string\">&quot;/css/**&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/js/**&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/images/**&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/fonts/**&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/favicon.ico&quot;</span></span><br><span class=\"line\">                ).anonymous()</span><br><span class=\"line\">        <span class=\"comment\">// 其他所有的请求都需要登录认证</span></span><br><span class=\"line\">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><code>antMatcher(HttpMethod.*, String regx)</code>，传递一个请求方法类型参数加ant表达式参数，表示匹配所有满足ant表达式的指定请求方式的<code>url</code></p>\n<p>配置类代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests()</span><br><span class=\"line\">    <span class=\"comment\">// 允许GET请求登录页面匿名访问</span></span><br><span class=\"line\">    .antMatchers(HttpMethod.GET, <span class=\"string\">&quot;/showLogin&quot;</span>, <span class=\"string\">&quot;/errPage&quot;</span>).anonymous();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"访问控制方法-2\">访问控制方法</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名称</th>\n<th style=\"text-align:left\">方法作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>permitAll()</code></td>\n<td style=\"text-align:left\">表示所匹配的URL任何人都允许访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>anonymous()</code></td>\n<td style=\"text-align:left\">表示可以<strong>匿名访问</strong>匹配的URL。和<code>permitAll()</code>效果类似，只是设置为<code>anonymous()</code>的url会执行<code>filterChain</code>中的filter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>denyAll()</code></td>\n<td style=\"text-align:left\">表示所匹配的URL都不允许被访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>authenticated()</code></td>\n<td style=\"text-align:left\">表示所匹配的URL都需要被认证才能访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rememberMe()</code></td>\n<td style=\"text-align:left\">允许通过remember-me登录的用户访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>access()</code></td>\n<td style=\"text-align:left\"><code>SpringEl</code>表达式结果为true时可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fullyAuthenticated()</code></td>\n<td style=\"text-align:left\">用户完全认证可以访问（非remember-me下自动登录）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasRole()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示角色，则其角色可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasAnyRole()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示角色，则其中任何一个角色可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasAuthority()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示权限，则其权限可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasAnyAuthority()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示权限，则其中任何一个权限可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>hasIpAddress()</code></td>\n<td style=\"text-align:left\">如果有参数，参数表示<code>IP</code>地址，如果用户<code>IP</code>和参数匹配，则可以访问</td>\n</tr>\n</tbody>\n</table>\n<p>配置案例示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//任何用户都可以访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).permitAll();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).access(<span class=\"string\">&quot;permitAll&quot;</span>);]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//任何用户都不能访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).denyAll();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).access(<span class=\"string\">&quot;denyAll&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//认证用户可以访问（除了匿名认证）</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).authenticated();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;authenticated&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//认证用户可以访问（除了匿名认证，记住我）</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).fullyAuthenticated();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;fullyAuthenticated&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">//记住我的认证可以访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).rememberMe();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;rememberMe&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匿名用户可以访问</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).anonymous();</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).access(<span class=\"string\">&quot;anonymous&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否有权限</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).hasAuthority(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).access(<span class=\"string\">&quot;hasAuthority(&#x27;user&#x27;)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是否有任意一个权限</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).hasAnyAuthority(<span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).access(<span class=\"string\">&quot;hasAnyAuthority(&#x27;update&#x27;,&#x27;delete&#x27;,&#x27;insert&#x27;)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//spring security中的role并非是一个或多个权限的集合，而是权限的一种，通常以ROLE_开头</span></span><br><span class=\"line\"><span class=\"comment\">//role就是ROLE_开头的权限</span></span><br><span class=\"line\"><span class=\"comment\">//注意：hasRole、hasAnyRole里面的role不需要以ROLE_开头，否则会报异常</span></span><br><span class=\"line\"><span class=\"comment\">//注意：如果在access里面使用hasRole、hasAnyRole则ROLE_前缀可加，可不加</span></span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).hasRole(<span class=\"string\">&quot;GUEST&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/index&quot;</span>).access(<span class=\"string\">&quot;hasRole(&#x27;GUEST&#x27;)&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/admin&quot;</span>).hasAuthority(<span class=\"string\">&quot;ROLE_GUEST&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).hasAnyRole(<span class=\"string\">&quot;GUEST&quot;</span>, <span class=\"string\">&quot;USER&quot;</span>, <span class=\"string\">&quot;ADMIN&quot;</span>);</span><br><span class=\"line\">http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/home&quot;</span>).access(<span class=\"string\">&quot;hasAnyRole(&#x27;ROLE_GUEST&#x27;,&#x27;ROLE_USER&#x27;,&#x27;ROLE_ADMIN&#x27;)&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、添加过滤器到过滤器链\">4、添加过滤器到过滤器链</h4>\n<p>先将获取过滤器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br></pre></td></tr></table></figure>\n<p>然后配置到过滤器链中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"><span class=\"comment\">//将jwtAuthenticationTokenFilter 过滤器放到UsernamePasswordAuthenticationFilter过滤器前。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>addFilterBefore()</code>：将过滤器放到 **过滤器之前。</p>\n</li>\n<li>\n<p><code>addFilter()</code>：将过滤器放到过滤器链最后。</p>\n</li>\n<li>\n<p><code>addFilterAfter()</code>：将过滤器放到 **过滤器之后。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.addFilterAfter(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"><span class=\"comment\">//将jwtAuthenticationTokenFilter 过滤器放到UsernamePasswordAuthenticationFilter过滤器后。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>addFilterAt</code>：将过滤器放在**过滤的位置。并不是取代。</p>\n</li>\n</ul>\n<h4 id=\"5、配置异常处理器\">5、配置异常处理器</h4>\n<p>先获取异常处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br></pre></td></tr></table></figure>\n<p>然后进行配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class=\"line\">        .accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、表单登录配置\">6、表单登录配置</h4>\n<p>取消默认的自带的表单登录配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.formLogin().disable();</span><br></pre></td></tr></table></figure>\n<p>配置演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\thttp</span><br><span class=\"line\">\t\t\t.formLogin()<span class=\"comment\">//开启formLogin默认配置\t\t\t        </span></span><br><span class=\"line\">\t\t\t\t.loginPage(<span class=\"string\">&quot;/login/auth&quot;</span>).permitAll()<span class=\"comment\">//请求时未登录跳转接口</span></span><br><span class=\"line\">\t\t                .failureUrl(<span class=\"string\">&quot;/login/fail&quot;</span>)<span class=\"comment\">//用户密码错误跳转接口</span></span><br><span class=\"line\">\t\t\t\t.defaultSuccessUrl(<span class=\"string\">&quot;/login/success&quot;</span>,<span class=\"literal\">true</span>)<span class=\"comment\">//登录成功跳转接口</span></span><br><span class=\"line\">\t\t\t\t.loginProcessingUrl(<span class=\"string\">&quot;/login&quot;</span>)<span class=\"comment\">//post登录接口，登录验证由系统实现</span></span><br><span class=\"line\">\t\t\t\t.usernameParameter(<span class=\"string\">&quot;username&quot;</span>)\t<span class=\"comment\">//要认证的用户参数名，默认username</span></span><br><span class=\"line\">\t\t\t\t.passwordParameter(<span class=\"string\">&quot;password&quot;</span>)\t<span class=\"comment\">//要认证的密码参数名，默认password</span></span><br><span class=\"line\">\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t.logout()<span class=\"comment\">//配置注销</span></span><br><span class=\"line\">\t\t\t\t.logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>)<span class=\"comment\">//注销接口</span></span><br><span class=\"line\">\t\t\t\t.logoutSuccessUrl(<span class=\"string\">&quot;/login/logout&quot;</span>).permitAll()<span class=\"comment\">//注销成功跳转接口</span></span><br><span class=\"line\">\t\t\t\t.deleteCookies(<span class=\"string\">&quot;myCookie&quot;</span>) <span class=\"comment\">//删除自定义的cookie</span></span><br><span class=\"line\">\t\t\t\t.and()</span><br><span class=\"line\">\t\t\t.csrf().disable();           <span class=\"comment\">//禁用csrf</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"使用formLogin-就会添加如下过滤器\">使用<code>formLogin()</code>就会添加如下过滤器</h6>\n<ul>\n<li><code>UsernamePasswordAuthenticationFilter</code></li>\n<li><code>DefaultLoginPageGeneratingFilter</code></li>\n<li><code>DefaultLogoutPageGeneratingFilter</code></li>\n</ul>\n<p><strong>添加认证成功处理器和认证失败处理器</strong></p>\n<p>先获取认证成功处理器和认证失败处理器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationFailureHandler failureHandler;</span><br></pre></td></tr></table></figure>\n<p>然后再进行配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> http.formLogin()</span><br><span class=\"line\"><span class=\"comment\">//                配置认证成功处理器</span></span><br><span class=\"line\">      .successHandler(successHandler)</span><br><span class=\"line\"><span class=\"comment\">//                配置认证失败处理器</span></span><br><span class=\"line\">      .failureHandler(failureHandler);</span><br></pre></td></tr></table></figure>\n<h4 id=\"总的配置代码\">总的配置代码</h4>\n<p>&lt;不使用formLogin的自定义配置&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ry.security.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ry.security.Filter.JwtAuthenticationTokenFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JwtAuthenticationTokenFilter  jwtAuthenticationTokenFilter ;</span><br><span class=\"line\">    <span class=\"comment\">//创建BCryptPasswordEncoder注入容器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    拿到 AuthenticationManager</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入 AuthenticationConfiguration</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration auth;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> auth.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 替换旧版本中的configure(HttpSecurity http)方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">                .csrf().disable()</span><br><span class=\"line\">                <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">                <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">                .anyRequest().authenticated();</span><br><span class=\"line\">        <span class=\"comment\">//把token校验过滤器添加到过滤器链中</span></span><br><span class=\"line\">        <span class=\"comment\">//通过字节码对象指定要加到哪一个过滤器之前，现在这里是加载到 UsernamePasswordAuthenticationFilter  之前</span></span><br><span class=\"line\">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter .class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//配置异常处理器。</span></span><br><span class=\"line\">        http.exceptionHandling()</span><br><span class=\"line\">                .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class=\"line\">                .accessDeniedHandler(accessDeniedHandler);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//允许跨域</span></span><br><span class=\"line\">        http.cors();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","_path":"post/7d2eec83.html","_link":"http://rycan.top/post/7d2eec83.html","_id":"clkuj5ext003psg0p1paw9vt9"}}