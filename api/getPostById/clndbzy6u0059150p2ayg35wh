{"type":"getPostById","data":{"title":"SpringMVC","date":"2023-09-13T15:44:24.000Z","description":"面试精选","categories":[{"name":"FaceToFace","_id":"clndbzy5z0019150p2g3yh0rm"}],"tags":[{"name":"SpringMVC","_id":"clndbzy6u0057150p4n8ue5oa"}],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n<h2 id=\"SpringMVC\">SpringMVC</h2>\n<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>\n<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>\n<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>\n<p><code>JavaBean</code>分为两类：</p>\n<p>​\t1 一类称为实体类Bean：专门存储业务数据的(POJO)，如 Student、User 等</p>\n<p>​\t2 一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</p>\n<h3 id=\"组成\">组成</h3>\n<h4 id=\"web-xml\">web.xml</h4>\n<p>方式</p>\n<ul>\n<li>\n<p>默认情况下是配置在 WEB-INF下，默认名称为<code>&lt;servlet-name&gt;-servlet.xml</code></p>\n</li>\n<li>\n<p>也可通过init-param标签设置<code>SpringMVC.xml</code>配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>\n</li>\n</ul>\n<p>目的：注册SpringMVC的前端控制器DispatcherServlet</p>\n<h4 id=\"请求控制器\">请求控制器</h4>\n<p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类（Controller类），请求控制器中每一个处理请求的方法成为控制器方法；只有通过<code>@Controller</code>注解将其标识为一个控制层组件，交给<code>Spring  IOC</code>容器管理之后，SpringMVC才能识别控制器的存在</p>\n<h4 id=\"核心配置文件\">核心配置文件</h4>\n<blockquote>\n<p>springMVC的配置文件</p>\n</blockquote>\n<p>位置：<code>在main/resources/springMVC.xml</code></p>\n<blockquote>\n<p>/WEB-INF目录下的页面不能通过浏览器直接访问，也不能通过重定向进行访问；只能通过 <code>转发</code> 进行访问</p>\n</blockquote>\n<h3 id=\"流程\">流程</h3>\n<p>浏览器发送请求的过程：</p>\n<p>1、若<strong>请求地址</strong>符合前端控制器的url-pattern&lt;web.xlm中&gt;，该请求就会被<code>前端控制器DispatcherServlet</code>处理。</p>\n<p>2、前端控制器会 对该链接地址进行解析：除去thymeleaf的语法部分，将<code>@&#123;&#125;</code>占位符<code>&#123;&#125;</code>内的地址 组成 对应的Controller类，然后读取SpringMVC的核心配置文件，通过<strong>扫描组件</strong>找到控制器&lt;扫描组件中的类<code>/XXXController</code>&gt;，将<strong>请求地址和控制器中<code>@RequestMapping</code>注解的value属性值</strong>进行匹配;</p>\n<p>3、若匹配成功，该<strong>注解</strong>所标识的控制器方法就是<strong>处理请求的方法</strong>。</p>\n<p>4、处理请求的方法需要返回一个字符串类型的视图名称&lt;如：“target”&gt;，该视图名称会被视图解析器解析&lt;SpringMVC中的thymeleaf&gt;，加上前缀和后缀组成视图的路径&lt;如：/WEB-INF/templates/target.html&gt;，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>\n<h3 id=\"RequestMapping：\"><code>@RequestMapping</code>：</h3>\n<ul>\n<li>\n<p>作用：<strong>将请求和处理请求的控制器方法</strong>关联起来，建立映射关系。可作用在<code>类或者方法</code>上</p>\n</li>\n<li>\n<p><code>value</code>属性：必须设置，可以通过请求的<strong>请求地址 匹配</strong> 请求映射，是一个<strong>字符串类型的数组</strong>，表示该请求映射能够匹配多个请求地址所对应的请求。</p>\n</li>\n<li>\n<p><code>method</code>属性: 通过请求的<strong>请求方式（get或post）<strong>匹配请求映射 ,是一个</strong>RequestMethod类型的数组</strong>，表示该请求映射能够匹配<strong>多种请求方式</strong>的请求</p>\n</li>\n<li>\n<p><code>params</code>属性: 通过请求的<strong>请求参数</strong>匹配请求映射,是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系：</p>\n<ul>\n<li><strong>“param”：要求请求映射所匹配的请求   必须携带param请求参数</strong></li>\n<li><strong>“!param”：要求请求映射所匹配的请求     必须不能携带param请求参数</strong></li>\n<li><strong>“param=value”：要求请求映射所匹配的请求    必须携带param请求参数且param=value</strong></li>\n<li><strong>“param!=value”：要求请求映射所匹配的请求   必须携带param请求参数但是param!=value</strong></li>\n</ul>\n</li>\n<li>\n<p><code>headers</code>属性: 通过请求的<strong>请求头信息</strong>匹配请求映射,是一个<strong>字符串类型的数组</strong>，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>\n<ul>\n<li><strong>“header”：要求请求映射所匹配的请求   必须携带header请求头信息</strong></li>\n<li><strong>“!header”：要求请求映射所匹配的请求     必须不能携带header请求头信息</strong></li>\n<li><strong>“header=value”：要求请求映射所匹配的请求   必须携带header请求头信息且header=value</strong></li>\n<li><strong>“header!=value”：要求请求映射所匹配的请求  必须携带header请求头信息且header!=value</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(</span></span><br><span class=\"line\"><span class=\"meta\">\tvalue = &#123;&quot;/testRequestMapping&quot;,&quot;/test&quot;&#125;,//value method 满足一个就可以了</span></span><br><span class=\"line\"><span class=\"meta\">\tmethod = &#123;RequestMethod.GET,RequestMethod.POST&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">\tparams = &#123;&quot;username=ry&quot;,&quot;password=123456&quot;&#125;,    //params要全部满足才可以</span></span><br><span class=\"line\"><span class=\"meta\">  headers=&#123;&quot;username=ry&quot;,&quot;password=123456&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1 @RequestMapping的派生注解: <strong>处理get请求的映射–&gt;@GetMapping       post–&gt;@PostMapping    put-&gt;@PutMapping   delete–&gt;@DeleteMapping</strong></p>\n<p>2 常用的请求方式有get，post，put，delete但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put\\delete），则按照<code>默认的请求方式get处理</code>；若要发送put和delete请求，则需要通过spring提供的过滤器 <strong>HiddenHttpMethodFilter</strong></p>\n</blockquote>\n<blockquote>\n<p>ant风格的路径：</p>\n<ol>\n<li>？：表示任意的单个字符</li>\n<li>*：表示任意的0个或多个字符</li>\n<li>**：表示任意的一层或多层目录</li>\n</ol>\n<p>注意：在使用<strong>时，只能使用/</strong>/xxx的方式</p>\n<p>Eg:<code> @RequestMapping(value = &quot;/a?a/testAnt1&quot;    //  /aqa/testAnt   /a1a/testAnt   ...... ？任意单字符)</code></p>\n<p>​\t<code>@RequestMapping( value = &quot;/a*a/testAnt2&quot;    //    /aqa/testAnt   /a1a/testAnt   ...... *)</code></p>\n<p>​\t<code>@RequestMapping( value = &quot;/**/testAnt3&quot;    //    /aqa/testAnt   /a/q/q/q/a/testAnt   ...... **)</code></p>\n<p>路径中的占位符</p>\n<p>1、 原始方式：  <code>/deleteUser?id=1 </code>\t\t\t\t\trest方式： <code>/deleteUser/1</code></p>\n<p>2、请求路径中可以添加一些参数：可以先在相应的<code>@RequestMapping</code>注解的<strong>value属性</strong>中通过<strong>占位符<code>&#123;&#125;</code>{xxx}<strong>表示传输的数据，再通过</strong><code>@PathVariable注解</code></strong>，将<strong>占位符所表示的数据赋值</strong>给控制器方法的<strong>形参</strong></p>\n<p>​\teg: <code>@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)  public String testRest(@PathVariable(&quot;id&quot;) String id,  @PathVariable(&quot;username&quot;) String username)&#123;...&#125;</code></p>\n</blockquote>\n<h4 id=\"获取请求参数的方法\">获取请求参数的方法</h4>\n<p>1、通过ServletAPI获取数据： 将HttpServletRequest作为<strong>控制器方法的形参</strong></p>\n<p>2、通过控制器方法的形参获取请求参数:</p>\n<p>​\t\t在控制器方法的形参位置设置和请求参数同名的形参,匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应控制器的形参;</p>\n<p>​\t\t若请求所传输的请求参数中有<strong>多个同名的请求参数</strong>，此时可以在控制器方法的<strong>形参中设置字符串数组或者字符串类型的形参</strong>接收此请求参数</p>\n<p>​\t\t\t<code> 1.</code> 若使用<strong>字符串数组类型</strong>的形参，此参数的数组中包含了每一个数据 ;</p>\n<p>​\t\t\t<code>2.</code>若使用<strong>字符串类型</strong>的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>\n<p>3、@RequestParam   :  将<strong>请求参数</strong>和控制器方法的<strong>形参</strong>创建映射关系</p>\n<p>​\t\t\t<code>value</code>：指定为形参赋值的请求参数的参数名</p>\n<p>​\t\t\t<code>required</code>：设置是否必须传输此请求参数，默认值为true，</p>\n<p>​\t\t\t\t\t\t若设置为true时，则当前请求<strong>必须传输</strong>value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，</p>\n<p>​\t\t\t\t\t\t若设置为false，则当前请求<strong>不是必须</strong>传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>\n<p>​\t\t\t<code>defaultValue</code>：不管required属性值为true或false，当value所指定的请求参数<strong>没有传输或传输的值为&quot;&quot;<strong>时，则</strong>使用默认值为形参赋值</strong></p>\n<p>4、@RequestHeader： 将<strong>请求头信息</strong>和<strong>控制器方法的形参创建</strong>映射关系<br>\n@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>\n<p>5、@CookieValue： 将<strong>cookie数据</strong>和<strong>控制器方法的形参</strong>创建映射关系<br>\n@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>\n<p>6、通过POJO获取请求参数： 可以在控制器方法的形参位置设置一个<strong>实体类类型的形参</strong>，若浏览器传输的请求参数的<strong>参数名和实体类中的属性名一致</strong>，那么<strong>请求参数就会为此属性赋值</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> String <span class=\"title function_\">testServletAPI</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> request.getSession();</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">       ...</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(String username, String password)</span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3 4 5 </span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">           <span class=\"meta\">@RequestParam(value = &quot;username&quot;,required = false,defaultValue =&quot;yangrui&quot;)</span> String username,</span></span><br><span class=\"line\"><span class=\"params\">           String password,</span></span><br><span class=\"line\"><span class=\"params\">           String[] hobby,</span></span><br><span class=\"line\"><span class=\"params\">           <span class=\"meta\">@RequestHeader(value = &quot;hi&quot;,required = true,defaultValue = &quot;say Hi~&quot;)</span> String host,</span></span><br><span class=\"line\"><span class=\"params\">           <span class=\"meta\">@CookieValue(value =&quot;JSESSIONID&quot;,required = true,defaultValue = &quot;1234&quot;)</span>String JSESSIONID)</span>&#123;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testBean&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testBean</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"域对象共享数据的方式\">域对象共享数据的方式</h3>\n<p>1、使用ServletAPI向<code>request域</code>对象共享数据： --&gt;方法:setAttribute</p>\n<p>2、使用ModelAndView向<code>request域</code>对象共享数据： --&gt;方法:addObject  : Model主要用于向请求域共享数据    : View主要用于设置视图，实现页面跳转</p>\n<p>3、使用Model向<code>request域</code>对象共享数据： --&gt;方法:addAttribute</p>\n<p>4、使用map向<code>request域</code>对象共享数据 ： --&gt;方法:put</p>\n<p>5、使用ModelMap向<code>request域</code>对象共享数据：–&gt;方法:addAttribute</p>\n<p>6、使用 ServletAPI 向<code>session域</code>共享数据： --&gt;方法:setAttribute</p>\n<p>7、使用 ServletAPI 向<code>application域</code>共享数据  --&gt;方法:setAttribute</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRequestByServletAPI&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestByServletAPI</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">&quot;testRequestSCope&quot;</span>,<span class=\"string\">&quot;hello,Servlet&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Domain_success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"> <span class=\"meta\">@RequestMapping(&quot;/testRequestByModelAndView&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">testRequestByModelAndView</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>();</span><br><span class=\"line\">        <span class=\"comment\">//向请求域中共享数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">&quot;testRequestSCope&quot;</span>,<span class=\"string\">&quot;hello,ModelAndView&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置视图，实现页面跳转</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">&quot;Domain_success&quot;</span>);</span><br><span class=\"line\">      \t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRequestByModel&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestByModel</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">  model.addAttribute(<span class=\"string\">&quot;testRequestSCope&quot;</span>,<span class=\"string\">&quot;hello,Model&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Domain_success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRequestByMap&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestByMap</span><span class=\"params\">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class=\"line\">   map.put(<span class=\"string\">&quot;testRequestSCope&quot;</span>,<span class=\"string\">&quot;hello,Map&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&quot;Domain_success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5  </span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRequestByModelMap&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestByModelMap</span><span class=\"params\">(ModelMap modelMap)</span>&#123;</span><br><span class=\"line\">  modelMap.addAttribute(<span class=\"string\">&quot;testRequestSCope&quot;</span>,<span class=\"string\">&quot;hello,ModelMap&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Domain_success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testSessionByServletAPI&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testSessionByServletAPI</span><span class=\"params\">(HttpSession session)</span>&#123;</span><br><span class=\"line\">   session.setAttribute(<span class=\"string\">&quot;testSessionSCope&quot;</span>,<span class=\"string\">&quot;hello,ServletApi----Session&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&quot;Domain_success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//7</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testApplicationByServletAPI&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testApplicationByServletAPI</span><span class=\"params\">(HttpSession session)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ServletContext</span> <span class=\"variable\">servletContext</span> <span class=\"operator\">=</span> session.getServletContext();</span><br><span class=\"line\">    servletContext.setAttribute(<span class=\"string\">&quot;testApplicationSCope&quot;</span>,<span class=\"string\">&quot;hello,ServletApi----Application&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Domain_success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"视图\">视图</h3>\n<p>视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户；SpringMVC视图的种类很多，默认有<strong>转发视图和重定向视图</strong></p>\n<p>若使用的<code>视图技术</code>为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>\n<h4 id=\"转发视图：\">转发视图：</h4>\n<p>默认的是：<code>InternalResourceView</code>；当控制器方法中所设置的视图名称以<code>forward:</code>为前缀时，创建<code>InternalResourceView</code>视图，此时的视图名称<code>不会</code>被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀<code>forward:</code>去掉，剩余部分作为最终路径通过<strong>转发的方式实现跳转</strong>    例如<code>&quot;forward:/employee&quot;</code></p>\n<h4 id=\"重定向视图\">重定向视图</h4>\n<p>默认的是<code>RedirectView</code>；当控制器方法中所设置的视图名称以<code>redirect:</code>为前缀时，创建<code>RedirectView</code>视图，此时的视图名称<code>不会</code>被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀<code>redirect:</code>去掉，剩余部分作为最终路径通过<strong>重定向的方式实现跳转</strong>      例如<code>&quot;redirect:/&quot;，&quot;redirect:/employee&quot;</code></p>\n<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>\n<h4 id=\"视图控制器view-controller\">视图控制器view-controller</h4>\n<p>当控制器方法中，<strong>仅仅用来实现页面跳转</strong>，即只需要在设置视图名称时，可以让<strong>处理器方法使用viewcontroller标签进行标注</strong>；<code>&lt;mvc:view-controller path=&quot;/&quot; view-name=&quot;index&quot;&gt;&lt;/mvc:view-controller&gt;   path：设置处理的请求地址      view-name：设置请求地址所对应的视图名称</code></p>\n<p>当SpringMVC.xml中只要有<code>view-controller</code>的配置的时候，那么其他控制器（Controller层）中的请求映射将<strong>全部失效</strong>，此时需要在<strong>SpringMVC的核心配置文件</strong>中设置<strong>开启mvc注解驱动的标签：&lt;mvc:annotation-driven /&gt;</strong></p>\n<blockquote>\n<p>重定向 vs 转发</p>\n<p>1、<code>重定向</code>    浏览器发送两次请求，第一次访问Servlet,第二次访问的是重定向的地址；浏览器地址栏是重定向后的地址；不可以获取请求域（request）中的数据；不可以访问WEB-INF中的资源；可以跨域</p>\n<p>2、<code>转发</code>        浏览器发送一次请求，首先是浏览器发送，随后服务器内部发送；浏览器地址栏还是第一次发送的请求的地址；可以获取请求域（request）中的数据；可以访问WEB-INF中的资源；不可以跨域</p>\n</blockquote>\n<h3 id=\"RESTful风格\">RESTful风格</h3>\n<ul>\n<li>\n<p>REST：Representational State Transfer，表现层资源状态转移。</p>\n</li>\n<li>\n<p>实现：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE用来删除资源。</p>\n</li>\n<li>\n<p>作用:REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>\n</li>\n<li>\n<p>和传统方式的对比</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>操作</strong></th>\n<th><strong>传统方式</strong></th>\n<th><strong>REST风格</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查询操作</td>\n<td>getUserById?id=1</td>\n<td>user/1–&gt;get请求方式</td>\n</tr>\n<tr>\n<td>保存操作</td>\n<td>saveUser user/1–&gt;get请求方式</td>\n<td>user–&gt;post请求方式</td>\n</tr>\n<tr>\n<td>删除操作</td>\n<td>deleteUser?id=1</td>\n<td>user/1–&gt;delete请求方式</td>\n</tr>\n<tr>\n<td>更新操作</td>\n<td>updateUser</td>\n<td>user–&gt;put请求方式</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"HiddenHttpMethodFilter\">HiddenHttpMethodFilter</h4>\n<ul>\n<li>\n<p>作用：将我们发送的 POST 请求转换为所需的 DELETE 或 PUT 请求</p>\n</li>\n<li>\n<p>起作用的条件：当前请求的<strong>请求方式必须为post</strong>     <code>+</code>      当前请求必须<strong>传输请求参数_method</strong>,满足了以上条件，<code>HiddenHttpMethodFilter</code> 过滤器就会将当前请求的请求方式<strong>转换</strong>为请求参数<code>_method</code> 的值，因此请求参数<code>_method</code>的值才是最终的请求方式</p>\n</li>\n</ul>\n<p><code>&lt;form th:action=&quot;@&#123;/user&#125;&quot; method=&quot;post&quot;&gt;      &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot;&gt;   &lt;/form&gt;</code></p>\n<p>简单使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">XXXXX</span> <span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/employee&quot;,method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/employee&quot;,method = RequestMethod.PUT)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">XXXXX</span>   <span class=\"params\">(Employee employee)</span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HttpMessageConverter\">HttpMessageConverter</h3>\n<ul>\n<li>报文信息转换器 的作用：将<code>请求报文</code>转换为<code>Java对象</code>，或将<code>Java对象</code>转换为<code>响应报文</code></li>\n</ul>\n<blockquote>\n<p>HttpMessageConverter提供了两个注解和两个类型：<code>@RequestBody，@ResponseBody，RequestEntity，ResponseEntity</code></p>\n</blockquote>\n<h4 id=\"两个注解\">两个注解</h4>\n<p><code>@RequestBody</code> ： 获取请求体；使用<code>@RequestBody</code>进行标识的<code>形参</code>，那么 请求体 就会为注解所标识的形参赋值</p>\n<p><code>@ResponseBody</code> ：标识控制器的方法，可以将该方法的<code>返回值</code>直接作为响应报文的<strong>响应体</strong>响应到浏览器</p>\n<blockquote>\n<p><code>@RestController</code>注解是<code>springMVC</code>提供的一个复合注解，标识在控制器的类上，就相当于为<strong>类</strong>添加了**<code>@Controller</code><strong>注解，<code>并且为</code>其中的<code>每个方法</code>添加了</strong><code>@ResponseBody</code>**注解</p>\n</blockquote>\n<h4 id=\"两个类型\">两个类型</h4>\n<p><code>RequestEntity</code>：是一种封装<strong>请求报文</strong>的类型，方法的<code>形参</code>设置为该类型，当前请求的请求报文就会赋值给该<code>形参</code>，可以通过<code>getHeaders()</code>获取请求头信息，通过<code>getBody()</code>获取请求体信息</p>\n<p><code>ResponseEntity</code>：控制器方法的<code>返回值类型</code>，该控制器方法的返回值<code>就是</code>响应到浏览器的<code>响应报文</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpController</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//@RequestBody </span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestBody</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//RequestEntity</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestEntity</span><span class=\"params\">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//当前requestEntity表示整个请求报文的信息</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">testResponseUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1001</span>,<span class=\"string\">&quot;ry&quot;</span>,<span class=\"string\">&quot;123123&quot;</span>,<span class=\"number\">24</span>,<span class=\"string\">&quot;男&quot;</span>) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/testAxios&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">testAxios</span><span class=\"params\">(String username, String password)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello,axios&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//ServletApi  response 对象响应浏览器数据</span></span><br><span class=\"line\">   <span class=\"meta\">@RequestMapping(&quot;/testResponse&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">//有返回值是要返回视图名称，实现页面跳转</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span>   <span class=\"title function_\">testResponse</span><span class=\"params\">(HttpServletResponse httpServletResponse)</span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件上传与下载\">文件上传与下载</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--只有上传的时候需要这个依赖--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"拦截器\">拦截器</h3>\n<p>作用： 用于拦截控制器方法的执行</p>\n<p>起作用的条件：拦截器要起作用一是要写成return false ,二是要在 SpringMVC 中进行配置</p>\n<h4 id=\"方法：\">方法：</h4>\n<p>1、<strong>preHandle</strong>：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>\n<p>2、<strong>postHandle</strong>：控制器方法执行之后执行postHandle()</p>\n<p>3、<strong>afterComplation</strong>：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>\n<h4 id=\"执行顺序\">执行顺序</h4>\n<p>1、若每个拦截器的preHandle()都返回true；此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关；preHandle()会<code>按照配置的顺序执行</code>，而<code>postHandle()和afterComplation()</code>会按照配置的<code>反序执行</code></p>\n<p>2、若某个拦截器的preHandle()返回了false；preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>\n<p>3、拦截器拦截的不只是TestController中的地址，SpringMVC中配置的地址也一样会被拦截</p>\n<h4 id=\"配置\">配置</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置拦截器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置拦截器方式一   只配置一个bean的方式进行拦截 是对所有请求进行拦截--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ry.mvc.Interceptors.FirstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--配置拦截器方式二   也是对所有请求进行拦截--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;firstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--配置拦截器方式三  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span>  \t </span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--上面两种方式不能指定拦截规则，但是这个可以指定拦截规则--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:exclude-mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ry.mvc.Interceptors.FirstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--配置拦截器方式四  --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span>  \t </span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--上面两种方式不能指定拦截规则，但是这个可以指定拦截规则--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:exclude-mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;firstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span>   </span><br></pre></td></tr></table></figure>\n<h3 id=\"异常处理器\">异常处理器</h3>\n<blockquote>\n<p>总的接口： <code>处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</code>;</p>\n<p>其实现类有：<code>DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</code></p>\n<p>自定义的异常处理器<code>SimpleMappingExceptionResolver</code>，使用方式：在SpringMVC.xml中进行配置</p>\n</blockquote>\n<h5 id=\"1、基于配置的异常处理\">1、基于配置的异常处理</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;exceptionMappings&quot;</span> &gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                   properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class=\"line\"><span class=\"comment\">                   properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class=\"line\"><span class=\"comment\">               --&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--设置将异常信息共享在请求域中的键--&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;exceptionAttribute&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;ex&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2、基于注解的异常处理\">2、基于注解的异常处理</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(value = &#123;ArithmeticException.class,NumberFormatException.class,NullPointerException.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String  <span class=\"title function_\">testException</span><span class=\"params\">(Exception ex, Model model)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//&quot;ex&quot;是因为在error中请求与数据写的也是 ex</span></span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;ex&quot;</span>, ex);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;error&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;ex&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注解配置SpringMVC\">注解配置SpringMVC</h3>\n<p>使用<strong>初始化类</strong>取代web.xml的原理：</p>\n<p>1、servlet3.0的环境中，容器通过查找实现了 <code>ServletContainerInitializer接口的类</code>，随后去查找实现了 <code>WebApplicationInitializer</code>的类并将配置的任务交给它们,从而完成进行配置servlet容器</p>\n<p>2、servlet 3.2中 ，使用<code>AbstractAnnotationConfigDispatcherServletInitializer</code>这个类，我们使用类进行扩展其之后就会将其部署到Servlet3.0容器中，容器会自动发现它，并用它来配置Servlet上下文</p>\n<blockquote>\n<p><code>public class Webint extends AbstractAnnotationConfigDispatcherServletInitializer &#123;...&#125;</code></p>\n</blockquote>\n<h3 id=\"SpringMVC的执行流程\">SpringMVC的执行流程</h3>\n<h5 id=\"1、常用组件：\">1、常用组件：</h5>\n<ul>\n<li>\n<p><code>DispatcherServlet(前端控制器)</code> :  统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>\n</li>\n<li>\n<p><code>HandlerMapping(处理器映射器)</code>:   根据请求的url、method等信息查找 控制器方法</p>\n</li>\n<li>\n<p><code>Handler(处理器)</code>：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>\n</li>\n<li>\n<p><code>HandlerAdapter(处理器适配器)</code>：对处理器（控制器方法）进行执行</p>\n</li>\n<li>\n<p><code>ViewResolver(视图解析器)</code>：进行视图解析，得到相应的视图</p>\n</li>\n<li>\n<p><code>View(视图)</code>：将模型数据通过页面展示给用户</p>\n</li>\n</ul>\n<h5 id=\"2、DispatcherServlet初始化过程\">2、DispatcherServlet初始化过程</h5>\n<ol>\n<li>本质是 Servlet ;宏观上是 Servlet 生命周期来进行调度</li>\n<li>初始化WebApplicationContext <code>WebApplicationContext initWebApplicationContext() &#123;  wac = this.webApplicationContext;  ... if(wac == null) &#123;wac = createWebApplicationContext(rootContext);...&#125;&#125;</code></li>\n<li>FrameworkServlet创建WebApplicationContext  <code>protected WebApplicationContext createWebApplicationContext(@Nullable ApplicationContext parent) &#123;// 通过反射创建 IOC 容器对象     ConfigurableWebApplicationContext wac = (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</code></li>\n<li>按照  DispatcherServlet  的不同的初始化策略进行初始化</li>\n</ol>\n<h5 id=\"3、DispatcherServlet调用组件处理请求\">3、DispatcherServlet调用组件处理请求</h5>\n<ol>\n<li>\n<p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p>\n</li>\n<li>\n<p>在<code>doservice()</code>中 处理请求和响应<code>doDispatch(request, response);</code></p>\n</li>\n<li>\n<p>在<code>doDispatch()</code>中选择处理器处理当前请求，后通过控制器方法创建相应的处理器适配器调用对应的控制器方法，从而获得ModelAndView对象</p>\n</li>\n<li>\n<p>最后在<code>doDispatch()</code>中调用 <code>processDispatchResult()</code>随后处理模型数据和渲染视图</p>\n</li>\n</ol>\n<h5 id=\"4、详细的流程\">4、详细的流程</h5>\n<ol>\n<li>\n<p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。随后 DispatcherServlet对请求URL进行解析，得到请求<code>资源标识符</code>（URI），判断请求URI对应的映射是否存在：</p>\n<p>1.1 要是不存在；再判断是否配置了mvc:default-servlet-handler<br>\n如果没配置，则控制台报映射查找不到，客户端报错<br>\n如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也报错\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br>\n1.2存在</p>\n</li>\n<li>\n<p>根据URI，调用HandlerMapping获得该Handler配置的所有相关的对象，最后以执行链对象的形式返回。</p>\n</li>\n<li>\n<p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>\n<p>3.1 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】，随后执行Handler（Controller)方法，处理请求</p>\n<blockquote>\n<p>还可以通过 HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>\n数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>\n数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等<br>\n数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>\n</blockquote>\n</li>\n</ol>\n<p>​\t\t3.2  Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>\n<ol start=\"4\">\n<li>此时将开始执行拦截器的postHandle(…)方法【逆向】。</li>\n<li>根据返回的ModelAndView选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。（如果存在异常，则进行异常处理）</li>\n<li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</li>\n<li>最后将渲染结果返回给客户端。</li>\n</ol>\n","_path":"post/ae0f95e0.html","_link":"http://rycan.top/post/ae0f95e0.html","_id":"clndbzy6u0059150p2ayg35wh"}}