{"type":"getPostById","data":{"title":"springcloud核心代码思路篇","date":"2023-07-03T12:44:04.000Z","description":"SpringCloud代码思路篇","categories":[{"name":"SpringCloud","_id":"clmhxgjgo0066p70p50qzait4"}],"tags":[{"name":"SpringCloud","_id":"clmhxgjgk0051p70p4ey68q95"}],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n<h2 id=\"项目前置\">项目前置</h2>\n<h5 id=\"五部曲\">五部曲</h5>\n<blockquote>\n<h6 id=\"1、创建模块（Maven项目）\">1、创建模块（Maven项目）</h6>\n<h6 id=\"2、修改POM类\">2、修改POM类</h6>\n<h6 id=\"3、写yaml配置文件\">3、写yaml配置文件</h6>\n<h6 id=\"4、写启动类\">4、写启动类</h6>\n<h6 id=\"5、编写业务类（CRUD）\">5、编写业务类（CRUD）</h6>\n</blockquote>\n<h2 id=\"微服务框架介绍\">微服务框架介绍</h2>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305182310008.png\" alt></p>\n<h2 id=\"服务注册与发现\">服务注册与发现</h2>\n<h3 id=\"注册中心—Eureka\">注册中心—Eureka</h3>\n<h4 id=\"作用：\">作用：</h4>\n<p>当服务器启动的时候，会把当前自己服务器的信息以别名方式注册到注册中心上</p>\n<p>另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架</p>\n<blockquote>\n<p>在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p>\n</blockquote>\n<h4 id=\"Eureka单机\">Eureka单机:</h4>\n<blockquote>\n<p>当我们的服务启动之后，会每隔一段时间跟Eureka发送一次心跳包，这样Eureka就能够感知到我们的服务是否处于正常运行状态。</p>\n</blockquote>\n<p><code>Eureka Server</code>和<code>Eureka Client</code></p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305182330977.png\" alt=\"image-20230518233029866\" style=\"zoom:30%;\">\n<blockquote>\n<p>针对上图的一些发问：</p>\n<p>问题1：order-service如何得知user-service实例地址？</p>\n<p>获取地址信息的流程如下：</p>\n<ul>\n<li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li>\n<li>eureka-server保存服务名称到服务实例地址列表的<code>映射关系</code></li>\n<li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li>\n</ul>\n<p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p>\n<ul>\n<li>order-service从实例列表中利用<code>负载均衡算法选中一个实例地址</code></li>\n<li>向该实例地址发起远程调用</li>\n</ul>\n<p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p>\n<ul>\n<li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li>\n<li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li>\n<li>order-service拉取服务时，就能将故障实例排除了</li>\n</ul>\n<p>==注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端==</p>\n</blockquote>\n<h5 id=\"Eureka服务器-7001\">Eureka服务器(7001)</h5>\n<blockquote>\n<p>Eureka Server是 没有业务类的，也就是说其只能进行注册</p>\n</blockquote>\n<p>1、导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2、主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure>\n<p>3、yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">localhost</span> <span class=\"comment\">#eureka服务端的实例名称</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\">#false表示不向注册中心注册自己。</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">service-url:</span></span><br><span class=\"line\">    <span class=\"comment\">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span><br><span class=\"line\">    <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>访问    http://localhost:7001</code></p>\n<h5 id=\"Eureka-Client-8001-80\">Eureka Client(8001/80)</h5>\n<blockquote>\n<p>Eureka Client  就是   生产者&amp;消费者</p>\n</blockquote>\n<h6 id=\"生产者-8001\">生产者(8001)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示将自己注册进EurekaServer默认为true</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示可以从Eureka抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> </span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"消费者-80\">消费者(80)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yaml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 微服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"> <span class=\"attr\">application:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cloud-order-service</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"> <span class=\"attr\">client:</span></span><br><span class=\"line\">  <span class=\"comment\"># 表示将自己注册进EurekaServer默认为true   //如果不想将服务注册进eureka   在yml文件中，设置 register-with-eureka: false</span></span><br><span class=\"line\">  <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 表示可以从Eureka抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class=\"line\">  <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">service-url:</span></span><br><span class=\"line\">    <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka</span> </span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Eureka-集群\">Eureka 集群</h4>\n<h5 id=\"注册中心高可用-集群\">注册中心高可用(集群)</h5>\n<p>方法：搭建Eureka注册中心集群 ，实现  负载均衡   和   故障容错</p>\n<p>就是多搭建几个<code>7001</code></p>\n<h6 id=\"Eureka-server搭建集群-7002-7003……\">Eureka server搭建集群(7002\\7003……)</h6>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7001.com</span> <span class=\"comment\">#eureka服务端的实例名称 这里跟host配置文件中的一致</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\">#false表示不向注册中心注册自己。</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">    <span class=\"comment\">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span><br><span class=\"line\">      <span class=\"comment\"># 单机就是自己</span></span><br><span class=\"line\">      <span class=\"comment\"># defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\"># 集群指向其他eureka</span></span><br><span class=\"line\">      <span class=\"comment\">#defaultZone: http://eureka7002.com:7002/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\">#写成这样可以直接通过可视化页面跳转到7002</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7002.com:7002/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7002.com</span> <span class=\"comment\">#eureka服务端的实例名称 这里跟host配置文件中的一致</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\">#false表示不向注册中心注册自己。</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"comment\">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span><br><span class=\"line\">      <span class=\"comment\"># 单机就是自己</span></span><br><span class=\"line\">      <span class=\"comment\"># defaultZone: http://eureka7002.com:7002/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\">#集群版</span></span><br><span class=\"line\">      <span class=\"comment\">#defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\">#写成这样可以直接通过可视化页面跳转到7001</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/</span></span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure>\n<p>并在之前的消费者  生产者  yml 中  修改 配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class=\"comment\">#集群版</span></span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><code>先启动eureka7001/7002   再启动payment8001、order80     访问http://eureka7001.com:7001测试</code></p>\n<h5 id=\"生产者搭建集群-8002-8003……\">生产者搭建集群(8002\\8003……)</h5>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示将自己注册进EurekaServer默认为true</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示可以从Eureka抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> </span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class=\"comment\">#集群版</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"服务调用\">服务调用</h5>\n<p>多个 生产者的  <code>spring.application.name</code> 应该是一样的  这样才能实现服务之间的相互调用</p>\n<h6 id=\"消费者\">消费者</h6>\n<p>因为是调用 ，所以显然是 消费者 在进行调用  所以消费者在集群之中的调用方式应该是下面这样的    即：我们对外暴露的只能是<code>微服务名</code>，来供使用者使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//单机形式</span></span><br><span class=\"line\">    <span class=\"comment\">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//集群模式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PAYMENT_URL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;   <span class=\"comment\">//这就是服务的拉取</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体使用的案例</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/consumer/payment/create&quot;)</span>    <span class=\"comment\">// get 套 post</span></span><br><span class=\"line\">    <span class=\"comment\">//url的请求方式   http://localhost:80/consumer/payment/create?serial=yr123</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommontResult&lt;Payment&gt; <span class=\"title function_\">create</span><span class=\"params\">(Payment payment)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// post请求</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.postForObject(PAYMENT_URL +<span class=\"string\">&quot;/payment/create&quot;</span>,payment,CommontResult.class);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"负载均衡\">负载均衡</h6>\n<blockquote>\n<p>实现负载均衡还可以保证如果某个微服务挂掉了，只要存在其他同样的微服务实例在运行，那么就不会导致整个微服务不可用，极大地保证了安全性。</p>\n</blockquote>\n<p>使用@LoadBlanced注解赋予RestTemplate负载均衡的能力</p>\n<h6 id=\"消费者-（80）\">消费者 （80）</h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    RestTemplate <span class=\"title function_\">template</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"其他：\">其他：</h5>\n<h6 id=\"actuator微服务信息完善\">actuator微服务信息完善</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">payment8001</span>  <span class=\"string\">/</span> <span class=\"string\">payment8002</span>  <span class=\"comment\"># 自定义名称</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#鼠标移动到服务列表的主机上之后，左下角不显示IP，不方便定位具体的主机ip。可以修改eureka.instance.prefer-ip-address，设置为true。</span></span><br><span class=\"line\">    <span class=\"comment\">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span></span><br><span class=\"line\">    <span class=\"comment\">#lease-renewal-interval-in-seconds: 1</span></span><br><span class=\"line\">    <span class=\"comment\">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span></span><br><span class=\"line\">    <span class=\"comment\">#lease-expiration-duration-in-seconds: 2</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"服务发现Discovery\">服务发现Discovery</h6>\n<blockquote>\n<p>用来获取 注册进eureka里面的微服务的服务信息</p>\n</blockquote>\n<p>所有消费者、所有生产者的Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span>   <span class=\"comment\">//发现自己的服务信息</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DiscoveryClient discoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 使用</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//得到全部服务清单</span></span><br><span class=\"line\">List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取微服务实例</span></span><br><span class=\"line\">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class=\"string\">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"自我保护\">自我保护</h6>\n<p>禁用</p>\n<p><code>Eureka Server</code>   yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"comment\">#关闭自我保护机制，保证不可用服务被及时踢除</span></span><br><span class=\"line\">    <span class=\"attr\">enable-self-preservation:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">eviction-interval-timer-in-ms:</span> <span class=\"number\">2000</span></span><br></pre></td></tr></table></figure>\n<p><code>eurekaClient</code>  yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#eureka.instance.lease-renewal-interval-in-seconds: 30 单位秒 </span></span><br><span class=\"line\"><span class=\"attr\">lease-renewal-interval-in-seconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#eureka.instance.lease-expiration-duration-in-seconds: 90 单位秒</span></span><br><span class=\"line\"><span class=\"attr\">lease-expiration-duration-in-seconds:</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>\n<p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口</p>\n</li>\n<li>\n<p><code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p>\n</li>\n</ul>\n<p>流程</p>\n<p>Ribbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305182355118.png\" alt=\"image-20230518235549063\" style=\"zoom:33%;\">\n<p>基本流程如下：</p>\n<ul>\n<li>拦截我们的RestTemplate请求<a href=\"http://userservice/user/1\">http://userservice/user/1</a></li>\n<li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li>\n<li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li>\n<li>eureka返回列表，localhost:8081、localhost:8082</li>\n<li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li>\n<li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href=\"http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82\">http://localhost:8081/user/1，发起真实请求</a></li>\n</ul>\n</blockquote>\n<h3 id=\"注册中心—Zookeeper\">注册中心—Zookeeper</h3>\n<h6 id=\"生产者-8004\">生产者(8004)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--添加zookeeper3.7.0版本--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务别名----注册zookeeper到注册中心名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-provider-payment</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">      <span class=\"attr\">connect-string:</span> <span class=\"number\">172.16</span><span class=\"number\">.108</span><span class=\"number\">.139</span><span class=\"string\">:2181</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span> <span class=\"comment\">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注册到zookeeper的微服务是一个zNode节点，这个节点是<code>临时节点</code></p>\n<p>如果先前配置了zookeeper的<code>集群</code>，请确保<code>一半以上</code>的服务器处于开启状态，否者zookeeper服务无法使用</p>\n</blockquote>\n<h6 id=\"消费者-zk-80\">消费者(zk-80)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span><span class=\"comment\">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ry.sc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloud-commen-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--添加zookeeper3.7.0版本--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#80表示注册到zookeeper服务器的消费服务提供者端口号</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务别名----注册zookeeper到注册中心名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-consumer-order</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">      <span class=\"attr\">connect-string:</span> <span class=\"number\">172.16</span><span class=\"number\">.108</span><span class=\"number\">.139</span><span class=\"string\">:2181</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationContextConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span> <span class=\"comment\">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注册中心—Consul\">注册中心—Consul</h3>\n<p><code>Consul———–&gt; localhost:8500</code></p>\n<h6 id=\"生产者-8006\">生产者(8006)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###consul服务端口号</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8006</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">consul-provider-payment</span></span><br><span class=\"line\">  <span class=\"comment\">####consul注册中心地址</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">consul:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8500</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">service-name:</span> <span class=\"string\">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"消费者-consul-80\">消费者(consul-80)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###consul服务端口号</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-consumer-order</span></span><br><span class=\"line\">  <span class=\"comment\">####consul注册中心地址</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">consul:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8500</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"comment\">#hostname: 127.0.0.1</span></span><br><span class=\"line\">        <span class=\"attr\">service-name:</span> <span class=\"string\">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationContextConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">getRestTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务调用-2\">服务调用</h2>\n<h3 id=\"服务调用—Ribbon\">服务调用—Ribbon</h3>\n<blockquote>\n<p>主要功能: <code>提供客户端的软件负载均衡算法和  进行服务调用</code></p>\n<p>简单的说，就是配置文件中列出Load Banlancer (简称LB) 后面所有的机器，Ribbon都会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器</p>\n<p>我们很容易使用Ribbon实现自定义的负载均衡算法</p>\n<p><code>Ribbon是实现负载均衡的一套客户端工具, 可以结合RestTemplate一起使用从而实现服务调用</code></p>\n</blockquote>\n<h5 id=\"负载均衡-2\">负载均衡</h5>\n<h6 id=\"负载均衡的分类\">负载均衡的分类</h6>\n<blockquote>\n<ul>\n<li>集中式 LB</li>\n</ul>\n<p>即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如Nginx），由该设施负责把访问请求通过某种策略转发至服务的提供方。</p>\n<ul>\n<li>进程内 LB</li>\n</ul>\n<p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个何时的服务器</p>\n<p>Ribbon就属于是进程内LB, 它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址</p>\n</blockquote>\n<h6 id=\"常见的负载均衡算法\">常见的负载均衡算法</h6>\n<ul>\n<li>\n<p><code>轮询</code>：为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直到最后一个，然后循环。</p>\n</li>\n<li>\n<p><code>最小连接</code>：优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式。</p>\n</li>\n<li>\n<p><code>散列</code>：根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到和之前相同的服务器，可以考虑采取这种方式。</p>\n</li>\n</ul>\n<blockquote>\n<p><em>Ribbon本地负载均衡客户端VS Nginx 服务端负载均衡区别</em></p>\n<ul>\n<li>Nginx是服务器负载均衡，客户端所有请求都会交给Nginx，然后由Nginx实现转发请求，即负载均衡是由服务端实现的</li>\n<li>Ribbon 本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>问</strong>：之前 为什么没有引入Ribbon也可以完成负载均衡</p>\n<p><strong>答</strong>：之前使用<code>@LoadBalanced</code>赋予了RestTemplate负载均衡的能力；spring-boot-netfix-eureka-client<code>自带了</code>spring-starter-ribbon引用</p>\n</blockquote>\n<h5 id=\"RestTemplate的使用\">RestTemplate的使用</h5>\n<ul>\n<li><code>getForObject()</code>     返回对象为响应体中数据转化成的对象，基本上可以理解为JSON</li>\n<li><code>getForEntity()</code>     返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头，响应状态码，响应体等。</li>\n<li><code>postForObject()</code></li>\n<li><code>postForEntity()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------------ getForObject() --------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">getPayment</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回对象为响应体中数据转化成的对象，基本上可以理解为JSO</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> restTemplate.getForObject(PAYMENT_URL + <span class=\"string\">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">------------------ getForEntity() --------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试getForEntity   cloud-consumer-order80模块，OrderController类中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/consumer/payment/getForEntity/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">getPayment2</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头，响应状态码，响应体等。</span></span><br><span class=\"line\">    ResponseEntity&lt;CommonResult&gt; entity =  restTemplate.getForEntity(PAYMENT_URL + <span class=\"string\">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class=\"line\">        log.info(entity.getStatusCode() + <span class=\"string\">&quot;\\t&quot;</span> + entity.getHeaders());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity.getBody();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>&lt;&gt;(<span class=\"number\">444</span>, <span class=\"string\">&quot;操作失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------postForObject------------------------------</span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">create</span><span class=\"params\">(Payment payment)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;80收到的参数：&quot;</span> + payment.toString());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> restTemplate.postForObject(PAYMENT_URL + <span class=\"string\">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------postForEntity------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试postForEntity  cloud-consumer-order80模块，OrderController类中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/consumer/payment/postForEntity/create&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">create2</span><span class=\"params\">(Payment payment)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;80收到的参数：&quot;</span> + payment.toString());</span><br><span class=\"line\">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.postForEntity(PAYMENT_URL + <span class=\"string\">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class=\"line\">        log.info(entity.getHeaders() + <span class=\"string\">&quot;\\t&quot;</span> +entity.getStatusCode());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity.getBody();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>&lt;&gt;(<span class=\"number\">404</span>, <span class=\"string\">&quot;操作失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"加载方式\">加载方式</h5>\n<p>Ribbon<code>默认是采用懒加载</code>，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p>\n<p>而<code>饥饿加载</code>则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbon:</span></span><br><span class=\"line\">  <span class=\"attr\">eager-load:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">clients:</span> <span class=\"string\">userservice</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Ribbon\">Ribbon</h5>\n<h6 id=\"生产者-不变（8001-8002）\">生产者-不变（8001 8002）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示将自己注册进EurekaServer默认为true</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示可以从Eureka抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> </span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"消费者-80-2\">消费者 (80)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>新建com.ry.myrule包,并在此包下自定义负载均衡配置类MySelfRule</p>\n<blockquote>\n<p>负载均衡配置类不能放在@ComponentScan所扫描的当前包下以及子包下！！！！</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.loadbalancer.IRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MySelfRule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IRule <span class=\"title function_\">myRule</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomRule</span>();<span class=\"comment\">//定义为随机负载均衡算法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>或者：</p>\n<p>配置文件方式：在 <code>application.yml </code>文件中，添加新的配置也可以修改规则：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&gt;userservice:</span> <span class=\"comment\"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class=\"line\"><span class=\"string\">&gt;ribbon:</span></span><br><span class=\"line\"><span class=\"string\">&gt;NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.RandomRule</span> <span class=\"comment\"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"comment\">//指明访问的服务CLOUD-PAYMENT-SERVICE，以及指定负载均衡策略</span></span><br><span class=\"line\"><span class=\"meta\">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration= MySelfRule.class)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"手写负载均衡\"><em>手写负载均衡</em></h5>\n<h6 id=\"生产者改造-8001-8002\">生产者改造(8001/8002)</h6>\n<p>controller 调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/payment/lb&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getPaymentLB</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> serverPort;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"消费者改造-80\">消费者改造(80)</h6>\n<p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationContextConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"comment\">// @LoadBalanced  去掉</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">getRestTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建com.ry.springcloud.lb包，创建LoadBalancer接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">LoadBalancer</span> &#123;</span><br><span class=\"line\">    ServiceInstance <span class=\"title function_\">instances</span><span class=\"params\">(List&lt;ServiceInstance&gt; serviceInstances)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建LoadBalancer接口的实现类MyLoadBalancer[负载均衡算法的实现]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLoadBalancer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LoadBalancer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndIncrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> current;</span><br><span class=\"line\">        <span class=\"type\">int</span> next;</span><br><span class=\"line\">        <span class=\"comment\">//从下面的分析中得知：该循环主要是得到next值，单机是每循环一次返回一次next</span></span><br><span class=\"line\">        <span class=\"comment\">//高并发时：就不是这种情况了。因为数字会被抢占。</span></span><br><span class=\"line\">        <span class=\"comment\">//自旋锁</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            current = <span class=\"built_in\">this</span>.atomicInteger.get();</span><br><span class=\"line\">            <span class=\"comment\">//考虑到极端情况，atomicInteger最大值为2147483647</span></span><br><span class=\"line\">            <span class=\"comment\">//当请求次数超过这个值的时候，从0开始</span></span><br><span class=\"line\">            next = current &gt;= <span class=\"number\">2147483647</span> ? <span class=\"number\">0</span> : current + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//compareAndSet方法使用了CAS机制，判断current是否变化，如果变了自旋，反之更新current</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 当atomicInteger=0时，current=0, next=1</span></span><br><span class=\"line\"><span class=\"comment\">             * atomicInteger和current进行比较，相等时返回true将atomicInteger更新为next，1，取反跳出循环，再返回next</span></span><br><span class=\"line\"><span class=\"comment\">             * 当atomicInteger=2147483647时，current=2147483647，next=0</span></span><br><span class=\"line\"><span class=\"comment\">             * atomicInteger和current进行比较，相等时返回true将atomicInteger更新为next, 0，取反跳出循环，再返回next</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果是高并发时,则需要判断当前线程获得的current值跟atomicInteger的值是否相等，</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果不相等则表示其他线程已经操作了atomicInteger，自旋。</span></span><br><span class=\"line\"><span class=\"comment\">             * 这就是乐观锁的一个实现</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (!<span class=\"built_in\">this</span>.atomicInteger.compareAndSet(current, next));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;************第几次访问次数:&quot;</span> + next);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 每次服务重启动后rest接口计数从1开始。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServiceInstance <span class=\"title function_\">instances</span><span class=\"params\">(List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算当前访问应该分配给哪台服务器处理</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> getAndIncrement() % serviceInstances.size();</span><br><span class=\"line\">        <span class=\"comment\">//返回目标服务器</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> serviceInstances.get(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>修改OrderController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span>  <span class=\"comment\">//自动注入自定义的MyLoadBalancer类</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> LoadBalancer loadBalancer;</span><br><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DiscoveryClient discoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试自己的轮循算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/consumer/payment/lb&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getPaymentLB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class=\"string\">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instances == <span class=\"literal\">null</span> || instances.size() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">ServiceInstance</span> <span class=\"variable\">serviceInstance</span> <span class=\"operator\">=</span> loadBalancer.instances(instances);</span><br><span class=\"line\">    <span class=\"type\">URI</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> serviceInstance.getUri();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> restTemplate.getForObject(uri + <span class=\"string\">&quot;/payment/lb&quot;</span>, String.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务调用—OpenFeign\">服务调用—OpenFeign</h3>\n<blockquote>\n<p>Spring Cloud 对Feign进行了封装。使其支持了SpringMVC 标准注解和HttpMessageConverters</p>\n<p>Feign可以与Eureka和Ribbon组合使用以支持负载均衡</p>\n<p>使用上  只需创建一个接口并在接口上添加注解即可</p>\n</blockquote>\n<h4 id=\"比较\">比较</h4>\n<blockquote>\n<p>之前在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法</p>\n<p>实际上  往往一个接口会被多处调用，所以通常都会<code>针对每个微服务</code>自行封装一些客户端类来包装这些依赖服务的调用</p>\n<p>现在  Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义</p>\n<p>即： 我们只需<code>创建一个接口 </code>  + <code>使用注解的方式</code>来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定</p>\n</blockquote>\n<h4 id=\"消费端-80\">消费端(80)</h4>\n<blockquote>\n<p>Feign 是只使用在==消费端==  <code> 接口+注解</code>  ------ 微服务调用接口+<strong>@FeignClient</strong> 注解</p>\n</blockquote>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--openfeign   新增--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--eureka client--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<blockquote>\n<p>不将其注册到Eureka作为微服务，而是作为一个Feign客户端</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示不将其注入Eureka作为微服务，不作为Eureak客户端了，而是作为Feign客户端</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"comment\"># 集群版</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span> <span class=\"comment\">//不作为Eureak客户端了，而是作为Feign客户端</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>声明一个远程调用服务接口，不需要能被Springboot扫描到</p>\n</blockquote>\n<p>新建PaymentFeignService接口</p>\n<blockquote>\n<p>以前：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190039497.png\" alt=\"image-20230519003955429\" style=\"zoom:33%;\">\n</blockquote>\n<blockquote>\n<p>并新增注解 <code>@FeignClient</code>  <code>@FeignClient(&quot;provider微服务名字&quot;)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span> <span class=\"comment\">//作为一个Feign功能绑定的的接口     </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//8001  8002 的 为服务的名字就是 cloud-payment-service</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//这样就可以找到CLOUD-PAYMENT-SERVICE微服务下面的/payment/get/&#123;id&#125;这个地址。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentFeignService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">getPaymentById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Controller</p>\n<blockquote>\n<p>由  Service接口层 去调用服务提供者中的接口</p>\n<p><code>使用FeignClient中定义的方法代替RestTemplate</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderFeignController</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//直接将PaymentFeignService的对象注入</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PaymentFeignService paymentFeignService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">getPaymentById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//由  Service接口层 去调用服务提供者中的接口</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> paymentFeignService.getPaymentById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面两 步  的 接口层 与  控制层 的 逻辑就是</p>\n<p><code>在80中还是controller调用service，service再去调用8001的controller</code></p>\n</blockquote>\n<p>测试：</p>\n<p><code>先启动两个Eureka集群  7001/7002   再启动两个paymentprovider微服务 8001/8002    启动使用OpenFeign的OrderFeign80</code></p>\n<p>效果：</p>\n<p><code>消费者微服务没有注册在Eureka中；通过消费者本身的接口地址，去调用生产者微服务对应的接口，并且可以实现负载均衡</code></p>\n<h4 id=\"拓展\">拓展</h4>\n<p>Feign可以支持很多的自定义配置，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>feign.Logger.Level</strong></td>\n<td>修改日志级别</td>\n<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>\n</tr>\n<tr>\n<td>feign.codec.Decoder</td>\n<td>响应结果的解析器</td>\n<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>\n</tr>\n<tr>\n<td>feign.codec.Encoder</td>\n<td>请求参数编码</td>\n<td>将请求参数编码，便于通过http请求发送</td>\n</tr>\n<tr>\n<td>feign. Contract</td>\n<td>支持的注解格式</td>\n<td>默认是SpringMVC的注解</td>\n</tr>\n<tr>\n<td>feign. Retryer</td>\n<td>失败重试机制</td>\n<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>\n</tr>\n</tbody>\n</table>\n<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>\n<blockquote>\n<p>均配置在消费端（80）</p>\n</blockquote>\n<h6 id=\"超时控制\">超时控制</h6>\n<blockquote>\n<p>OpenFeign默认等待时间为1秒钟，超过1s 之后就会报错</p>\n<p><strong>Feign 默认是支持Ribbon ，Feign依赖里自己带了Ribbon；Feign客户端的负载均衡和超时控制都由Ribbon控制</strong></p>\n</blockquote>\n<p>yml（80）</p>\n<blockquote>\n<p>配置超时时间</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span></span><br><span class=\"line\"><span class=\"attr\">ribbon:</span></span><br><span class=\"line\">  <span class=\"comment\">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class=\"line\">  <span class=\"attr\">ReadTimeout:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">  <span class=\"comment\">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span></span><br><span class=\"line\">  <span class=\"attr\">ConnectTimeout:</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"日志打印\">日志打印</h6>\n<p>日志级别</p>\n<table>\n<thead>\n<tr>\n<th>NONE</th>\n<th>默认的，不显示任何日志</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BASIC</td>\n<td>仅记录请求方法、URL、响应状态码及执行时间</td>\n</tr>\n<tr>\n<td>HEADERS</td>\n<td>除了BASIC中定义的信息之外，还有请求和响应的头信息</td>\n</tr>\n<tr>\n<td>FULL</td>\n<td>除了HEADERS中定义的信息外，还有请求和响应的正文及元数据。</td>\n</tr>\n</tbody>\n</table>\n<p>消费端（80）配置日志 <code>com.ry.sc.config.FeignConfig</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    Logger.Level <span class=\"title function_\">feignLoggerLevel</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Logger.Level.FULL<span class=\"comment\">/*NONE  BASIC  HEADERS*/</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"comment\"># feign 日志以什么级别监控哪个接口</span></span><br><span class=\"line\">    <span class=\"attr\">com.ry.sc.service.PaymentFeignService:</span> <span class=\"string\">debug</span></span><br></pre></td></tr></table></figure>\n<p>上面的配置 已经指明了接口位置 所以可以不用 在<code>@EnableFeignClients</code> 或者<code>@FeignClient</code> 中进行配置</p>\n<blockquote>\n<p>或者</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于配置文件修改feign的日志级别可以针对单个服务：</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span>  </span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span> </span><br><span class=\"line\">      <span class=\"attr\">userservice:</span> <span class=\"comment\"># 针对某个微服务的配置</span></span><br><span class=\"line\">        <span class=\"attr\">loggerLevel:</span> <span class=\"string\">FULL</span> <span class=\"comment\">#  日志级别 </span></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\"><span class=\"comment\">#也可以针对所有服务：</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span>  </span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span> </span><br><span class=\"line\">      <span class=\"attr\">default:</span> <span class=\"comment\"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class=\"line\">        <span class=\"attr\">loggerLevel:</span> <span class=\"string\">FULL</span> <span class=\"comment\">#  日志级别 </span></span><br></pre></td></tr></table></figure>\n<p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients(defaultConfiguration = FeignConfig .class)</span> </span><br></pre></td></tr></table></figure>\n<p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;userservice&quot;, configuration = FeignConfig .class)</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"Feign的优化\">Feign的优化</h3>\n<h5 id=\"日志级别尽量用basic\">日志级别尽量用basic</h5>\n<h5 id=\"使用HttpClient或OKHttp代替URLConnection\">使用HttpClient或OKHttp代替URLConnection</h5>\n<p>①  引入feign-httpClient依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>②  配置文件开启httpClient功能，设置连接池参数</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span> <span class=\"comment\"># default全局的配置</span></span><br><span class=\"line\">        <span class=\"attr\">loggerLevel:</span> <span class=\"string\">BASIC</span> <span class=\"comment\"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class=\"line\">  <span class=\"attr\">httpclient:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 开启feign对HttpClient的支持</span></span><br><span class=\"line\">    <span class=\"attr\">max-connections:</span> <span class=\"number\">200</span> <span class=\"comment\"># 最大的连接数</span></span><br><span class=\"line\">    <span class=\"attr\">max-connections-per-route:</span> <span class=\"number\">50</span> <span class=\"comment\"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"服务熔断-降级\">服务熔断/降级</h2>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151236121.png\" alt=\"image-20230306230247024\" style=\"zoom:33%;\">\n<blockquote>\n<p>产生背景</p>\n<ul>\n<li>分布式链路上的  某个/部分 微服务出现故障</li>\n</ul>\n<p>服务雪崩</p>\n<ul>\n<li>扇出  链路上的某个微服务的调用响应时间过长或者不可用，导致整个微服务不可用，进而引起系统崩溃，；产生了级联故障，所谓的“雪崩效应”</li>\n</ul>\n<p>解决</p>\n<ul>\n<li>宏观而言：对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统</li>\n</ul>\n<p>目的</p>\n<ul>\n<li>当生产者已经down了，让客户端（消费者）在服务端（生产者）不可用时也会获得提示信息而<code>不会挂起 导致其 耗死服务器的现象产生</code></li>\n</ul>\n</blockquote>\n<h3 id=\"服务降级—Hystrix\">服务降级—Hystrix</h3>\n<blockquote>\n<p><code>Hystrix</code> 是一个用于处理分布式系统的延迟和容错的开源库,其能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p>\n<p><code>断路器</code>  一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的，可处理的备选响应（FallBack），(而不是长时间的等待或者抛出调用方无法处理的异常，这样)就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>\n</blockquote>\n<h6 id=\"生产者（hystrix-8001）\">生产者（hystrix-8001）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--hystrix--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--eureka client--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-provider-hystrix-payment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"comment\">#集群版</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class=\"line\">      <span class=\"comment\">#单机版</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>一旦调用服务方法失败并<code>抛出了错误信息后</code>，会自动调用<code>@HystrixCommand</code>标注好的<code>fallbackMethod</code>调用类中的指定方法</p>\n<p>就是说  如果当前服务不可用了，就会做服务降级，兜底的方案都是<code>paymentInfo_TimeOutHandler</code>。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,   // 调用  兜底方法</span></span><br><span class=\"line\"><span class=\"meta\">                    commandProperties = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">                        //规定这个线程的超时时间是3s，3s后就由fallbackMethod指定的方法帮我“兜底”（服务降级）</span></span><br><span class=\"line\"><span class=\"meta\">                        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">                    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">                   )</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo_Timeout</span><span class=\"params\">(Integer id)</span> &#123;</span><br><span class=\"line\">      ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义 兜底方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo_TimeoutHandler</span><span class=\"params\">(Integer id)</span> &#123;</span><br><span class=\"line\">       .......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><code>启动eureka7001/7002；启动hystrix-8001</code></p>\n<h6 id=\"消费者（hystrix-80）-OpenFeign-实现远程-调用其他微服务\">消费者（hystrix-80）(OpenFeign 实现远程 调用其他微服务  )</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--openfeign--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--hystrix--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--eureka client--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于服务降级 在注解@FeignClient中添加fallbackFactory属性值</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">  <span class=\"comment\">#在Feign中开启Hystrix</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span> <span class=\"comment\">//不作为Eureak客户端了，而是作为Feign客户端</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrix</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<ul>\n<li>service</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">//本 接口能实现    调用其他微服务   的操作，因此我们将这个接口中的全部方法进行统一的fallback服务降级。</span></span><br><span class=\"line\"><span class=\"comment\">//所以 修改改接口的  @FeignClient</span></span><br><span class=\"line\"><span class=\"comment\">//@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;, fallback = PaymentFallbackService.class)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">上述注解的作用：</span></span><br><span class=\"line\"><span class=\"comment\">\t目的是为了实现以下效果：</span></span><br><span class=\"line\"><span class=\"comment\">1、正常运行的话就找指定的微服务中的方法执行；</span></span><br><span class=\"line\"><span class=\"comment\">2、异常的话就找PaymentFallbackService，由它来统一进行服务降级的处理</span></span><br><span class=\"line\"><span class=\"comment\">这样的话客户端的OrderHystirxController中就不需要再进行降级处理，</span></span><br><span class=\"line\"><span class=\"comment\">降级处理只针对要调用的微服务，因此降低了服务降级和客户端的耦合度。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentHystrixService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo_Ok</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo_Timeout</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>serviceImpl</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>  <span class=\"comment\">//不要忘记这个注解</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentFallbackService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PaymentHystrixService</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo_Ok</span><span class=\"params\">(Integer id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;------PaymentFallbackService-paymentInfo_Ok, fallback&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo_Timeout</span><span class=\"params\">(Integer id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;------PaymentFallbackService-paymentInfo_Timeout, fallback&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"comment\">//优化： </span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t表示   如果下面的方法 有注解  <span class=\"doctag\">@HystrixCommand</span> ， 但是  <span class=\"doctag\">@HystrixCommand</span> 里没有指明fallbackMethod，就默认使用</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderHystirxController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    PaymentHystrixService paymentHystrixService;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span></span><br><span class=\"line\">        <span class=\"comment\">//当 存在  @DefaultProperties  属性 注解的时候，再定义注解   @HystrixCommand ，而 @HystrixCommand 中没有写具体方法名的时候就使用全局异常处理</span></span><br><span class=\"line\">        <span class=\"comment\">//(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,</span></span><br><span class=\"line\">        <span class=\"comment\">//                commandProperties = &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//                     @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,</span></span><br><span class=\"line\">        <span class=\"comment\">//                     value=&quot;1500&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\">//                &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//            )</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo_Timeout</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> paymentHystrixService.paymentInfo_Timeout(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//定义 兜底方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentTimeOutFallbackMethod</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class=\"line\">       ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 定义   全局fallback方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">payment_Global_FallbackMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      .......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动   8001  7001 7002 80  </code></p>\n<h3 id=\"服务熔断—Hystrix\">服务熔断—Hystrix</h3>\n<blockquote>\n<p><code>熔断机制</code>是应对雪崩效应的一种微服务<code>链路保护机制</code></p>\n<p>当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。<em>先降级后熔断</em></p>\n<p>当检测到该节点微服务调用响应正常后，自动恢复调用链路。</p>\n</blockquote>\n<h5 id=\"熔断的状态\">熔断的状态</h5>\n<p>熔断的状态：<em>开启   关闭   半开启</em></p>\n<ul>\n<li>熔断<code>打开</code>：请求不再进行调用当前服务，再有请求调用时将不会调用主逻辑，而是直接调用降级fallback。实现了自动的发现错误并将降级逻辑切换为主逻辑，减少响应延迟效果。内部设置时钟一般为MTTR（Mean time to repair，平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态。</li>\n<li>熔断<code>关闭</code>：熔断关闭不会对服务进行熔断，服务正常调用</li>\n<li>熔断<code>半开</code>：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>\n</ul>\n<h5 id=\"熔断机制：\">熔断机制：</h5>\n<ul>\n<li>\n<p><strong>circuitBreaker.enabled</strong>：是否开启断路器</p>\n</li>\n<li>\n<p><strong>circuitBreaker.requestVolumeThreshold</strong>：该属性设置滚动窗口（快照时间窗口，默认10s）中将使断路器跳闸的最小请求数量（默认是20），如果10s内请求数小于设定值，就算请求全部失败也不会触发断路器。</p>\n<p><em>请求总数阀值</em>：在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开</p>\n</li>\n<li>\n<p><strong>circuitBreaker.sleepWindowInMilliseconds</strong>：短路多久以后开始尝试是否恢复，默认5s ，窗口睡眠时间，即断路器触发多少秒（默认5s）后尝试恢复，进入半开状态。</p>\n</li>\n<li>\n<p><strong>circuitBreaker.errorThresholdPercentage</strong>：失败率达到多少后跳闸</p>\n<p><em>错误百分比阀值</em>：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</p>\n</li>\n<li>\n<p><strong>metrics.rollingStats.timeInMilliseconds</strong>：快照时间窗、滚动窗口\t路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</p>\n</li>\n</ul>\n<h5 id=\"断路器开启或关闭条件\">断路器开启或关闭条件</h5>\n<ul>\n<li>1、当满足一定的阈值的时候（默认10秒内超过20个请求次数）；</li>\n<li>2、当失败率达到一定的时候（默认10秒内超过50%的请求失败）；</li>\n<li>3、到达以上阈值，断路器将会开启；</li>\n<li>4、当开启的时候，所有请求都不会进行转发；</li>\n<li>5、一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发；如果成功，断路器会关闭，若失败，继续开启。重复4和5</li>\n</ul>\n<h6 id=\"问：答\">问：答</h6>\n<ul>\n<li>断路器打开之后再有请求调用的时候，还会调用主逻辑吗？\n<ul>\n<li>将不会调用主逻辑，而是直接调用降级的fallback方法，通过断路器，实现了自动的发现错误并将降级逻辑升级为主逻辑，减少响应延迟的效果。</li>\n</ul>\n</li>\n<li>原来的主逻辑要如何恢复？\n<ul>\n<li>对于这一问题mhystrix也为我们实现了自动恢复功能。</li>\n<li>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑。</li>\n<li>当休眠时间窗到期，断路器将进入半开状态，释放给一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合。</li>\n<li>主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"生产者（8001）\">生产者（8001）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--hystrix--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--eureka client--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-provider-hystrix-payment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"comment\">#集群版</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class=\"line\">      <span class=\"comment\">#单机版</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>一旦调用服务方法失败并<code>抛出了错误信息后</code>，会自动调用<code>@HystrixCommand</code>标注好的<code>fallbackMethod</code>调用类中的指定方法</p>\n<p>就是说  如果当前服务不可用了，就会做服务降级，兜底的方案都是<code>paymentInfo_TimeOutHandler</code>。</p>\n</blockquote>\n<p>Service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 正常访问，肯定OK</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">    // --------服务降级</span></span><br><span class=\"line\"><span class=\"comment\">    public String paymentInfo_OK(Integer id) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return &quot;线程池:  &quot;+Thread.currentThread().getName()+&quot;  paymentInfo_OK,id:  &quot;+id+&quot;\\t&quot;+&quot;O(∩_∩)O哈哈~&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@HystrixCommand</span>(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,commandProperties = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            <span class=\"doctag\">@HystrixProperty</span>(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;5000&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    // 模拟出错</span></span><br><span class=\"line\"><span class=\"comment\">    public String paymentInfo_TimeOut(Integer id) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        //int age = 10/0;</span></span><br><span class=\"line\"><span class=\"comment\">        try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            TimeUnit.MILLISECONDS.sleep(3000);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        // 超时报错</span></span><br><span class=\"line\"><span class=\"comment\">        return &quot;线程池:  &quot;+Thread.currentThread().getName()+&quot; id:  &quot;+id+&quot;\\t&quot;+&quot;O(∩_∩)O哈哈~&quot;+&quot;  耗时(秒): 3秒&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public String paymentInfo_TimeOutHandler(Integer id)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return &quot;线程池:  &quot;+Thread.currentThread().getName()+&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;+id+&quot;\\t&quot;+&quot;o(╥﹏╥)o&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//------------服务熔断</span></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                    commandProperties = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">                            @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),// 是否开启断路器</span></span><br><span class=\"line\"><span class=\"meta\">                            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),// 请求次数</span></span><br><span class=\"line\"><span class=\"meta\">                            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), // 时间窗口期</span></span><br><span class=\"line\"><span class=\"meta\">                            @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),// 失败率达到多少后跳闸</span></span><br><span class=\"line\"><span class=\"meta\">                    &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentCircuitBreaker</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class=\"line\">       .......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 兜底 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentCircuitBreaker_fallback</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><code>启动eureka7001/7002；启动hystrix-8001</code></p>\n<h6 id=\"消费者（80）不变\">消费者（80）不变</h6>\n<h3 id=\"服务监控—-HystrixDashBoard\">服务监控— HystrixDashBoard</h3>\n<h6 id=\"新建监控者-dashboard9001\">新建监控者(dashboard9001)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9001</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableHystrixDashboard</span> <span class=\"comment\">// 开启Hystrix仪表盘</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"生产者-8001-2\">生产者 (8001)</h6>\n<p>为生产者  添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span>  <span class=\"comment\">//本服务启动后会自动注册进eureka服务中</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span>  <span class=\"comment\">//对hystrixR熔断机制的支持</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentHystrixMain8001</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** ======================================需要添加的代码==================</span></span><br><span class=\"line\"><span class=\"comment\">     *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class=\"line\"><span class=\"comment\">     *ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;，</span></span><br><span class=\"line\"><span class=\"comment\">     *只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">getServlet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">HystrixMetricsStreamServlet</span> <span class=\"variable\">streamServlet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HystrixMetricsStreamServlet</span>();</span><br><span class=\"line\">        <span class=\"type\">ServletRegistrationBean</span> <span class=\"variable\">registrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>(streamServlet);</span><br><span class=\"line\">        registrationBean.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        registrationBean.addUrlMappings(<span class=\"string\">&quot;/hystrix.stream&quot;</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动Eureka7001、Eureka7002（我这里用的是两个Eureka的集群，视频里是单个）、8001、9001</code></p>\n<h2 id=\"服务网关\">服务网关</h2>\n<h3 id=\"服务网关—Gateway\">服务网关—Gateway</h3>\n<blockquote>\n<ul>\n<li>SpringCloud Gateway是异步非阻塞式，响应式的框架，即：使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。</li>\n<li>目标是   提供统一的路由方式且  基于 Filter 链的方式提供了  网关基本的功能  ，例如：安全，监控/指标，和限流</li>\n<li>作用 :  反向代理、坚定权限、流量控制、熔断、日志监控等</li>\n</ul>\n</blockquote>\n<h5 id=\"三个核心概念\">三个核心概念</h5>\n<ul>\n<li>Route(路由)</li>\n</ul>\n<p>路由是构建网关的基本模块，它由<code>ID，目标URI</code>（Uniform Resource Identifier，统一资源标识符），<code>一系列的断言和过滤器组成</code>，如果断言为true则匹配该路由。</p>\n<ul>\n<li>Predicate(断言)</li>\n</ul>\n<p>开发人员可以<code>匹配</code>Http请求中的所有内容（例如请求头或者请求参数），如果请求参数与断言相匹配则进行路由。</p>\n<ul>\n<li>Filter(过滤)</li>\n</ul>\n<p>指的是Spring框架中的GatewayFilter的实例，使用过滤器，可以在<code>请求被路由前或者之后对请求进行修改</code>。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190054140.png\" alt=\"image-20230519005411035\" style=\"zoom:33%;\">\n<h5 id=\"工作流程\">工作流程</h5>\n<ul>\n<li>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。</li>\n<li>Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</li>\n<li>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</li>\n<li>Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</li>\n</ul>\n<blockquote>\n<p><em>核心逻辑</em>：==路由转发+执行过滤器链==</p>\n</blockquote>\n<h5 id=\"核心功能\">核心功能</h5>\n<ul>\n<li>\n<p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p>\n</li>\n<li>\n<p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p>\n</li>\n<li>\n<p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p>\n</li>\n</ul>\n<h5 id=\"演示\">演示</h5>\n<h6 id=\"网关：9527\">网关：9527</h6>\n<blockquote>\n<p>提供的需求是： 不想暴露原来的8001端口号，希望在8001外面套一层9527</p>\n</blockquote>\n<p>依赖</p>\n<blockquote>\n<p>注意： 做网关不需要添加  web starter  否则会报错</p>\n<p>即： gateway不需要spring-boot-starter-web依赖，否在会报错；原因是gateway底层使用的是webflux会与web冲突。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--gateway--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--eureka-client--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9527</span> <span class=\"comment\"># 网关端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-gateway</span> <span class=\"comment\"># 服务名称</span></span><br><span class=\"line\"><span class=\"comment\">#=====================新增====================</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span> <span class=\"comment\">#可以为controller中所有的rest接口做路由</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">payment_routh</span> <span class=\"comment\">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:8001</span>          <span class=\"comment\">#匹配后提供服务的路由地址</span></span><br><span class=\"line\">          <span class=\"comment\">#uri + predicate拼接：http://localhost:8001/payment/get/** 就是具体的接口请求路径。</span></span><br><span class=\"line\">          <span class=\"comment\">#其中uri是需要通过localhost:9527 映射的地址，即访问localhost:9527会转发到 localhost:8001</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/payment/get/**</span>         <span class=\"comment\"># 断言，路径相匹配的进行路由</span></span><br><span class=\"line\">          <span class=\"comment\"># 断言http://localhost:8001下面有一个/payment/get/**这样的地址。</span></span><br><span class=\"line\">          <span class=\"comment\">#如果找到了这个地址就返回true，可以用9527端口访问，进行端口的适配；</span></span><br><span class=\"line\">          <span class=\"comment\">#找不到就返回false，不能用9527这个端口适配。</span></span><br><span class=\"line\">          <span class=\"comment\">#随后将不再暴露微服务本来的接口8001，转而使用统一网关9527。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">payment_routh2</span> <span class=\"comment\">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:8001</span>          <span class=\"comment\">#匹配后提供服务的路由地址</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/payment/lb/**</span>         <span class=\"comment\"># 断言，路径相匹配的进行路由</span></span><br><span class=\"line\"><span class=\"comment\">#===================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">cloud-gateway-service</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span> <span class=\"comment\">#服务提供者provider注册进eureka服务列表内</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka # 单机版</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class=\"comment\">#集群版</span></span><br></pre></td></tr></table></figure>\n<p>主启动类(网关不需要业务类)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><code>启动7001、7002、cloud-provider-payment8001、9527</code></p>\n<h3 id=\"拓展-2\">拓展</h3>\n<p>Gateway网关路由有两种配置方式</p>\n<ul>\n<li>\n<p>在yml中配置——上面的方式</p>\n</li>\n<li>\n<p>代码中 注入<code>RouteLocator</code>的<code>Bean</code></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现效果</span></span><br><span class=\"line\"><span class=\"comment\">//通过9527网关访问到百度新闻的网址；http://news.baidu.com/guonei</span></span><br><span class=\"line\"><span class=\"comment\">//在config包下创建一个配置类 路由规则是：我现在访问/guonei，将会转发到http://news.baidu.com/guonei</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GatewayConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置了一个id为path_route_atguigu的路由规则，</span></span><br><span class=\"line\"><span class=\"comment\">     * 当访问地址 http://localhost:9527/guonei时会自动转发到地址：http://news.baidu.com/guonei</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RouteLocator <span class=\"title function_\">customRouteLocator</span><span class=\"params\">(RouteLocatorBuilder routeLocatorBuilder)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构建一个路由器，这个routes相当于yml配置文件中的routes</span></span><br><span class=\"line\">        RouteLocatorBuilder.<span class=\"type\">Builder</span> <span class=\"variable\">routes</span> <span class=\"operator\">=</span> routeLocatorBuilder.routes();</span><br><span class=\"line\">        <span class=\"comment\">//路由器的id是：path_route_atguigu，规则是我现在访问/guonei，将会转发到http://news.baidu.com/guonei</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里的id、path、uri都可以跟yml中的配置对上</span></span><br><span class=\"line\">        <span class=\"comment\">// 通过localhost:9527 映射 http://news.baidu.com</span></span><br><span class=\"line\">        routes.route(<span class=\"string\">&quot;path_route_atguigu&quot;</span>,</span><br><span class=\"line\">                r -&gt; r.path(<span class=\"string\">&quot;/guonei&quot;</span>).uri(<span class=\"string\">&quot;http://news.baidu.com&quot;</span>)).build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> routes.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"进阶\">进阶</h3>\n<ul>\n<li>问题1</li>\n</ul>\n<p>​\t\t上面的配置中：一个路由规则仅仅只对应一个接口方法，即我们将请求地址<code>uri: http://localhost:8001     </code>写死了。</p>\n<p>​\t\t试想一下：在分布式集群的情况下，会有多少个主机，多少个端口，多少个接口？ 难道我们要为每一个接口都定义一个路由规则吗？</p>\n<ul>\n<li>解决：</li>\n</ul>\n<p>​\t\t我们前面用80调用8001和8002中的接口时，只认<code>微服务名。</code></p>\n<ul>\n<li>\n<p>问题2</p>\n<p>但是 我们 访问接口时没有指定哪个端口</p>\n</li>\n<li>\n<p>解决:</p>\n</li>\n</ul>\n<p>​\t\t我们在定义路由规则时也可以通过微服务名实现<code>动态路由和负载均衡</code>。</p>\n<h4 id=\"实现动态路由和负载均衡\">实现动态路由和负载均衡</h4>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190057327.png\" alt=\"image-20230519005743088\" style=\"zoom:33%;\">\n<h6 id=\"修改9527\">修改9527</h6>\n<blockquote>\n<p>默认情况下Gateway会根据<code>注册中心</code>注册的服务列表，以注册中心上<code>微服务名</code>为路径创建动态路由进行转发，<code>从而实现动态路由</code>的功能。</p>\n</blockquote>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--之前已经添加过了--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#spring.cloud.gateway.discovery.locator.enabled:true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在添加uri的时候，开始是lb://微服务名  lb://开头代表从注册中心中获取服务，后面接的就是你需要转发到的服务名称，而且找到的服务实现负载均衡。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">locator:</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">payment_routh</span> <span class=\"comment\">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class=\"line\"><span class=\"comment\">#          uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://cloud-payment-service</span>   <span class=\"comment\">#匹配后提供服务的路由地址</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/payment/get/**</span>         <span class=\"comment\"># 断言，路径相匹配的进行路由</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">payment_routh2</span> <span class=\"comment\">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class=\"line\"><span class=\"comment\">#          uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://cloud-payment-service</span>  <span class=\"comment\">#匹配后提供服务的路由地址</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/payment/lb/**</span>         <span class=\"comment\"># 断言，路径相匹配的进行路由</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span> <span class=\"comment\"># 过滤器</span></span><br><span class=\"line\">        \t<span class=\"bullet\">-</span> <span class=\"string\">AddRequestHeader=Truth,</span> <span class=\"string\">Itcast</span> <span class=\"string\">is</span> <span class=\"string\">freaking</span> <span class=\"string\">awesome!</span> <span class=\"comment\"># 添加请求头 </span></span><br><span class=\"line\">        \t\t<span class=\"comment\">#当前过滤器写在payment_routh2路由下，因此仅仅对访问payment_routh2的请求有效。</span></span><br><span class=\"line\">\t\t <span class=\"attr\">default-filters:</span> <span class=\"comment\"># 默认过滤项</span></span><br><span class=\"line\">     \t\t <span class=\"bullet\">-</span> <span class=\"string\">AddRequestHeader=Truth,</span> <span class=\"string\">Itcast</span> <span class=\"string\">is</span> <span class=\"string\">freaking</span> <span class=\"string\">awesome!</span>  <span class=\"comment\">#对所有的路由都生效</span></span><br><span class=\"line\">\t\t\t</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><code>启动7001、7002、cloud-provider-payment8001、8002、9527</code></p>\n<h4 id=\"Predicate-断言的使用\">Predicate 断言的使用</h4>\n<blockquote>\n<p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>\n<p>例如<code>Path=/user/**</code>是按照路径匹配，这个规则是由</p>\n<p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p>\n<p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>After</td>\n<td>是某个时间点后的请求</td>\n<td>-  After=2037-01-20T17:42:47.789-07:00[America/Denver]</td>\n</tr>\n<tr>\n<td>Before</td>\n<td>是某个时间点之前的请求</td>\n<td>-  Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td>\n</tr>\n<tr>\n<td>Between</td>\n<td>是某两个时间点之前的请求</td>\n<td>-  Between=2037-01-20T17:42:47.789-07:00[America/Denver],  2037-01-21T17:42:47.789-07:00[America/Denver]</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>请求必须包含某些cookie</td>\n<td>- Cookie=chocolate, ch.p</td>\n</tr>\n<tr>\n<td>Header</td>\n<td>请求必须包含某些header</td>\n<td>- Header=X-Request-Id, \\d+</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>请求必须是访问某个host（域名）</td>\n<td>-  Host=<strong>.somehost.org,</strong>.anotherhost.org</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>请求方式必须是指定方式</td>\n<td>- Method=GET,POST</td>\n</tr>\n<tr>\n<td>Path</td>\n<td>请求路径必须符合指定规则</td>\n<td>- Path=/red/{segment},/blue/**</td>\n</tr>\n<tr>\n<td>Query</td>\n<td>请求参数必须包含指定参数</td>\n<td>- Query=name, Jack或者-  Query=name</td>\n</tr>\n<tr>\n<td>RemoteAddr</td>\n<td>请求者的ip必须是指定范围</td>\n<td>- RemoteAddr=192.168.1.1/24</td>\n</tr>\n<tr>\n<td>Weight</td>\n<td>权重处理</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<ul>\n<li>\n<p>After Route Predicate</p>\n<ul>\n<li>匹配改断言时间之后的uri请求</li>\n<li><code>- After=2021-09-28T19:14:51.514+08:00[Asia/Shanghai]</code></li>\n</ul>\n</li>\n<li>\n<p>Before Route Predicate：</p>\n<ul>\n<li>匹配改断言时间之前的uri请求</li>\n</ul>\n</li>\n<li>\n<p>Between Route Predicate：</p>\n<ul>\n<li>匹配改断言时间之间的uri请求</li>\n<li><code>Between=2020-02-02T17:45:06.206+08:00[Asia/Shanghai],2020-03-25T18:59:06.206+08:00[Asia/Shanghai]</code></li>\n</ul>\n</li>\n<li>\n<p>Cookie Route Predicate：</p>\n<ul>\n<li>\n<p><code>- Cookie=chocolate, ch.p</code></p>\n<p>Cookie Route Predicate需要两个参数，一个是Cookie name，一个是正则表达式。</p>\n<p>路由规则会通过获取对应的Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由， 如果没有匹配上则不执行。</p>\n</li>\n<li>\n<p>表示只有发送的请求有cookie，而且里面有username=zzyy这个数据才能访问</p>\n</li>\n<li>\n<p>不带cookie发送请求  <code>curl http://localhost:9527/payment/lb</code> : 只发了一个GET请求，没有带Cookie</p>\n</li>\n<li>\n<p>带cookie发送请求  <code>curl http://localhost:9527/payment/lb --cookie &quot;username=zzyy&quot;</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Header Route Predicate：</p>\n<ul>\n<li><code>- Header=X-Request-Id, \\d+</code>：带着这样的请求头才执行：请求头要有X-Request-Id属性，并且值为整数的正则表达式</li>\n<li><code>curl http://localhost:9527/payment/lb -H &quot;X-Request-Id:123&quot;</code></li>\n</ul>\n</li>\n<li>\n<p>Host Route Predicate：</p>\n<ul>\n<li>\n<p><code>- Host=**.atguigu.com</code>：只有指定主机可以访问，可以指定多个用“，”分隔开。</p>\n<p>测试：</p>\n<ul>\n<li>\n<p><code>curl http://localhost:9527/payment/lb -H &quot;Host: www.atguigu.com&quot;</code>        正确</p>\n</li>\n<li>\n<p><code>curl http://localhost:9527/payment/lb -H &quot;Host: java.atguigu.com&quot;</code>       正确</p>\n</li>\n<li>\n<p><code>curl http://localhost:9527/payment/lb -H &quot;Host: java.atguigu.net&quot;</code>       错误</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Method Route Predicate：</p>\n<ul>\n<li><code>- Method=GET</code> #只有get请求才能访问\n<ul>\n<li>GET请求：<code>curl http://localhost:9527/payment/lb</code></li>\n<li>POST请求：<code>curl -X -POST http://localhost:9527/payment/lb</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Path Route Predicate：</p>\n<ul>\n<li>匹配路径，最开始就是用的这个</li>\n</ul>\n</li>\n<li>\n<p>Query Route Predicate：</p>\n<ul>\n<li><code>- Query=username, \\d+</code>  # 要有参数名username并且值还要是整数才能路由</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Filter\">Filter</h4>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190100057.png\" alt=\"image-20230519010003984\" style=\"zoom:33%;\">\n<blockquote>\n<ul>\n<li>说明</li>\n</ul>\n<p>​\t指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p>\n<ul>\n<li>Filter链：同时满足一系列的过滤链。</li>\n</ul>\n<p>​\t路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用</p>\n<ul>\n<li>\n<p>作用</p>\n</li>\n<li>\n<p>① 对路由的请求或响应做加工处理，比如添加请求头</p>\n</li>\n<li>\n<p>② 配置在路由下的过滤器只对当前路由的请求生效</p>\n</li>\n<li>\n<p>defaultFilters的作用是什么？</p>\n</li>\n<li>\n<p>① 对所有路由都生效的过滤器</p>\n</li>\n<li>\n<p>生命周期</p>\n</li>\n</ul>\n<p><strong>pre  在业务逻辑之前</strong></p>\n<p><strong>post  在业务逻辑之后</strong></p>\n<ul>\n<li><strong>种类：</strong></li>\n</ul>\n<p><strong>单一的：GatewayFilter</strong></p>\n<p><strong>全局的：GlobalFilter</strong></p>\n</blockquote>\n<h6 id=\"自定义全局过滤器\">自定义全局过滤器</h6>\n<blockquote>\n<p>两个主要接口介绍：implements      <code>  GlobalFilter, Ordered</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogGateWayFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GlobalFilter</span>, Ordered &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title function_\">filter</span><span class=\"params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;*********************come in MyLogGateWayFilter:  &quot;</span>+ <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"comment\">//取出请求参数的uname对应的值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uname</span> <span class=\"operator\">=</span> exchange.getRequest().getQueryParams().getFirst(<span class=\"string\">&quot;uname&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如果uanme为空，就直接过滤掉，不走路由</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(uname == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;************* 用户名为Null 非法用户 o(╥﹏╥)o&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//判断该请求不通过时：给一个回应，返回</span></span><br><span class=\"line\">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> exchange.getResponse().setComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//反之，调用下一个过滤器，也就是放行：在该环节判断通过的exchange放行，交给下一个filter判断</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.filter(exchange);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个过滤器的加载顺序，数字越小，优先级越高</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置这个过滤器在Filter链中的加载顺序。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"请求头过滤器\">请求头过滤器</h5>\n<blockquote>\n<p><code>以AddRequestHeader</code> 为例</p>\n</blockquote>\n<h6 id=\"演示-2\">演示</h6>\n<blockquote>\n<p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：<code>Truth=itcast is freaking awesome!</code></p>\n</blockquote>\n<p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">user-service</span> </span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">lb://userservice</span> </span><br><span class=\"line\">        <span class=\"attr\">predicates:</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Path=/user/**</span> </span><br><span class=\"line\">        <span class=\"attr\">filters:</span> <span class=\"comment\"># 过滤器</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">AddRequestHeader=Truth,</span> <span class=\"string\">Itcast</span> <span class=\"string\">is</span> <span class=\"string\">freaking</span> <span class=\"string\">awesome!</span> <span class=\"comment\"># 添加请求头</span></span><br></pre></td></tr></table></figure>\n<p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p>\n<h5 id=\"默认过滤器\">默认过滤器</h5>\n<p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">user-service</span> </span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">lb://userservice</span> </span><br><span class=\"line\">        <span class=\"attr\">predicates:</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Path=/user/**</span></span><br><span class=\"line\">      <span class=\"attr\">default-filters:</span> <span class=\"comment\"># 默认过滤项</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">AddRequestHeader=Truth,</span> <span class=\"string\">Itcast</span> <span class=\"string\">is</span> <span class=\"string\">freaking</span> <span class=\"string\">awesome!</span> </span><br></pre></td></tr></table></figure>\n<h5 id=\"全局过滤器详解\">全局过滤器详解</h5>\n<p>作用：</p>\n<p>​\t处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。</p>\n<p>区别在于</p>\n<p>​\t<code>GatewayFilter</code>通过配置定义，处理逻辑是固定的；</p>\n<p>​\t<code>GlobalFilter</code>的逻辑需要自己写代码实现。</p>\n<p>定义方式是实现<code>GlobalFilter</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">GlobalFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  处理当前请求，有必要的话通过&#123;<span class=\"doctag\">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Mono&lt;Void&gt; <span class=\"title function_\">filter</span><span class=\"params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"自定义\">自定义</h6>\n<p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件</p>\n<ul>\n<li>\n<p>参数中是否有authorization，</p>\n</li>\n<li>\n<p>authorization参数值是否为admin</p>\n</li>\n</ul>\n<p>如果同时满足则放行，否则拦截</p>\n<p>实现：</p>\n<p>在gateway中定义一个过滤器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.gateway.filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.annotation.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Mono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Order(-1)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthorizeFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GlobalFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title function_\">filter</span><span class=\"params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class=\"line\">        <span class=\"comment\">// 2.获取authorization参数</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">auth</span> <span class=\"operator\">=</span> params.getFirst(<span class=\"string\">&quot;authorization&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 3.校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 放行</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.filter(exchange);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4.拦截</span></span><br><span class=\"line\">        <span class=\"comment\">// 4.1.禁止访问，设置状态码</span></span><br><span class=\"line\">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class=\"line\">        <span class=\"comment\">// 4.2.结束处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> exchange.getResponse().setComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"过滤器执行顺序\">过滤器执行顺序</h5>\n<blockquote>\n<p>请求进入网关会碰到三类过滤器：<code>当前路由的过滤器、DefaultFilter、GlobalFilter</code></p>\n<p>请求路由后，会将<code>当前路由过滤器</code>和<code>DefaultFilter、GlobalFilter</code>，<code>合并</code>到一个过滤器链（集合）中，排序后依次执行每个过滤器：<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190108139.png\" alt=\"image-20230519010818062\" style=\"zoom:33%;\"></p>\n</blockquote>\n<h6 id=\"排序的规则是什么呢？\">排序的规则是什么呢？</h6>\n<blockquote>\n<ul>\n<li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li>\n<li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li>\n<li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li>\n<li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li>\n</ul>\n</blockquote>\n<h5 id=\"限流过滤器\">限流过滤器</h5>\n<p>限流：对应用服务器的请求做限制，避免因过多请求而导致服务器过载甚至宕机。限流算法常见的包括两种：</p>\n<ul>\n<li>计数器算法，又包括窗口计数器算法、滑动窗口计数器算法</li>\n<li>漏桶算法(Leaky Bucket)</li>\n<li>令牌桶算法（Token Bucket）</li>\n</ul>\n<h6 id=\"限流过滤器-计数器算法\">限流过滤器-计数器算法</h6>\n<p>固定窗口计数器算法概念如下：</p>\n<ul>\n<li>将时间划分为多个窗口；</li>\n<li>在每个窗口内每有一次请求就将计数器加一，当时间到达下一个窗口时，计数器重置。</li>\n<li>如果计数器超过了限制数量，则本窗口内所有的请求都被丢弃。</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190119224.png\" alt=\"image-20230519011908043\" style=\"zoom:33%;\">\n<h6 id=\"限流过滤器-漏桶算法\">限流过滤器-漏桶算法</h6>\n<p>漏桶算法说明：</p>\n<ul>\n<li>将每个请求视作&quot;水滴&quot;放入&quot;漏桶&quot;进行存储；</li>\n<li>&quot;漏桶&quot;以固定速率向外&quot;漏&quot;出请求来执行，如果&quot;漏桶&quot;空了则停止&quot;漏水”；</li>\n<li>如果&quot;漏桶&quot;满了则多余的&quot;水滴&quot;会被直接丢弃。</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190119457.png\" alt=\"image-20230519011948289\" style=\"zoom:33%;\">\n<h6 id=\"限流过滤器-令牌桶算法\">限流过滤器-令牌桶算法</h6>\n<p>漏桶算法说明：</p>\n<ul>\n<li>以固定的速率生成令牌，存入令牌桶中，如果令牌桶满了以后，多余令牌丢弃</li>\n<li>请求进入后，必须先尝试从桶中获取令牌，获取到令牌后才可以被处理</li>\n<li>如果令牌桶中没有令牌，则请求等待或丢弃</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190120863.png\" alt=\"image-20230519012051690\" style=\"zoom:33%;\">\n<blockquote>\n<ul>\n<li>\n<p>限流有什么作用？</p>\n</li>\n<li>\n<p>限流是保护服务器，避免因过多请求而导致服务器过载甚至宕机</p>\n</li>\n<li>\n<p>限流算法：</p>\n</li>\n<li>\n<p>计数器算法</p>\n</li>\n<li>\n<p>漏桶算法</p>\n</li>\n<li>\n<p>令牌桶算法</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"跨域\">==跨域==</h3>\n<blockquote>\n<p>跨域[<a href=\"https://www.ruanyifeng.com/blog/2016/04/cors.html\">https://www.ruanyifeng.com/blog/2016/04/cors.html</a>]：域名不一致就是跨域，主要包括：</p>\n<ul>\n<li>\n<p>域名不同： <a href=\"http://www.taobao.com\">www.taobao.com</a> 和 <a href=\"http://www.taobao.org\">www.taobao.org</a> 和 <a href=\"http://www.jd.com\">www.jd.com</a> 和 <a href=\"http://miaosha.jd.com\">miaosha.jd.com</a></p>\n</li>\n<li>\n<p>域名相同，端口不同：localhost:8080和localhost8081</p>\n</li>\n</ul>\n<p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>\n</blockquote>\n<h5 id=\"问题标识\">问题标识</h5>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190115213.png\" alt></p>\n<h5 id=\"问题解决\">问题解决</h5>\n<p>在gateway服务的application.yml文件中，添加下面的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"comment\"># ...</span></span><br><span class=\"line\">      <span class=\"attr\">globalcors:</span> <span class=\"comment\"># 全局的跨域处理</span></span><br><span class=\"line\">        <span class=\"attr\">add-to-simple-url-handler-mapping:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 解决options请求被拦截问题</span></span><br><span class=\"line\">        <span class=\"attr\">corsConfigurations:</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;[/**]&#x27;</span><span class=\"string\">:</span></span><br><span class=\"line\">            <span class=\"attr\">allowedOrigins:</span> <span class=\"comment\"># 允许哪些网站的跨域请求 </span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">&quot;http://localhost:8090&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">allowedMethods:</span> <span class=\"comment\"># 允许的跨域ajax的请求方式</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">&quot;GET&quot;</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">&quot;POST&quot;</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">&quot;DELETE&quot;</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">&quot;PUT&quot;</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">&quot;OPTIONS&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">allowedHeaders:</span> <span class=\"string\">&quot;*&quot;</span> <span class=\"comment\"># 允许在请求中携带的头信息</span></span><br><span class=\"line\">            <span class=\"attr\">allowCredentials:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 是否允许携带cookie</span></span><br><span class=\"line\">            <span class=\"attr\">maxAge:</span> <span class=\"number\">360000</span> <span class=\"comment\"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"服务配置\">服务配置</h2>\n<h3 id=\"服务配置—Config分布式配置中心\">服务配置—Config分布式配置中心</h3>\n<blockquote>\n<p>问题引入：</p>\n<ul>\n<li>\n<p>我们的模块越来越多，每个模块都要写一个<code>application.yml</code>。 我们想象这样一种情况： 10个微服务都要连接同一个数据库，我们在这10个微服务都配置了连接数据库yml。 当这个数据库发生了变化，怎么办？ 修改10个yml。 如果是100个微服务都连接这个数据库呢？ 东西多了，就要有统一个管理。 上线后，发布版本了。有生产环境，有测试环境，预发布版本环境。 那么就是3套的配置的管理系统和业务要求，一个配置文件不能同时满足三种环境。</p>\n</li>\n<li>\n<p>简单说就是： 一个模块一个yml太多了，上线之后多个环境又要多个yml配置就更多了。</p>\n</li>\n</ul>\n<p>解决：</p>\n<p>​\t集中式的管理这些配置</p>\n</blockquote>\n<h5 id=\"简介\">简介</h5>\n<p>Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置</p>\n<p><code>统一共用的放在配置中心，各自特有的再单独配置</code></p>\n<p>SpringCloud Config 分为<code>服务端</code>和<code>客户端</code>两部分。</p>\n<ul>\n<li>\n<p>服务端也称为分布式配置中心，他是一个独立的微服务应用，<code>用来连接配置服务器并为客户端提供获取配置信息</code>，加密/解密等信息访问接口。</p>\n</li>\n<li>\n<p>客户端则是通过<code>指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息</code>，</p>\n<p>配置服务器默认采用git来存储配置信息，这样既有助于对环境配置进行版本管理，并且可以通过git客户端来方便的管理和访问配置内容。</p>\n</li>\n</ul>\n<p>作用</p>\n<ul>\n<li>集中管理配置文件</li>\n<li>不同环境不同配置，<code>动态化的配置更新</code>，分环境部署比如 dev/test/prod/beta/release</li>\n<li><code>运行期间动态调整配置</code>，不再需要在每个服务部署的机器上编写配置文件，服务回响  配置中心统一拉取配置自己的信息。</li>\n<li><strong>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置。</strong></li>\n<li><strong>将配置信息以Rest接口的形式暴露。</strong></li>\n<li>与GitHub整合配置，由于SpringCloud Config默认使用Git来存储配置文件，虽然也支持SVN。但是最推荐的还是 Git，而且使用的是http/https访问的形式。</li>\n</ul>\n<h5 id=\"Config服务端—配置中心模块-center-3344\">Config服务端—配置中心模块(center-3344)</h5>\n<p>IDEA整合github   并在  github上 新建仓库 和 文件</p>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--springCloud Config Server--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>application.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3344</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">cloud-config-center</span> <span class=\"comment\">#注册进Eureka服务器的微服务名</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"comment\">#GitHub上面的git仓库名字 这里可以写https地址跟ssh地址，https地址需要配置username和password</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://github.com/YangruiY/springlcoud-config.git</span>  <span class=\"comment\">#uri就是我们远程仓库的地址</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">YangruiY</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">ry699397</span></span><br><span class=\"line\">          <span class=\"attr\">default-label:</span> <span class=\"string\">main</span></span><br><span class=\"line\">          <span class=\"attr\">force-pull:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"comment\">####搜索目录</span></span><br><span class=\"line\">          <span class=\"attr\">search-paths:</span>  <span class=\"comment\">#search-paths表示远程仓库下有一个叫做springcloud-config的</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">springcloud-config</span></span><br><span class=\"line\">      <span class=\"comment\">####读取分支</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">main</span>   <span class=\"comment\"># 以前是master  label则表示读取master分支里面的内容（2020-10月开始master分支变为main分支）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务注册到eureka地址</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://localhost:7001/eureka #单机版</span></span><br><span class=\"line\">    <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka,http://localhost:7002/eureka</span> <span class=\"comment\">#集群版</span></span><br></pre></td></tr></table></figure>\n<p>主启动(无业务类)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span>   <span class=\"comment\">//开启SpringCloud的</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>说明</p>\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/22423156/1634219331433-52e9e86d-a8b5-4161-a54a-32b945870eb9.png\" alt=\"image.png\" style=\"zoom:50%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305141614252.png\" alt=\"image.png\" style=\"zoom: 50%;\">\n<h5 id=\"配置客户端-client-3355\">配置客户端(client-3355)</h5>\n<p>依赖</p>\n<blockquote>\n<p>3344是server端所以依赖<code>spring-cloud-starter-config-server</code>后面有一个server，而3355定位是客户端，所以只有<code>spring-cloud-starter-config</code></p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--这里就是客户端的SpringCloud config 因为是客户端所以没有server--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">&lt;!--web/actuator这两个一般一起使用，写在一起--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>bootstrap.yml</p>\n<blockquote>\n<p>为了配置文件的加载顺序和分级管理，我们这里使用bootstrap.yml</p>\n<ul>\n<li><code>application.yml</code>是<code>用户级</code>的资源配置项</li>\n<li><code>boostrap.yml</code>是<code>系统级</code>的，<code>优先级更高</code></li>\n</ul>\n<p>Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的<code>Application Context</code>的父上下文</p>\n<p>初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3355</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-client</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"comment\">#Config客户端配置</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">main</span> <span class=\"comment\">#分支名称</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">config</span> <span class=\"comment\">#配置文件名称</span></span><br><span class=\"line\">      <span class=\"attr\">profile:</span> <span class=\"string\">dev</span> <span class=\"comment\">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:3344</span> <span class=\"comment\">#配置中心地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务注册到eureka地址</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142009548.png\" alt=\"image-20230514200908489\" style=\"zoom:33%;\">\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>测试发现           <code>配置中心和客户端都注册进了eureka   并且  成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息</code></p>\n<hr>\n<blockquote>\n<ul>\n<li>问题：分布式配置的<code>动态刷新</code>的问题</li>\n</ul>\n<p>​\t就是说：修改配置文件之后 ，刷新3344，发现ConfigServer配置中心立刻响应，但是   刷新3355，发现ConfigClient客户端没有任何响应</p>\n<ul>\n<li>解决：Config客户端之动态刷新</li>\n</ul>\n</blockquote>\n<h5 id=\"解决问题-修改的-客户端（3355）\">解决问题   修改的 客户端（3355）</h5>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--web/actuator这两个一般一起使用，写在一起--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暴露监控端点</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>加一个<code>@RefreshScope</code>注解</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigClientController</span> &#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外</p>\n<p>发送一下POST请求，刷新一下3355 必须是Post请求<code>curl -X POST &quot;http://localhost:3355/actuator/refresh&quot;</code></p>\n<hr>\n<p>问题再探：</p>\n<ul>\n<li>在微服务多的情况下，每个微服务都需要执行一个post请求，手动刷新？</li>\n<li>可否广播，一次通知，处处生效？   大范围的实现自动刷新</li>\n<li>可能有这种情况：100台机器，有得不要求实时刷新。我们想实现该刷新的刷新，不想刷新的不刷新，怎么实现？</li>\n</ul>\n<p>解决方法——  [Bus总线][↓]</p>\n<h3 id=\"拓展-3\">拓展</h3>\n<h5 id=\"配置文件的规则\">配置文件的规则</h5>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305141615482.png\" alt=\"image-20230514161523422\" style=\"zoom:53%;\">\n<h6 id=\"label-application-profile-yml\">/{label}/{application}-{profile}.yml</h6>\n<blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305141615805.png\" alt=\"image-20230514161558775\" style=\"zoom:33%;\">\n</blockquote>\n<h6 id=\"application-profile-yml\">/{application}-{profile}.yml</h6>\n<blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305141617942.png\" alt=\"image-20230514161710902\" style=\"zoom:33%;\">\n<p>这里需要在yml文件中设置<code>spring.cloud.config.server.git.default-label=main</code>（github更新后master分支都成了main分支）</p>\n</blockquote>\n<h6 id=\"application-profile-label\">/{application}/{profile}[/{label}]</h6>\n<blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305141618691.png\" alt=\"image-20230514161805664\" style=\"zoom:33%;\">\n</blockquote>\n<h2 id=\"服务总线\">服务总线</h2>\n<blockquote>\n<p>主要目标：</p>\n<ul>\n<li>GitHub上的配置文件修改后，可否<code>广播</code>一下，<code>不用每个微服务都通过发送POST请求</code>动态刷新。</li>\n<li><code>可不可以该刷新的刷新，不想刷新的不刷新</code>。</li>\n</ul>\n<p>准备：</p>\n<ul>\n<li>RabbitMQ</li>\n</ul>\n<p>作用:</p>\n<ul>\n<li>能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>之前是推送给  <code> Config Client</code>            现在是推送给<code>Config Server</code>的</li>\n</ul>\n<p>什么是总线</p>\n<ul>\n<li>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。</li>\n<li><code>由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线</code>。</li>\n<li>在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</li>\n</ul>\n<p>基本原理：</p>\n<ul>\n<li>ConfigClient实例都监听<code>MQ中</code>同一个<code>topic</code>(默认是springCloudBus)。当一个服务<code>刷新数据</code>的时候，它<code>会把这个信息放入到Topic中</code>，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</li>\n</ul>\n</blockquote>\n<h3 id=\"Bus动态刷新全局广播\">Bus动态刷新<code>全局广播</code></h3>\n<blockquote>\n<p>选择方案： 通知总线，总线再通知所有客户端</p>\n</blockquote>\n<h6 id=\"client-3366\">client-3366</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--这里就是客户端的SpringCloud config 因为是客户端所以没有server--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--web/actuator这两个一般一起使用，写在一起--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>bootstrap.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3366</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-client</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"comment\">#Config客户端配置</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">main</span> <span class=\"comment\">#分支名称</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">config</span> <span class=\"comment\">#配置文件名称</span></span><br><span class=\"line\">      <span class=\"attr\">profile:</span> <span class=\"string\">dev</span> <span class=\"comment\">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:3344</span> <span class=\"comment\">#配置中心地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务注册到eureka地址</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka,http://localhost:7002/eureka</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露监控端点</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>@Value(“${server.port}”)从配置文件中取前缀为<strong>server.port</strong>的值：</p>\n<p>注意这个模块关联了两个yml 一个是我们<strong>本地配置的bootstrap.yml</strong>，另一个是通过bootstrap.yml关联到3344，再关联到<strong>GitHub上的config-text.yml</strong>。所以@Value(“${server.port}”)从bootstrap.yml取到了server.port的值；</p>\n<p>@Value(“${<a href=\"http://config.info\">config.info</a>}”)从关联的<strong>config-{profile}.yml</strong>取到了<strong>info</strong>的值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigClientController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String serverPort;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">configInfo</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;serverPort: &quot;</span>+serverPort+<span class=\"string\">&quot;\\t\\n\\n configInfo: &quot;</span>+configInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"center-3344\">center-3344</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>applicationl.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3344</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">cloud-config-center</span> <span class=\"comment\">#注册进Eureka服务器的微服务名</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://github.com/Bear-Lx/springcloud-config.git</span>  <span class=\"comment\">#GitHub上面的git仓库名字</span></span><br><span class=\"line\"><span class=\"comment\">#          uri: git@github.com:Bear-Lx/springcloud-config.git</span></span><br><span class=\"line\">          <span class=\"comment\"># uri 这里可以写https地址跟ssh地址，https地址需要配置username和password</span></span><br><span class=\"line\">          <span class=\"comment\">####搜索目录</span></span><br><span class=\"line\">          <span class=\"attr\">search-paths:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">springcloud-config</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">Bear-Lx</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">pangtou10086..</span></span><br><span class=\"line\">          <span class=\"attr\">default-label:</span> <span class=\"string\">main</span></span><br><span class=\"line\"><span class=\"comment\">#          skip-ssl-validation: true    #</span></span><br><span class=\"line\">      <span class=\"comment\">####读取分支</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">main</span>   <span class=\"comment\"># 以前是master</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#rabbitmq相关配置</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##rabbitmq相关配置,暴露bus刷新配置的端点</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span> <span class=\"comment\">#暴露bus刷新配置的端点</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;bus-refresh&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务注册到eureka地址</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://localhost:7001/eureka #单机版</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka,http://localhost:7002/eureka</span> <span class=\"comment\">#集群版</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"client-3355\">client-3355</h6>\n<p>依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动7001、7002、3344、3355、3366</code></p>\n<p>可以看到的效果就是：<code>修改GitHub上的配置文件，因为3355和3366都和config-dev.yml绑定，所以我们修改该配置文件之后   </code></p>\n<p><code>  给3344Config-Server发送Post请求，刷新3344(Serer 总线)     curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</code></p>\n<blockquote>\n<p>一处刷新，处处生效！</p>\n</blockquote>\n<h3 id=\"Bus动态刷新定点通知\">Bus动态刷新定点通知</h3>\n<blockquote>\n<p>只通知指定的微服务。比如：只通知3355，不通知3366，指定具体某一个实例生效，而不是全部</p>\n<p>公式：<code>http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;</code></p>\n<p>/bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例</p>\n</blockquote>\n<p>测试：</p>\n<p>我们这里以刷新运行在3355端口上的config-client为例，只通知3355，不通知3366</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST <span class=\"string\">&quot;http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到：<code>3355刷新，3366未刷新</code></p>\n<h2 id=\"Stream消息驱动\">Stream消息驱动</h2>\n<blockquote>\n<p>引入的目的：</p>\n<p>​\t各种不同的MQ之间存在很多不同的实现细节，引入<code>Stream消息驱动</code> 的目的就是  我们不在关注  MQ 的具体实现细节  ，只需要一种<code>绑定</code>的方式，便可以在各种MQ之间进行自动切换</p>\n<p>是什么：</p>\n<p>​\t是一个构建消息驱动微服务的框架</p>\n<p>工作流程</p>\n<p>​\t应用程序通过 <code>inputs </code>或者 <code>outputs </code>来与<code> Spring Cloud Stream</code>中<strong>binder对象</strong>交互。</p>\n<p>​\t通过我们<code>配置</code>来binding(绑定) ，而 Spring Cloud Stream 的 <code>binder对象</code>负责<code>与消息中间件交互</code>。</p>\n<p>​\t所以，我们只需要搞清楚如何与 Spring Cloud Stream 交互就可以方便使用消息驱动的方式。</p>\n<p>​\t通过使用<code>Spring Integration</code>来<code>连接消息代理中间件</code>以<code>实现消息事件驱动</code>。</p>\n<p>​\t<code>Spring Cloud Stream </code>为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了<code>发布-订阅、消费组、分区</code>的<code>三个</code>核心概念</p>\n<p>核心概念</p>\n<p>​\t<strong>绑定器对象：Binder Implementations</strong>       就是靠它屏蔽了我们底层的MQ的差异。</p>\n<p>Binder</p>\n<p>​\t<strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p>\n<p>​\tBinder可以生成Binding，Binding用来绑定消息容器的生产者和消费者，它有两种类型，INPUT和OUTPUT，</p>\n<p>​\t<strong>input对应于消费者（消费者从Stream接收消息），output对应于生产者（生产者从Stream发布消息）。</strong></p>\n</blockquote>\n<h3 id=\"入门案例\">入门案例</h3>\n<h6 id=\"生产者（rabbitmq-8801）\">生产者（rabbitmq-8801）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--rabbitMQ--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--eureka client--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--web/actuator这两个一般一起使用，写在一起--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8801</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-stream-provider</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">stream:</span></span><br><span class=\"line\">      <span class=\"attr\">binders:</span> <span class=\"comment\"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class=\"line\">        <span class=\"attr\">defaultRabbit:</span> <span class=\"comment\"># 表示定义的名称，用于于binding整合</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">rabbit</span> <span class=\"comment\"># 消息组件类型</span></span><br><span class=\"line\">          <span class=\"attr\">environment:</span> <span class=\"comment\"># 设置rabbitmq的相关的环境配置</span></span><br><span class=\"line\">            <span class=\"attr\">spring:</span></span><br><span class=\"line\">              <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">                <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">                <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">                <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">                <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">      <span class=\"attr\">bindings:</span> <span class=\"comment\"># 服务的整合处理</span></span><br><span class=\"line\">        <span class=\"attr\">output:</span> <span class=\"comment\"># 这个名字是一个通道的名称</span></span><br><span class=\"line\">          <span class=\"attr\">destination:</span> <span class=\"string\">studyExchange</span> <span class=\"comment\"># 表示要使用的Exchange名称定义</span></span><br><span class=\"line\">          <span class=\"attr\">content-type:</span> <span class=\"string\">application/json</span> <span class=\"comment\"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class=\"line\">          <span class=\"attr\">binder:</span> <span class=\"string\">defaultRabbit</span> <span class=\"comment\"># 设置要绑定的消息服务的具体设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span> <span class=\"comment\"># 客户端进行Eureka注册的配置</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka,http://localhost:7002/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">lease-renewal-interval-in-seconds:</span> <span class=\"number\">2</span> <span class=\"comment\"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class=\"line\">    <span class=\"attr\">lease-expiration-duration-in-seconds:</span> <span class=\"number\">5</span> <span class=\"comment\"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">send-8801.com</span>  <span class=\"comment\"># 在信息列表时显示主机名称</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span>     <span class=\"comment\"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>此处的代码是 <code>基于SpringCloudStream，然后做output指定通道，开启交互绑定器，再和</code>MQ交互，而不是传统的controller调用service。</p>\n</blockquote>\n<ul>\n<li>service</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IMessageProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">()</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Impl</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以理解为定义消息的发送管道Source对应output(生产者)，Sink对应input(消费者)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableBinding(Source.class)</span> <span class=\"comment\">//定义消息的推送管道</span></span><br><span class=\"line\"><span class=\"comment\">//@Service：这里不需要了，这里不是传统的controller调用service。这个service是和rabbitMQ打交道的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageProviderImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IMessageProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不再是 Dao 了</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MessageChannel output; <span class=\"comment\">// 消息发送管道</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">serial</span> <span class=\"operator\">=</span> UUID.randomUUID().toString();</span><br><span class=\"line\">        <span class=\"comment\">//官网得知这么写</span></span><br><span class=\"line\">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****serial: &quot;</span>+serial);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controlller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendMessageController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IMessageProvider messageProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/sendMessage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> messageProvider.send();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动7001、7002、8801</code></p>\n<h6 id=\"消费者-rabbitmq-8802\">消费者(rabbitmq-8802)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--rabbitMQ--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--eureka client--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--web/actuator这两个一般一起使用，写在一起--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8802</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-stream-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">stream:</span></span><br><span class=\"line\">      <span class=\"attr\">binders:</span> <span class=\"comment\"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class=\"line\">        <span class=\"attr\">defaultRabbit:</span> <span class=\"comment\"># 表示定义的名称，用于于binding整合</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">rabbit</span> <span class=\"comment\"># 消息组件类型</span></span><br><span class=\"line\">          <span class=\"attr\">environment:</span> <span class=\"comment\"># 设置rabbitmq的相关的环境配置</span></span><br><span class=\"line\">            <span class=\"attr\">spring:</span></span><br><span class=\"line\">              <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">                <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">                <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">                <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">                <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">      <span class=\"attr\">bindings:</span> <span class=\"comment\"># 服务的整合处理 </span></span><br><span class=\"line\">        <span class=\"attr\">input:</span> <span class=\"comment\"># 这个名字是一个通道的名称  </span></span><br><span class=\"line\">          <span class=\"attr\">destination:</span> <span class=\"string\">studyExchange</span> <span class=\"comment\"># 表示要使用的Exchange名称定义</span></span><br><span class=\"line\">          <span class=\"attr\">content-type:</span> <span class=\"string\">application/json</span> <span class=\"comment\"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class=\"line\">          <span class=\"attr\">binder:</span> &#123; <span class=\"string\">defaultRabbit</span> &#125; <span class=\"comment\"># 设置要绑定的消息服务的具体设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span> <span class=\"comment\"># 客户端进行Eureka注册的配置</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka，http://localhost:7002/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">lease-renewal-interval-in-seconds:</span> <span class=\"number\">2</span> <span class=\"comment\"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class=\"line\">    <span class=\"attr\">lease-expiration-duration-in-seconds:</span> <span class=\"number\">5</span> <span class=\"comment\"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">receive-8802.com</span>  <span class=\"comment\"># 在信息列表时显示主机名称</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span>     <span class=\"comment\"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>此处的代码是 <code>基于SpringCloudStream，然后做output指定通道，开启交互绑定器，再和</code>MQ交互，而不是传统的controller调用service。</p>\n</blockquote>\n<p>controlller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@EnableBinding(Sink.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveMessageListenerController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String serverPort;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@StreamListener(Sink.INPUT)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">input</span><span class=\"params\">(Message&lt;String&gt; message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1号,-----&gt;接受到的消息: &quot;</span>+message.getPayload()+<span class=\"string\">&quot;\\t  port: &quot;</span>+serverPort);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动7001、7002、8801、8802</code></p>\n<h3 id=\"分组消费与持久化\">分组消费与持久化</h3>\n<h6 id=\"消费者（rabbitmq-8003）\">消费者（rabbitmq-8003）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--rabbitMQ--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--eureka client--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--web/actuator这两个一般一起使用，写在一起--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8803</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-stream-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">stream:</span></span><br><span class=\"line\">      <span class=\"attr\">binders:</span> <span class=\"comment\"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class=\"line\">        <span class=\"attr\">defaultRabbit:</span> <span class=\"comment\"># 表示定义的名称，用于于binding整合</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">rabbit</span> <span class=\"comment\"># 消息组件类型</span></span><br><span class=\"line\">          <span class=\"attr\">environment:</span> <span class=\"comment\"># 设置rabbitmq的相关的环境配置</span></span><br><span class=\"line\">            <span class=\"attr\">spring:</span></span><br><span class=\"line\">              <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">                <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">                <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">                <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">                <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">      <span class=\"attr\">bindings:</span> <span class=\"comment\"># 服务的整合处理</span></span><br><span class=\"line\">        <span class=\"attr\">input:</span> <span class=\"comment\"># 这个名字是一个通道的名称</span></span><br><span class=\"line\">          <span class=\"attr\">destination:</span> <span class=\"string\">studyExchange</span> <span class=\"comment\"># 表示要使用的Exchange名称定义</span></span><br><span class=\"line\">          <span class=\"attr\">content-type:</span> <span class=\"string\">application/json</span> <span class=\"comment\"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class=\"line\">          <span class=\"attr\">binder:</span> &#123; <span class=\"string\">defaultRabbit</span> &#125; <span class=\"comment\"># 设置要绑定的消息服务的具体设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span> <span class=\"comment\"># 客户端进行Eureka注册的配置</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka,http://localhost:7002/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">lease-renewal-interval-in-seconds:</span> <span class=\"number\">2</span> <span class=\"comment\"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class=\"line\">    <span class=\"attr\">lease-expiration-duration-in-seconds:</span> <span class=\"number\">5</span> <span class=\"comment\"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">receive-8803.com</span>  <span class=\"comment\"># 在信息列表时显示主机名称</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span>     <span class=\"comment\"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveMessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String serverPort;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@StreamListener(Sink.INPUT)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">input</span><span class=\"params\">(Message&lt;String&gt; message)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2号，-------&gt;接收到的消息：&quot;</span> + message.getPayload()+<span class=\"string\">&quot;\\t port: &quot;</span>+serverPort);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动7001、7002、8801（消息生产）、8802（消息消费）、8803（消息消费）</code></p>\n<h3 id=\"问题与解决\">问题与解决</h3>\n<hr>\n<ul>\n<li>问题：重复消费问题</li>\n<li>解决: 将消息进行分组,<code>避免重复消费   做法   就是分配 消费者 都 为一个组</code></li>\n</ul>\n<blockquote>\n<p>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。</p>\n<p>不同的组是可以全面消费的（重复消费），同一个组内的多个消费者会发生竞争关系，只有其中一个可以消费。</p>\n</blockquote>\n<ul>\n<li>实施：</li>\n</ul>\n<p>yml（8002、8003 都类似 的 这样添加<code>group: 组名 </code>就可以了）</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8802</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-stream-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">      <span class=\"attr\">stream:</span></span><br><span class=\"line\">        <span class=\"attr\">binders:</span> <span class=\"comment\"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class=\"line\">          <span class=\"attr\">defaultRabbit:</span> <span class=\"comment\"># 表示定义的名称，用于于binding整合</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">rabbit</span> <span class=\"comment\"># 消息组件类型</span></span><br><span class=\"line\">            <span class=\"attr\">environment:</span> <span class=\"comment\"># 设置rabbitmq的相关的环境配置</span></span><br><span class=\"line\">              <span class=\"attr\">spring:</span></span><br><span class=\"line\">                <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">                  <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">                  <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">                  <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">                  <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">        <span class=\"attr\">bindings:</span> <span class=\"comment\"># 服务的整合处理</span></span><br><span class=\"line\">          <span class=\"attr\">input:</span> <span class=\"comment\"># 这个名字是一个通道的名称</span></span><br><span class=\"line\">            <span class=\"attr\">destination:</span> <span class=\"string\">studyExchange</span> <span class=\"comment\"># 表示要使用的Exchange名称定义</span></span><br><span class=\"line\">            <span class=\"attr\">content-type:</span> <span class=\"string\">application/json</span> <span class=\"comment\"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class=\"line\">            <span class=\"attr\">binder:</span> &#123; <span class=\"string\">defaultRabbit</span> &#125; <span class=\"comment\"># 设置要绑定的消息服务的具体设置</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">atguiguA</span>      <span class=\"comment\"># 8003类似添加这一行 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span> <span class=\"comment\"># 客户端进行Eureka注册的配置</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">lease-renewal-interval-in-seconds:</span> <span class=\"number\">2</span> <span class=\"comment\"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class=\"line\">    <span class=\"attr\">lease-expiration-duration-in-seconds:</span> <span class=\"number\">5</span> <span class=\"comment\"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">receive-8802.com</span>  <span class=\"comment\"># 在信息列表时显示主机名称</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span>     <span class=\"comment\"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"消息持久化\">消息持久化</h3>\n<blockquote>\n<p>==说明==： 加了group之后是<code>自动</code>实现消息持久化的</p>\n</blockquote>\n<p>测试：</p>\n<p>先 停止8802/8803并去除掉8802的分组group: atguiguA（8803的分组group: atguiguA没有去掉）</p>\n<p>随后 8801先发送4条消息到rabbitmq</p>\n<p>之后 先启动8802，无分组属性配置，后台没有打出来消息</p>\n<p>再之后 再启动8803，有分组属性配置，后台打印出来了MQ上的消息</p>\n<h2 id=\"Sleuth-分布式请求链路跟踪\">Sleuth 分布式请求链路跟踪</h2>\n<blockquote>\n<p>问题</p>\n<p>​\t微服务框架中，一个客户端发起的请求在后端系统中会经过多次不同的服务节点调用来协同产生最后的请求结果，每一个前段 请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p>\n<p>解决</p>\n<p>​\tSleuth提供了一套完整的<code>服务跟踪的解决方案</code>，在分布式系统中提供 追踪解决方案并且兼容支持了<code>zipkin(9411端口)</code></p>\n<p>sleuth 核心概念</p>\n<ul>\n<li><code>Trace</code>：类似于树结构的Span集合，表示一条调用链路，存在唯一标识(<code>Trace Id</code>)。</li>\n<li><code>Span</code>：表示调用链路来源，通俗的理解Span就是一次请求信息。各个Span通过<code>parentID</code>关联起来。</li>\n</ul>\n</blockquote>\n<h6 id=\"生产者-8001-3\">生产者(8001)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--eureka-client--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-payment-service</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">zipkin:</span></span><br><span class=\"line\">    <span class=\"attr\">base-url:</span> <span class=\"string\">http://localhost:9411</span></span><br><span class=\"line\">  <span class=\"attr\">sleuth:</span></span><br><span class=\"line\">    <span class=\"attr\">sampler:</span></span><br><span class=\"line\">      <span class=\"comment\">#采样率值介于 0 到 1 之间，1 则表示全部采集</span></span><br><span class=\"line\">      <span class=\"attr\">probability:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span>            <span class=\"comment\"># 当前数据源操作类型</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/springCloud?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">&#x27;00000000&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.ry.sc.entities#</span> <span class=\"string\">所有Entity别名类所在包</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\"># 是否从Eureka Server抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示是否将自己注册进Eureka Server，默认为true</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> <span class=\"comment\"># 入住地址</span></span><br><span class=\"line\">      <span class=\"comment\">#单机</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka</span></span><br><span class=\"line\">      <span class=\"comment\"># 集群</span></span><br><span class=\"line\">      <span class=\"comment\">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">payment8001</span>  <span class=\"comment\"># 自定义名称</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#鼠标移动到服务列表的主机上之后，左下角不显示IP，不方便定位具体的主机ip。可以修改eureka.instance.prefer-ip-address，设置为true。</span></span><br><span class=\"line\">    <span class=\"comment\">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span></span><br><span class=\"line\">    <span class=\"comment\">#lease-renewal-interval-in-seconds: 1</span></span><br><span class=\"line\">    <span class=\"comment\">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span></span><br><span class=\"line\">    <span class=\"comment\">#lease-expiration-duration-in-seconds: 2</span></span><br></pre></td></tr></table></figure>\n<p>业务类<code>PaymentController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">paymentZipkin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hi ,i&#x27;am paymentzipkin server fall back，welcome to atguigu，O(∩_∩)O哈哈~&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"消费者-80-3\">消费者(80)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--eureka-client--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloud-order-service</span></span><br><span class=\"line\">  <span class=\"attr\">zipkin:</span></span><br><span class=\"line\">    <span class=\"attr\">base-url:</span> <span class=\"string\">http://localhost:9411</span></span><br><span class=\"line\">  <span class=\"attr\">sleuth:</span></span><br><span class=\"line\">    <span class=\"attr\">sampler:</span></span><br><span class=\"line\">      <span class=\"attr\">probability:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"comment\">#表示是否将自己注册进EurekaServer默认为true。</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">fetchRegistry:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://localhost:7001/eureka</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class=\"comment\">#集群版</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">order80</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>业务类  <code>OrderController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ====================&gt; zipkin+sleuth</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/comsumer/payment/zipkin&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">paymentZipKin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> restTemplate.getForObject(<span class=\"string\">&quot;http://localhost:8001&quot;</span> + <span class=\"string\">&quot;/payment/zipkin/&quot;</span>, String.class);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动7001、7002、8001、80</code></p>\n<p>​\t随后访问9411能够找到对应的 消费者和  生产者的微服务，并会<code>生成依赖关系</code></p>\n<h2 id=\"Alibaba-Nacos\">Alibaba Nacos</h2>\n<p>父模块的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Nacos 能干什么</p>\n<ul>\n<li>服务注册</li>\n<li>服务配置中心</li>\n<li>负载均衡（自带的）</li>\n<li>动态刷新（自带的）—由 <code>@RefreshScope</code>进行实现</li>\n</ul>\n<p>启动的时候：</p>\n<p>==注意==</p>\n<p>默认的是<strong>集群模式</strong>，我们需要<strong>单机启动</strong>  就输入：  <code>startup.sh -m standalone</code> 即可通过单机模式启动</p>\n<p>成功之后     访问<code>http://localhost:8848/nacos    默认账号密码都是nacos</code></p>\n</blockquote>\n<h3 id=\"nacos作为注册中心\">nacos作为注册中心</h3>\n<h6 id=\"生产者（9001）\">生产者（9001）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-payment-provider</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span> <span class=\"comment\">#配置Nacos地址，注册到Nacos</span></span><br><span class=\"line\"><span class=\"comment\"># 做监控需要把这个全部暴露出来</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span>  <span class=\"comment\">//这里跟以前不同了，不再是EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><code>这里不像eureka还要写注册中心微服务，直接安装打开nacos即可。  启动9001，查看nacos控制台，注册成功</code></p>\n<p>此时： <code>nacos服务注册中心</code>+<code>服务提供者9001</code>都OK了</p>\n<h6 id=\"生产者（9002）\">生产者（9002）</h6>\n<p><code>步骤与9001一致，就是端口号改成9002</code></p>\n<blockquote>\n<p>拓展     生成的一个简单方法   <code>虚拟映射</code></p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305141945615.png\" alt=\"image-20230514194508562\" style=\"zoom:33%;\">\n</blockquote>\n<h6 id=\"消费者（80）\">消费者（80）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">83</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-order-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class=\"line\"><span class=\"attr\">service-url:</span></span><br><span class=\"line\">  <span class=\"attr\">nacos-user-service:</span> <span class=\"string\">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationContextBean</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">getRestTemplate</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305141954425.png\" alt=\"image-20230514195451375\" style=\"zoom:33%;\">\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderNacosController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String serverURL;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfo</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> restTemplate.getForObject(serverURL + <span class=\"string\">&quot;/payment/nacos/&quot;</span> + id, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><code>启动9001、9002、83</code></p>\n<p><code>测试链接：http://localhost:83/consumer/payment/nacos/1     发现9001与9002交替出现，即轮询负载均衡。</code></p>\n<blockquote>\n<p>nacos可以在   AP CP 之间进行切换</p>\n<p>切换指令  <code>curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP'</code></p>\n</blockquote>\n<h3 id=\"nacos-作为配置中心\">nacos 作为配置中心</h3>\n<blockquote>\n<p>以前我们将所有的配置信息写到了<code>GitHub</code>上，用Config+Bus来进行自动刷新和动态的更新。</p>\n<p>现在我们可以<code>直接把配置文件写进Nacos</code>，然后再用Nacos做类似于config这样的功能，直接从Nacos上抓取我们的配置信息。</p>\n</blockquote>\n<h4 id=\"基础配置\">基础配置</h4>\n<h6 id=\"客户端-3377-热更新\">客户端  (3377)[热更新]</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--nacos-config--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring      </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--nacos-discovery--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--web + actuator--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<blockquote>\n<p>这里需要配置两个，一个bootstrap和一个application。</p>\n<p><code>原因</code>：Nacos同springcloud-config一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动。（微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。）</p>\n<p>但如果尚未读取application.yml，又如何得知nacos地址呢？</p>\n<p>因此spring引入了一种新的配置文件：bootstrap.yaml文件，会在application.yml之前被读取，流程如下：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190026938.png\" alt=\"image-20230519002616868\" style=\"zoom:53%;\">\n<p>springboot中配置文件的加载是<code>存在优先级顺序</code>的，<code>bootstrap</code>优先级<code>高</code>于<code>application</code>。</p>\n<p>全局的放在：bootstrap.yml</p>\n<p>自己的放在：application.yml</p>\n</blockquote>\n<p>bootstrap</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nacos配置</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3377</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-config-client</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span> <span class=\"comment\">#Nacos服务注册中心地址</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span> <span class=\"comment\">#Nacos作为配置中心地址</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yaml</span> <span class=\"comment\">#指定yaml格式的配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br></pre></td></tr></table></figure>\n<p>application</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span> <span class=\"comment\"># 表示开发环境</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意nacos只识别<code>yaml</code>，不支持<code>yml</code></p>\n<p><code>最终公式：$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code></p>\n<p>​\t结果：     <code>nacos-config-client-dev.yaml</code></p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142003922.png\" alt=\"image-20230514200336868\" style=\"zoom:33%;\">\n</blockquote>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>通过Spring Cloud原生注解**@RefreshScope** 实现配置<code>自动更新(就是热更新)</code></p>\n<p>方式一：在<code>@Value注入的变量</code>所在类上添加注解<code>@RefreshScope</code>  （见下）</p>\n<p>方式二：使用<code>@ConfigurationProperties</code>注解代替<code>@Value</code>注解</p>\n<ul>\n<li>例如：</li>\n</ul>\n<p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.user.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PatternProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dateformat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后：</p>\n<p>在UserController中使用这个类代替@Value：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190031440.png\" alt=\"image-20230519003115296\" style=\"zoom:33%;\">\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.cloudalibaba.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span> <span class=\"comment\">//在控制器类加入@RefreshScope注解使当前类下的配置支持Nacos的动态刷新功能。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigClientController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfigInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>随后  在 <code>nacos可视化界面</code> 中新增配置</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142010398.png\" alt=\"image-20230514201020347\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190024041.png\" alt=\"image-20230519002424916\" style=\"zoom:30%;\">\n<p><strong>注意</strong>：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p>\n</blockquote>\n<p>测试<br>\n<code>启动3377   发送请求：http://localhost:3377/config/info   </code></p>\n<blockquote>\n<p>注意: <code>nacos自带动态刷新</code>：修改nacos中的yaml配置文件，再次调用查看配置，发现配置刷新了。</p>\n</blockquote>\n<h4 id=\"分类配置\">分类配置</h4>\n<p>问题：</p>\n<ul>\n<li>\n<p>实际开发中，通常一个系统会准备   <code>dev开发环境      test测试环境     prod生产环境   </code></p>\n<p>1、 如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢？</p>\n<p>2、那怎么对这些微服务配置进行管理呢？</p>\n</li>\n</ul>\n<p>解决：</p>\n<ul>\n<li>使用    nacos 图形化管理界面   如：</li>\n</ul>\n<blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142013194.png\" alt=\"image-20230514201322084\" style=\"zoom:33%;\">\n<p>三个核心：</p>\n<ul>\n<li>\n<p>Namespace    主要用来实现   ==环境隔离==</p>\n</li>\n<li>\n<p>Group    可以把不同的微服务划分到同一个分组里面去</p>\n</li>\n<li>\n<p>Data ID</p>\n</li>\n</ul>\n<p><code>最外层的namespace是可以用于区分部署环境的，Group和DataID逻辑上区分两个目标对象。</code></p>\n<p>注意：<strong>默认情况： Namespace=public，Group=DEFAULT_GROUP, 默认Cluster是DEFAULT</strong></p>\n</blockquote>\n<h4 id=\"配置共享\">配置共享</h4>\n<blockquote>\n<p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p>\n<ul>\n<li>\n<p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p>\n</li>\n<li>\n<p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p>\n</li>\n</ul>\n<p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p>\n</blockquote>\n<h5 id=\"演示-3\">演示</h5>\n<ul>\n<li>添加环境共享配置</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190034267.png\" alt=\"image-20230519003442125\" style=\"zoom:33%;\">\n<ul>\n<li>\n<p>消费者读取配置</p>\n<p>PatternProperties  类中  读取新添加的属性：</p>\n</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190035013.png\" alt=\"image-20230519003515877\" style=\"zoom:33%;\">\n<p>​\t\tcontroller</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190035287.png\" alt=\"image-20230519003528219\" style=\"zoom:33%;\">\n<ul>\n<li>运行两个UserApplication，使用不同的profile</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190036755.png\" alt=\"image-20230519003641689\" style=\"zoom:33%;\">\n<ul>\n<li>结果</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190037403.png\" alt=\"image-20230519003719260\" style=\"zoom:33%;\">\n<h5 id=\"优先级\">优先级</h5>\n<blockquote>\n<p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p>\n</blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190038719.png\" alt=\"image-20230519003803646\" style=\"zoom:33%;\">\n<h4 id=\"三种方案加载配置\">三种方案加载配置</h4>\n<blockquote>\n<p>综述:</p>\n<ul>\n<li>DataID方案是在默认namesapce和默认Group下，创建两个不同的DataID。</li>\n<li>Group方案是在默认namespace下，新建两个DataID相同的配置文件，通过指定不同的分组来读取不同的配置。</li>\n<li>Namespace方案，是相同的Group，相同的DataID，创建并指定不同的namespace来读取不同配置。</li>\n</ul>\n</blockquote>\n<h6 id=\"DataID方案\">DataID方案</h6>\n<blockquote>\n<p>指定spring.profile.active和配置文件的DataID来使不同环境下读取不同的配置</p>\n<p><code>默认空间+默认分组+新建dev和test两个DataID</code></p>\n<ul>\n<li>新建dev   配置DataID</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142025871.png\" alt=\"image-20230514202519810\" style=\"zoom:25%;\">\n<ul>\n<li>新建test   配置DataID</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142022209.png\" alt=\"image-20230514202213151\" style=\"zoom:33%;\">\n<ul>\n<li>通过spring.profile.active属性就能进行多环境下配置文件的读取</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142019096.png\" alt=\"image-20230514201901987\" style=\"zoom:25%;\">\n</blockquote>\n<h6 id=\"Group方案\">Group方案</h6>\n<blockquote>\n<ul>\n<li>新建一个配置文件，添加到DEV_GROUP分组</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142021973.png\" alt=\"image-20230514202149922\" style=\"zoom:33%;\">\n<ul>\n<li>新建一个配置文件，添加到TEST_GROUP分组</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142020046.png\" alt=\"image-20230514202026992\" style=\"zoom:25%;\">\n<ul>\n<li>在config下增加一条group的配置即可。可配置为DEV_GROUP或TEST_GROUP</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142020073.png\" alt=\"image-20230514202051968\" style=\"zoom:33%;\">\n</blockquote>\n<h6 id=\"namesapce方案\">namesapce方案</h6>\n<blockquote>\n<ul>\n<li>新建dev/test的Namesapce</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142021324.png\" alt=\"image-20230514202137217\" style=\"zoom:33%;\">\n<ul>\n<li>回到服务管理-服务列表查看</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142022629.png\" alt=\"image-20230514202257521\" style=\"zoom:33%;\">\n<ul>\n<li>在这两个新建的namespace中分别新建三个不同分组的配置文件</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142023525.png\" alt=\"image-20230514202322409\" style=\"zoom:33%;\">\n<ul>\n<li>修改3377的yml文件</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142024404.png\" alt=\"image-20230514202415299\" style=\"zoom:33%;\">\n</blockquote>\n<h4 id=\"Nacos集群-和-持久化配置\">Nacos集群 和 持久化配置</h4>\n<ul>\n<li>\n<p>防止 单一的注册中心挂了  所以  使用集群</p>\n</li>\n<li>\n<p>要将配置持久化到数据库中：MySQL   ，不用nacos内嵌的数据库（会有<code>数据一致性问题</code>，<code>因为</code>每个nacos都有自己独立的嵌入式数据库，存放的数据不一致 ）</p>\n<ul>\n<li>为了解决这个问题，Nacos采用了<code>集中式存储的方式</code>来支持集群化部署，目前只支持MySQL的存储。</li>\n</ul>\n</li>\n</ul>\n<p>Nacos支持的三种部署模式：</p>\n<ul>\n<li>单机模式：用于测试和单机使用</li>\n<li>集群模式：用于生产环境，确保高可用</li>\n<li>多集群模式：用于多数据中心场景</li>\n</ul>\n<h5 id=\"持久化配置\">持久化配置</h5>\n<blockquote>\n<p>Nacos区分了<code>临时实例</code>和<code>非临时实例</code></p>\n<ul>\n<li>临时实例：和Eureka一样，采用心跳机制向Nacos发送请求保持在线状态，一旦心跳停止，代表实例下线，不保留实例信息。</li>\n<li>非临时实例：由Nacos主动进行联系，如果连接失败，那么不会移除实例信息，而是将健康状态设定为false，相当于会对某个实例状态持续地进行监控。</li>\n</ul>\n</blockquote>\n<p>yml配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-order-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">        <span class=\"comment\"># 将ephemeral修改为false，表示非临时实例</span></span><br><span class=\"line\">        <span class=\"attr\">ephemeral:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"集群搭建步骤：\">集群搭建步骤：</h5>\n<ul>\n<li>\n<p>MacBook 搭建单机形式</p>\n</li>\n<li>\n<p>linux搭建集群</p>\n<p>[linux搭建集群][<a href=\"https://www.yuque.com/mrlinxi/pxvr4g/rnahsn#dPvMy\">https://www.yuque.com/mrlinxi/pxvr4g/rnahsn#dPvMy</a>]</p>\n</li>\n</ul>\n<h5 id=\"将微服务-9002-启动注册进nacos集群\">将微服务 9002 启动注册进nacos集群</h5>\n<p>修改9002的application.yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-payment-provider</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\"><span class=\"comment\">#        server-addr: localhost:8848 #配置Nacos地址，注册到Nacos</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">172.16</span><span class=\"number\">.108</span><span class=\"number\">.139</span><span class=\"string\">:1111</span> <span class=\"comment\"># 注册到nacos集群，通过nginx代理</span></span><br><span class=\"line\"><span class=\"comment\"># 做监控需要把这个全部暴露出来</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142042862.png\" alt=\"image-20230514204258742\" style=\"zoom:33%;\">\n<h5 id=\"集群分区-服务分级存储模型\">集群分区(服务分级存储模型)</h5>\n<blockquote>\n<p><code>eureka</code>中的<code>defaultZone: http://localhost:8888/eureka</code>就是对集群进行了分区</p>\n<p>在一个分布式应用中，相同服务的实例可能会在不同的机器、位置上启动，然而我们应该<code>优先选择同一个区域</code>的用户服务进行调用，这样会使得响应速度更快</p>\n</blockquote>\n<p>配置分区</p>\n<ul>\n<li>1、 在 yml中进行配置</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-payment-provider</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span> <span class=\"comment\">#配置Nacos地址，注册到Nacos</span></span><br><span class=\"line\">       <span class=\"comment\"># server-addr: 172.16.108.139:80 # 注册到nacos集群，通过nginx代理</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 修改为重庆地区的集群</span></span><br><span class=\"line\">        <span class=\"attr\">cluster-name:</span> <span class=\"string\">Chongqing</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2、在 nacos 中进行配置</li>\n</ul>\n<p><code>spring.cloud.nacos.discovery.cluster-name</code></p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151416369.png\" alt=\"image-20230515141600194\" style=\"zoom:33%;\">\n<p>开启 nacos 自带的</p>\n<h5 id=\"负载均衡-3\">负载均衡</h5>\n<blockquote>\n<p>作为集群时的配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&gt;spring:</span></span><br><span class=\"line\"><span class=\"string\">&gt;cloud:</span></span><br><span class=\"line\"><span class=\"string\">&gt;nacos:</span></span><br><span class=\"line\"><span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\"><span class=\"attr\">discovery:</span></span><br><span class=\"line\">  <span class=\"attr\">cluster-name:</span> <span class=\"string\">HZ</span> <span class=\"comment\"># 集群名称</span></span><br></pre></td></tr></table></figure>\n<p>另外还需要进行修改负载均衡规则(因为  默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。)</p>\n<p>修改order-service的application.yml文件，修改负载均衡规则：</p>\n<p>（Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例）</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&gt;userservice:</span></span><br><span class=\"line\"><span class=\"string\">&gt;ribbon:</span></span><br><span class=\"line\"><span class=\"string\">&gt;NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class=\"comment\"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-payment-provider</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">        <span class=\"attr\">cluster-name:</span> <span class=\"string\">Chengdu</span></span><br><span class=\"line\">    <span class=\"comment\"># 将loadbalancer的nacos支持开启，集成Nacos负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">loadbalancer:</span></span><br><span class=\"line\">      <span class=\"attr\">nacos:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>除了根据区域优先调用之外，同一个区域内的实例也可以单独设置权重，Nacos会优先选择权重更大的实例进行调用，我们可以直接在管理页面中进行配置：</p>\n<p>即：<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190020890.png\" alt=\"image-20230519002013824\" style=\"zoom:33%;\"></p>\n<p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-payment-provider</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">        <span class=\"attr\">cluster-name:</span> <span class=\"string\">Chengdu</span></span><br><span class=\"line\">        <span class=\"comment\"># 权重大小，越大越优先调用，默认为1</span></span><br><span class=\"line\">        <span class=\"attr\">weight:</span> <span class=\"number\">0.5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Nacos-VS-Eureka\">Nacos VS Eureka</h3>\n<table>\n<thead>\n<tr>\n<th>Nacos</th>\n<th>Eureka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190010783.png\" alt=\"image-20230519001021714\" style=\"zoom:38%;\"></td>\n<td><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305190013402.png\" style=\"zoom:33%;\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>Nacos与eureka的共同点</p>\n<ul>\n<li>都支持服务注册和服务拉取</li>\n<li>都支持服务提供者心跳方式做健康检测</li>\n</ul>\n</li>\n<li>\n<p>Nacos与Eureka的区别</p>\n<ul>\n<li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li>\n<li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>\n<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>\n<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Alibaba-Sentinel\">Alibaba Sentinel</h2>\n<blockquote>\n<p>==用于：服务保护==</p>\n<p>==引入：==</p>\n<p><strong>服务雪崩</strong>：</p>\n<p>当一个服务发生问题时，由于服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了</p>\n<p>简而言之就是： 微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。</p>\n<p>==解决：==</p>\n<ul>\n<li>\n<p>超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</p>\n</li>\n<li>\n<p>仓壁模式（与此类似，我们可以限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。）</p>\n</li>\n<li>\n<p>断路器模式：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求。</p>\n</li>\n<li>\n<p><strong>流量控制</strong>（限流）：限制业务访问的QPS，避免服务因流量的突增而故障。</p>\n</li>\n</ul>\n<p>==认为：==</p>\n<p><strong>限流</strong>是对服务的保护，避免因瞬间高并发流量而导致服务故障，进而避免雪崩。是一种<strong>预防</strong>措施。</p>\n<p><strong>超时处理、线程隔离、降级熔断</strong>是在部分服务故障时，将故障控制在一定范围，避免雪崩。是一种<strong>补救</strong>措施。</p>\n</blockquote>\n<blockquote>\n<p>作用：</p>\n<ul>\n<li>流量控制 、熔断 、 降级 、 限流</li>\n</ul>\n<p>hystrix</p>\n<ul>\n<li>Feign</li>\n</ul>\n</blockquote>\n<h3 id=\"初步使用\">初步使用</h3>\n<p><code>下载到本地sentinel-dashboard-1.8.2.jar   (localhost:8080)</code></p>\n<p>先启动 Nacos8848</p>\n<h6 id=\"生产者（sentinel-8401）\">生产者（sentinel-8401）</h6>\n<p>依赖&lt;nacos 跟sentinel一起配置&gt;</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--openfeign--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<blockquote>\n<p><code>spring.cloud.sentinel.transport.port </code>端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。</p>\n<p>​\t比如 Sentinel 控制台添加了1个限流规则，会把规则数据<code>push</code>给这个<code>Http Server</code>接收，<code>Http Server</code>再将规则<code>注册到Sentinel</code>中。</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8401</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloudalibaba-sentinel-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span> <span class=\"comment\">#Nacos服务注册中心地址</span></span><br><span class=\"line\">    <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">      <span class=\"attr\">transport:</span></span><br><span class=\"line\">        <span class=\"comment\">#配置Sentinel dashboard地址</span></span><br><span class=\"line\">        <span class=\"attr\">dashboard:</span> <span class=\"string\">localhost:8080</span></span><br><span class=\"line\">        <span class=\"comment\">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8719</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.cloudalibaba.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowLimitController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/testA&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">testA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;------testA&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/testB&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">testB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;------testB&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 ：<code> Sentinel采用懒加载机制  所以  要先 执行一下  http://localhost:8401/testA  才可以在网页上显示</code></p>\n<h3 id=\"限流控制\">限流控制</h3>\n<h4 id=\"簇点链路\">簇点链路</h4>\n<blockquote>\n<p>当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，</p>\n<p>这样的一个调用链就叫做<strong>簇点链路</strong>。</p>\n<p>簇点链路中被监控的每一个接口就是一个<strong>资源</strong>。</p>\n<p>默认情况下sentinel会监控SpringMVC的每一个端点（Endpoint，也就是controller中的方法），</p>\n<p>因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源。</p>\n</blockquote>\n<h4 id=\"普通限流（见下面的流控规则）\">普通限流（见下面的流控规则）</h4>\n<p>注解 <code>@SentinelResource(blockHandler=&quot;&quot;)   </code>+ <code>方法</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@SentinelResource(value = &quot;getBorrow&quot;, blockHandler = &quot;blockHandler_method&quot;)</span>   </span><br><span class=\"line\"><span class=\"comment\">//指定blockHandler，也就是被限流之后的替代解决方案，这样就不会使用默认的抛出异常的形式了</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserBorrowDetail <span class=\"title function_\">getUserBorrowDetailByUid</span><span class=\"params\">(<span class=\"type\">int</span> uid)</span> &#123;</span><br><span class=\"line\">    List&lt;Borrow&gt; borrow = mapper.getBorrowsByUid(uid);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userClient.getUserById(uid);</span><br><span class=\"line\">    List&lt;Book&gt; bookList = borrow</span><br><span class=\"line\">            .stream()</span><br><span class=\"line\">            .map(b -&gt; bookClient.getBookById(b.getBid()))</span><br><span class=\"line\">            .collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserBorrowDetail</span>(user, bookList);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//替代方案，注意参数和返回值需要保持一致，并且参数最后还需要额外添加一个BlockException</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserBorrowDetail <span class=\"title function_\">blockHandler_method</span><span class=\"params\">(<span class=\"type\">int</span> uid, BlockException e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserBorrowDetail</span>(<span class=\"literal\">null</span>, Collections.emptyList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>==注意：==</p>\n<p>​\t<code>blockHandler</code>只能处理限流情况下抛出的异常，包括下面即将要介绍的热点参数限流也是同理，如果是方法本身抛出的其他类型异常，不在管控范围内，但是可以通过其他参数进行处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">&gt;<span class=\"meta\">@SentinelResource(value = &quot;test&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">&gt;fallback = &quot;except&quot;,    //fallback指定出现异常时的替代方案</span></span><br><span class=\"line\"><span class=\"meta\">&gt;exceptionsToIgnore = IOException.class)</span>  <span class=\"comment\">//忽略那些异常，也就是说这些异常出现时不使用替代方案</span></span><br><span class=\"line\">&gt;String <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">&gt;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;HelloWorld！&quot;</span>);</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;<span class=\"comment\">//替代方法必须和原方法返回值和参数一致，最后可以添加一个Throwable作为参数接受异常</span></span><br><span class=\"line\">&gt;String <span class=\"title function_\">except</span><span class=\"params\">(Throwable t)</span>&#123;</span><br><span class=\"line\">&gt;<span class=\"keyword\">return</span> t.getMessage();</span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>特别注意这种方式会在没有配置<code>blockHandler</code>的情况下，</p>\n<p>将Sentinel机制内（也就是限流的异常）的异常也一并处理了，如果配置了<code>blockHandler</code>，</p>\n<p>那么在出现限流时，依然只会执行<code>blockHandler</code>指定的替代方案（因为限流是在方法执行之前进行的）</p>\n</blockquote>\n<h4 id=\"流控规则\">流控规则</h4>\n<blockquote>\n<p>我们的机器不可能无限制的接受和处理客户端的请求，如果不加以限制，当发生高并发情况时，系统资源将很快被耗尽。</p>\n<p>为了避免这种情况，我们就可以添加流量控制（也可以说是限流）当一段时间内的流量到达一定的阈值的时候，新的请求将不再进行处理，这样不仅可以合理地应对高并发请求，同时也能在一定程度上保护服务器不受到外界的恶意攻击。</p>\n</blockquote>\n<ul>\n<li>流控模式</li>\n<li>流控效果</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142056903.png\" alt=\"image-20230514205602778\" style=\"zoom:33%;\">\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142056542.png\" alt=\"image-20230514205619423\" style=\"zoom:33%;\">\n<h5 id=\"流控模式\">流控模式</h5>\n<h6 id=\"1、直接（默认）\">1、直接（默认）</h6>\n<p>往往 和 （流控效果中的快速失败（默认）共同使用）</p>\n<blockquote>\n<p>直接： 只针对于当前接口,出发预知的时候对当前资源直接限流    默认的模式</p>\n</blockquote>\n<ul>\n<li>\n<p>1、QPS直接快速失败</p>\n</li>\n<li>\n<p>2、线程数直接快速失败</p>\n</li>\n</ul>\n<h6 id=\"2、关联\">2、关联</h6>\n<blockquote>\n<p>当关联的资源达到阈值时，就限流自己。比如当与A关联的资源B达到阈值后，就限流A自己。 支付接口达到阈值，限流下订单的接口。</p>\n<ul>\n<li>使用场景：</li>\n</ul>\n<p>满足下面条件可以使用关联模式：</p>\n<ul>\n<li>两个有竞争关系的资源</li>\n<li>一个优先级较高，一个优先级较低</li>\n</ul>\n</blockquote>\n<h6 id=\"3、链路\">3、链路</h6>\n<blockquote>\n<p>只针对从指定链路访问到<code>本资源</code>的请求做统计，判断是否超过阈值。</p>\n<p>需要测试链路的话，springcloud 阿里巴巴版本需要2.1.1.RELEASE以上，在父工程的pom中修改，不要直接在子module的pom中修改，版本有对应关系，不然报错。</p>\n<p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。</p>\n<p>我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&gt;spring:</span></span><br><span class=\"line\"><span class=\"string\">&gt;cloud:</span></span><br><span class=\"line\"><span class=\"string\">&gt;sentinel:</span></span><br><span class=\"line\"><span class=\"attr\">web-context-unify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 关闭context整合</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h6 id=\"总结：\">总结：</h6>\n<p>流控模式有哪些？</p>\n<p>•直接：对当前资源限流</p>\n<p>•关联：高优先级资源触发阈值，对低优先级资源限流。</p>\n<p>•链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流</p>\n<h5 id=\"流控效果\">流控效果</h5>\n<h6 id=\"1、快速失败\">1、快速失败</h6>\n<blockquote>\n<p>既然不再接受新的请求，那么我们可以直接返回一个拒绝信息，告诉用户访问频率过高。</p>\n<p>达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</p>\n</blockquote>\n<p>是默认的流控效果，直接失败，抛出异常</p>\n<h6 id=\"2、-warm-up-预热\">2、 warm up 预热</h6>\n<blockquote>\n<p>基于方案一，但是由于某些情况下高并发请求是在某一时刻突然到来，我们可以缓慢地将阈值提高到指定阈值，形成一个缓冲保护</p>\n<p>预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。</p>\n<p>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</p>\n<p>warm up也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。请求阈值初始值是 maxThreshold / coldFactor，持续指定时长后，逐渐提高到maxThreshold值。而coldFactor的默认值是3.</p>\n<p>例如，我设置QPS的maxThreshold为10，预热时间为5秒，那么初始阈值就是 10 / 3 ，也就是3，然后在5秒后逐渐增长到10.（随着时间推移，成功比例越来越高）</p>\n</blockquote>\n<p><code>阈值除以coldFactor(默认值为3), 经过预热时长后才会达到阈值</code></p>\n<h6 id=\"3、排队等待\">3、排队等待</h6>\n<blockquote>\n<p>不接受新的请求，但是也不直接拒绝，而是进队列先等一下，如果规定时间内能够执行，那么就执行，要是超时就算了。</p>\n<p>让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长</p>\n<p>当请求超过QPS阈值时，快速失败和warm up 会拒绝新的请求并抛出异常。</p>\n<p>而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</p>\n<p>工作原理</p>\n<p>例如：QPS = 5，意味着每200ms处理一个队列中的请求；timeout = 2000，意味着<strong>预期等待时长</strong>超过2000ms的请求会被拒绝并抛出异常。</p>\n<p>那什么叫做预期等待时长呢？</p>\n<p>比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：</p>\n<ul>\n<li>第6个请求的<strong>预期等待时长</strong> =  200 * （6 - 1） = 1000ms</li>\n<li>第12个请求的预期等待时长 = 200 * （12-1） = 2200ms</li>\n</ul>\n<p>如果使用队列模式做流控，所有进入的请求都要排队，以固定的200ms的间隔执行，QPS会变的很平滑</p>\n</blockquote>\n<p>匀速排队，让请求以<code>均匀的速度</code>通过，阀值类型必须设成QPS，否则无效。</p>\n<h6 id=\"总结\">总结</h6>\n<p>流控效果有哪些？</p>\n<ul>\n<li>\n<p>快速失败：QPS超过阈值时，拒绝新的请求</p>\n</li>\n<li>\n<p>warm up： QPS超过阈值时，拒绝新的请求；QPS阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。</p>\n</li>\n<li>\n<p>排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求；如果请求预期等待时长大于超时时间，直接拒绝</p>\n</li>\n</ul>\n<h4 id=\"热点key限流（更细粒度）\">热点key限流（更细粒度）</h4>\n<p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。</p>\n<p>而热点参数限流是<strong>分别统计参数值相同的请求</strong>，判断是否超过QPS阈值。</p>\n<h5 id=\"全局参数限流\">全局参数限流</h5>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191521234.png\" alt=\"image-20230519152116878\" style=\"zoom:33%;\">\n<blockquote>\n<p>当id=1的请求触发阈值被限流时，id值<code>不为1</code>的请求不受影响。</p>\n</blockquote>\n<blockquote>\n<p>热点  :   经常访问的数据，很多时候我们希望统计或者限制某个热点数据中访问频次最高的TopN数据，并对其访问进行限流或者其它操作。比如：</p>\n<ul>\n<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>\n<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>\n</ul>\n<p>热点参数限制会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限制。</p>\n<p><code>热点参数限流</code>可以看作是一种<code>特殊的流量控制</code>，<code>仅对包含热点参数的资源调用生效</code>。</p>\n<p>Sentinel利用LRU策略统计最近最常访问的热电参数，结合令牌桶算法来进行参数级别的流控。热点参数限流支持集群模式。</p>\n</blockquote>\n<h5 id=\"基本使用\">基本使用</h5>\n<p>1、兜底防范(引入**@SentinelResource**注解)</p>\n<ul>\n<li>\n<p>系统默认</p>\n</li>\n<li>\n<p>客户自定义</p>\n</li>\n</ul>\n<blockquote>\n<p>热点规则共有资源名、限流模式（只支持QPS模式）、参数索引、单机阈值、统计窗口时长、是否集群6种参数，等一些高级选项。</p>\n<p>这里会用到注解中的<code>value</code>作为资源名，兜底方法会在后面详细介绍<a href=\"https://www.yuque.com/mrlinxi/pxvr4g/rg5riy#HQt8b\">@SentinelResource注解详解</a></p>\n</blockquote>\n<p>==资源名：唯一路径，默认为请求路径。    此处必须是 @SentinelResource 注解的 value 属性值，配置@GetMapping 的请求路径无效）==</p>\n<h6 id=\"8401-Controller\">8401  Controller</h6>\n<p>标记资源<code>value = &quot;testHotKey&quot;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;del_testHotKey&quot;)</span>   <span class=\"comment\">//这里的名称可以随便写，但是一般跟rest地址一样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testHotkey</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;p1&quot;, required = false)</span> String p1,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@RequestParam(value = &quot;p1&quot;, required = false)</span> String p2)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;------testHotkey&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是我们自定义的兜底方法，BlockException不要打成了BlockedException</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">del_testHotKey</span><span class=\"params\">(String p1, String p2, BlockException e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;这次不用默认的兜底提示Blocked by Sentinel(flow limiting)，自定义提示：del_testHotKeyo(╥﹏╥)o...&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>value = &quot;testHotKey&quot; </code>是一个标识（Sentinel资源名），与rest的<code>/testHotKey</code>对应，这里value的值可以任意写，但是我们约定与rest地址一致，唯一区别是没有<code>/</code></p>\n<p><code>blockHandler = &quot;del_testHotKey&quot; </code>则表示如果违背了Sentinel中配置的<code>流控规则</code>，就会调用我们自己的兜底方法del_testHotKey</p>\n</blockquote>\n<h5 id=\"配置热点key限流规则\">配置热点key限流规则</h5>\n<ul>\n<li>所谓的 热点参数限流  就是  精准限流</li>\n</ul>\n<p>配置说明：</p>\n<ul>\n<li>绑定<code>testHotKey</code>资源，把<code>testHotKey</code>对应的第一个参数作为热点key进行监控。</li>\n</ul>\n<p>​\t\t\t设定热点限流规则：<code>当该资源的访问QPS超过1次/s的时候，产生限流并执行自定义的   del_testHotKey  兜底方法。</code></p>\n<ul>\n<li>简而言之：方法testHotKey里面第一个参数只要QPS超过每秒1次，马上降级处理。</li>\n</ul>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142124494.png\" alt=\"image-20230514212429431\" style=\"zoom:33%;\">\n<blockquote>\n<p>==注意==</p>\n<ul>\n<li>\n<p>Sentinel它只管你有没有触发它的限流规则，也可以说只管这个web交互页面（控制台）里面的东西。</p>\n</li>\n<li>\n<p>配置类的东西<code>Sentinel</code>可以管，java异常的错误<code>Sentinel</code>不管。</p>\n</li>\n<li>\n<p><strong>@SentinelResource</strong>  处理的是Sentinel控制台配置的违规情况，有<code>blockHandler</code>方法配置的兜底处理；</p>\n</li>\n</ul>\n<p><code>RuntimeException</code>  如： int age = 10/0,    这个是java运行时报出的运行时异常RunTimeException，<code>@SentinelResource不管</code></p>\n<ul>\n<li><strong>总结：</strong></li>\n</ul>\n<p><code>@SentinelResource</code>主管配置出错，运行出错该走异常走异常</p>\n</blockquote>\n<h5 id=\"参数例外项\">参数例外项</h5>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142127696.png\" alt=\"image-20230514212748633\" style=\"zoom:33%;\">\n<h5 id=\"系统规则（系统自适应限流）\">系统规则（系统自适应限流）</h5>\n<blockquote>\n<p>==不建议使用==</p>\n</blockquote>\n<blockquote>\n<p>目的：</p>\n<p>​\t通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>注意：</p>\n<p>​\t系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。</p>\n<p>​\t入口流量指的是进入应用的流量（<a href=\"http://EntryType.IN\">EntryType.IN</a>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>\n<p>作用：</p>\n<p>​\t除了直接对接口进行限流规则控制之外，我们也可以根据当前系统的资源使用情况，决定是否进行限流</p>\n<p>系统规则支持以下的模式：</p>\n<ul>\n<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是<code> CPU cores * 2.5</code>。</li>\n<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>\n<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>\n<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>\n</ul>\n</blockquote>\n<h4 id=\"响应的算法\">响应的算法</h4>\n<blockquote>\n<p>针对于是否超过流量阈值的判断，这里我们提4种算法：</p>\n</blockquote>\n<h6 id=\"漏桶算法\"><strong>漏桶算法</strong></h6>\n<p>顾名思义，就像一个桶开了一个小孔，水流进桶中的速度肯定是远大于水流出桶的速度的，这也是最简单的一种限流思路：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151455626.png\" alt=\"image-20230515145540422\" style=\"zoom:33%;\">\n<p>桶是有容量的，所以当桶的容量已满时，就装不下水了，这时就只有丢弃请求了。   利用这种思想，我们就可以写出一个简单的限流算法。</p>\n<h6 id=\"令牌桶算法\"><strong>令牌桶算法</strong></h6>\n<p>只能说有点像信号量机制。现在有一个令牌桶，这个桶是专门存放令牌的，每隔一段时间就向桶中丢入一个令牌（速度由我们指定）当新的请求到达时，将从桶中删除令牌，接着请求就可以通过并给到服务，但是如果桶中的令牌数量不足，那么不会删除令牌，而是让此数据包等待。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151456873.png\" alt=\"image-20230515145602801\" style=\"zoom:33%;\">\n<p>可以试想一下，当流量下降时，令牌桶中的令牌会逐渐积累，这样如果突然出现高并发，那么就能在短时间内拿到大量的令牌。</p>\n<h6 id=\"固定时间窗口算法\"><strong>固定时间窗口算法</strong></h6>\n<p>我们可以对某一个时间段内的请求进行统计和计数，比如在<code>14:15</code>到<code>14:16</code>这一分钟内，请求量不能超过<code>100</code>，也就是一分钟之内不能超过<code>100</code>次请求，那么就可以像下面这样进行划分：</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151456242.png\" alt></p>\n<p>虽然这种模式看似比较合理，但是试想一下这种情况：</p>\n<ul>\n<li><code>14:15:59</code>的时候来了100个请求</li>\n<li><code>14:16:01</code>的时候又来了100个请求</li>\n</ul>\n<p>出现上面这种情况，符合固定时间窗口算法的规则，所以这200个请求都能正常接受，但是，我们其实希望的是60秒内只有100个请求，但是这种情况却是在3秒内出现了200个请求，很明显已经违背了我们的初衷。</p>\n<p>因此，当遇到临界点时，固定时间窗口算法存在安全隐患。</p>\n<h6 id=\"滑动时间窗口算法\"><strong>滑动时间窗口算法</strong></h6>\n<p>相对于固定窗口算法，滑动时间窗口算法更加灵活，它会动态移动窗口，重新进行计算：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151456499.png\" alt=\"image-20230515145632431\" style=\"zoom:33%;\">\n<p>虽然这样能够避免固定时间窗口的临界问题，但是这样显然是比固定窗口更加耗时的。</p>\n<h4 id=\"系统规则（系统自适应限流）-2\">系统规则（系统自适应限流）</h4>\n<blockquote>\n<p>==不建议使用==</p>\n</blockquote>\n<blockquote>\n<p>目的：</p>\n<p>​\t通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>注意：</p>\n<p>​\t系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。</p>\n<p>​\t入口流量指的是进入应用的流量（<a href=\"http://EntryType.IN\">EntryType.IN</a>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>\n<p>作用：</p>\n<p>​\t除了直接对接口进行限流规则控制之外，我们也可以根据当前系统的资源使用情况，决定是否进行限流</p>\n<p>系统规则支持以下的模式：</p>\n<ul>\n<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是<code> CPU cores * 2.5</code>。</li>\n<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>\n<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>\n<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>\n</ul>\n</blockquote>\n<h3 id=\"服务降级\">服务降级</h3>\n<blockquote>\n<ul>\n<li>\n<p>会和  Fegin一起使用</p>\n</li>\n<li>\n<p>兜底方法   <code>fallback= </code></p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"Feign\">Feign</h4>\n<blockquote>\n<p>只作用在消费者</p>\n</blockquote>\n<h5 id=\"降级逻辑的两种方式\">降级逻辑的两种方式</h5>\n<ul>\n<li>\n<p>①方式一：<code>FallbackClass</code>，无法对远程调用的异常做处理</p>\n</li>\n<li>\n<p>②方式二：<code>FallbackFactory</code>，<code>可以</code>对远程调用的异常做处理，我们<code>选择这种</code></p>\n</li>\n</ul>\n<h5 id=\"方式一的演示\">方式一的演示</h5>\n<h6 id=\"消费者（84）\">消费者（84）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud openfeign --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<blockquote>\n<p>激活Sentinel对Feign的支持</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 激活Sentinel对Feign的支持</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>后续84的controller不找restTemplate（Ribbon），不是<code>restTemplate</code>去调用<code>payment微服务中</code>的接口。</p>\n<p><code>而是</code>通过调用<code>PaymentFeignService</code>，service再去调用payment微服务中的端口。</p>\n<p>Feign需要定义一个<code>业务逻辑（service）接口+ @FeignClient注解</code>以调用服务提供者。</p>\n</blockquote>\n<ul>\n<li>Service</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指明调用失败的兜底方法在PaymentFallbackService</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 fallback 方式是无法获取异常信息的，</span></span><br><span class=\"line\"><span class=\"comment\">// 如果想要获取异常信息，可以使用 fallbackFactory参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;nacos-payment-provider&quot;, fallback = PaymentFallbackService.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentFeignService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//去nacos-payment-provider服务中找相应的接口</span></span><br><span class=\"line\">    <span class=\"comment\">// 方法签名一定要和nacos-payment-provider中controller的一致</span></span><br><span class=\"line\">    <span class=\"comment\">// 对应9003、9004中的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">paymentSQL</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>serviceImpl</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>   <span class=\"comment\">//不要忘记了</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentFallbackServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PaymentFeignService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果nacos-payment-consumer服务中的相应接口出事了，我来兜底</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">paymentSQL</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>&lt;&gt;(<span class=\"number\">444</span>,<span class=\"string\">&quot;服务降级返回,没有该流水信息-------PaymentFallbackService&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(id, <span class=\"string\">&quot;errorSerial......&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//==================OpenFeign</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> PaymentFeignService paymentFeignService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">paymentSQL</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;没有该id&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paymentFeignService.paymentSQL(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<p><code>启动9003、9004、84     访问：http://localhost:84/consumer/paymentSQL/1</code></p>\n<p>可以看到</p>\n<p><code>9003、9004负载均衡    </code></p>\n<p><code>关闭9003、9004微服务提供者，看到84消费者自动执行降级兜底方法。     </code></p>\n<p><code>如果yaml没有配置Sentinel对Feign的支持，就不会执行降级方法，而是直接报错误页面。 </code></p>\n<h5 id=\"方式二的演示\">方式二的演示</h5>\n<p><strong>步骤一</strong>：在feing-api项目中定义类，实现FallbackFactory：</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.feign.clients.fallback;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.feign.clients.UserClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.feign.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.hystrix.FallbackFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserClientFallbackFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FallbackFactory</span>&lt;UserClient&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserClient <span class=\"title function_\">create</span><span class=\"params\">(Throwable throwable)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserClient</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> User <span class=\"title function_\">findById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;查询用户异常&quot;</span>, throwable);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>步骤二</strong>：在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserClientFallbackFactory <span class=\"title function_\">userClientFallbackFactory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserClientFallbackFactory</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>步骤三</strong>：在feing-api项目中的UserClient接口中使用UserClientFallbackFactory：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.feign.clients.fallback.UserClientFallbackFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.feign.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserClient</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    User <span class=\"title function_\">findById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"总结-2\">总结</h5>\n<p>Feign整合Sentinel的步骤：</p>\n<ul>\n<li>在application.yml中配置：feign.sentienl.enable=true</li>\n<li>给FeignClient编写FallbackFactory并注册为Bean</li>\n<li>将FallbackFactory配置到FeignClient</li>\n</ul>\n<h3 id=\"线程隔离\">线程隔离</h3>\n<p><strong>线程隔离</strong>之前讲到过：调用者在调用服务提供者时，给每个调用的请求分配独立线程池，出现故障时，最多消耗这个线程池内资源，避免把调用者的所有资源耗尽。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191523081.png\" alt=\"image-20230519152309806\" style=\"zoom:50%;\">\n<blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151521657.png\" alt=\"image-20230306232538279\" style=\"zoom:43%;\">\n<p>如果在某一时刻，服务<code>B出现故障（</code>可能就卡在那里了），而这时<code>服务A依然有大量的请求，在调用服务B</code>，那么，由于服务A没办法再短时间内完成处理，新来的请求就会导致线程数不断地增加，这样，<code>CPU的资源很快就会被耗尽</code></p>\n<p>那么要防止这种情况，就<code>只能进行隔离</code>了，这里我们提==两种隔离方案==：</p>\n<ol>\n<li><strong>线程池隔离</strong></li>\n</ol>\n<p>给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</p>\n<p>线程池隔离实际上就是对  每个服务的远程调用  单独开放线程池，比如服务A要调用服务B，那么只基于固定数量的线程池，这样即使在短时间内出现大量请求，由于没有线程可以分配，所以就不会导致资源耗尽了。</p>\n<img src=\"https://fast.itbaima.net/2023/03/06/CbYxA3d7w46OlMm.png\" alt=\"image-20230306232549778\" style=\"zoom:45%;\">\n<ol start=\"2\">\n<li><strong>信号量隔离</strong></li>\n</ol>\n<p>不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。</p>\n<p>信号量隔离是使用<code>Semaphore</code>类实现的，思想基本上与上面是相同的，也是限定指定的线程数量能够同时进行服务调用，但是它相对于线程池隔离，开销会更小一些，使用效果同样优秀，也支持超时等。Sentinel也正是采用的这种方案实现隔离的。</p>\n</blockquote>\n<ul>\n<li>\n<p>方式一：线程池的隔离</p>\n<ul>\n<li>优点：支持主动超时  和 异步调用</li>\n<li>缺点：额外开销较大</li>\n<li>场景：适用于 低扇出（扇出：调用其他服务）</li>\n</ul>\n</li>\n<li>\n<p>方式二：信号量的隔离（sentinel默认使用）</p>\n<ul>\n<li>优点：轻量级，没有额外开销</li>\n<li>缺点：不支持主动超时  和 异步调用</li>\n<li>场景：适用于 高扇出 高频调用</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"使用\">使用</h6>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305171715777.png\" alt=\"image-20230517171417753\" style=\"zoom:33%;\">\n<ul>\n<li>\n<p>QPS：就是每秒的请求数，在快速入门中已经演示过</p>\n</li>\n<li>\n<p>线程数：是该资源能使用用的tomcat线程数的最大值。也就是通过限制线程数量，实现<strong>线程隔离</strong>（舱壁模式）。</p>\n</li>\n</ul>\n<h3 id=\"服务熔断降级\">服务熔断降级</h3>\n<blockquote>\n<p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。</p>\n<p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）。</p>\n<p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p>\n<p>断路器控制熔断和放行是通过状态机来完成的：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191531998.png\" alt=\"image-20230519153131789\" style=\"zoom:33%;\">\n<p>状态机包括三个状态：</p>\n<ul>\n<li>closed：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li>\n<li>open：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态5秒后会进入half-open状态</li>\n<li>half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。</li>\n<li>请求成功：则切换到closed状态</li>\n<li>请求失败：则切换到open状态</li>\n</ul>\n</blockquote>\n<h4 id=\"熔断策略\">熔断策略</h4>\n<h6 id=\"1、慢调用比例，RT-平均响应时间，秒级）\">1、慢调用比例，RT(平均响应时间，秒级）</h6>\n<blockquote>\n<p>慢调用比例 (SLOW_REQUEST_RATIO)：</p>\n<p>选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。</p>\n<p>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，<strong>并且</strong>慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。</p>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），</p>\n<p>若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，</p>\n<p>若大于设置的慢调用 RT 则会再次被熔断。</p>\n</blockquote>\n<h6 id=\"2、异常比例\">2、异常比例</h6>\n<blockquote>\n<p>异常比例 (ERROR_RATIO)：</p>\n<p>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。</p>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n<p>异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p>\n</blockquote>\n<h6 id=\"3、异常数\">3、异常数</h6>\n<blockquote>\n<p>异常数 (ERROR_COUNT)：</p>\n<p>当单位统计时长内的异常数目超过阈值之后会自动进行熔断。</p>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n</blockquote>\n<p>==可以看到，不管是线程隔离还是熔断降级，都是对<strong>客户端</strong>（调用方）的保护。需要在<strong>调用方</strong> 发起远程调用时做线程隔离、或者服务熔断==</p>\n<p>==而我们的微服务远程调用都是基于Feign来完成的，因此我们需要将Feign与Sentinel整合，在Feign里面实现线程隔离和服务熔断==</p>\n<blockquote>\n<p>整合了   <code>ribbon+openFeign</code>    以及   <code>设置fallback</code></p>\n</blockquote>\n<h6 id=\"生产者（9003-9004）\">生产者（9003/9004）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml&lt;9004 改个端口号就行了&gt;</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9003</span>   <span class=\"string\">/9004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-payment-provider</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span> <span class=\"comment\">#配置Nacos地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<blockquote>\n<p>这里图方便，就没有连接数据库。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String serverPort;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        hashMap.put(<span class=\"number\">1L</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">1L</span>, <span class=\"string\">&quot;28a8c1e3bc2742d8848569891fb42181&quot;</span>));</span><br><span class=\"line\">        hashMap.put(<span class=\"number\">2L</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">2L</span>, <span class=\"string\">&quot;bba8c1e3bc2742d8848569891ac32182&quot;</span>));</span><br><span class=\"line\">        hashMap.put(<span class=\"number\">3L</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">3L</span>, <span class=\"string\">&quot;6ua8c1e3bc2742d8848569891xt92183&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">paymentSQL</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Payment</span> <span class=\"variable\">payment</span> <span class=\"operator\">=</span> hashMap.get(id);</span><br><span class=\"line\">        CommonResult&lt;Payment&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;from mysql,serverPort:  &quot;</span> + serverPort, payment);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142139010.png\" alt=\"image-20230514213913863\" style=\"zoom:33%;\">\n<h6 id=\"消费者（nacos-84）\">消费者（nacos-84）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">84</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nacos-order-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">    <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">      <span class=\"attr\">transport:</span></span><br><span class=\"line\">        <span class=\"comment\">#配置Sentinel dashboard地址</span></span><br><span class=\"line\">        <span class=\"attr\">dashboard:</span> <span class=\"string\">localhost:8080</span></span><br><span class=\"line\">        <span class=\"comment\">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8719</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class=\"line\"><span class=\"comment\">#方便controller的@value获取</span></span><br><span class=\"line\"><span class=\"attr\">service-url:</span></span><br><span class=\"line\">  <span class=\"attr\">nacos-user-service:</span> <span class=\"string\">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure>\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>\n<p>配置类</p>\n<blockquote>\n<p>因为用的Ribbon，需要使用其提供的RestTemplate</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationContextConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span>  <span class=\"comment\">//不要忘了</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">getRestemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>业务类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CircleBreakerController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String SERVICE_URL;</span><br><span class=\"line\">    <span class=\"comment\">//public static final String SERVICE_URL = &quot;http://nacos-payment-provider&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;fallback&quot;)</span>  <span class=\"comment\">//没有配置</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult&lt;Payment&gt; <span class=\"title function_\">fallback</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span> &#123;</span><br><span class=\"line\">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class=\"string\">&quot;/paymentSQL/&quot;</span> + id, CommonResult.class, id);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result.getData() == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>(<span class=\"string\">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142141776.png\" alt=\"image-20230514214143632\" style=\"zoom:33%;\">\n<h5 id=\"fallback-和-blockHandler\">fallback 和 blockHandler</h5>\n<blockquote>\n<p><code>fallback</code>管<code>运行异常</code>，<code>blockHandler</code>管<code>配置违规</code>。</p>\n<p><code>fallback</code>对应服务<code>降级</code>，就是服务出错了应该怎么办（需要有个兜底方法）;</p>\n<p><code>blockHandler</code>对应服务<code>熔断</code>，服务不可用的时候给 客户一个户提示（同样需要一个兜底方法）</p>\n</blockquote>\n<h5 id=\"blockHandler\">blockHandler</h5>\n<h5 id=\"差异化配置\">差异化配置</h5>\n<ul>\n<li>\n<p>要是 <code>fallback  blockHandler</code>  都不配置的时候  会出现报错页面</p>\n</li>\n<li>\n<p>只配置<code>fallback</code>    当业务出现异常的时候会执行 <code>兜底的方法</code></p>\n</li>\n<li>\n<p>只配置<code>blockHandler</code>      当前<code>sentinel</code>配置已经<code>违规</code>（RT数过多、异常过多），服务熔断后不可用，<code>需要给客户提示，进行一个熔断的兜底</code></p>\n</li>\n<li>\n<p><code>fallback  blockHandler</code> 都配置         同时配置fallback：处理业务异常（微服务自身异常，服务降级）和blockHandler：处理触发sentinel配置（微服务不可用，服务熔断）时。在没有违反sentinel规则时，出现业务异常（降级）走fallback方法；违反了sentinel规则时，直接微服务不可用（熔断），走blockHandler指定的自定义方法。</p>\n</li>\n</ul>\n<h5 id=\"异常忽略属性\">异常忽略属性</h5>\n<ul>\n<li>选择性的配置当某些异常发生时，不触发fallback的兜底方法。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                  exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span></span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142238328.png\" alt=\"image-20230514223812171\" style=\"zoom:33%;\">\n<h3 id=\"SentinelResource-注解详解\">@SentinelResource 注解详解</h3>\n<h5 id=\"按资源名称限流-后续处理\">按资源名称限流+后续处理</h5>\n<ul>\n<li>配置流控规则——按资源名称添加流控规则</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RateLimitController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;byResource&quot;, blockHandler = &quot;handleException&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult <span class=\"title function_\">byResource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;按资源名称限流测试OK&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">2020L</span>, <span class=\"string\">&quot;serial001&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult <span class=\"title function_\">handleException</span><span class=\"params\">(BlockException exception)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">444</span>, exception.getClass().getCanonicalName() + <span class=\"string\">&quot;\\t 服务不可用&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"按照Url地址限流-后续处理\">按照Url地址限流+后续处理</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SentinelResource(value = &quot;byUrl&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CommonResult <span class=\"title function_\">byUrl</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">200</span>,<span class=\"string\">&quot;按url限流测试OK&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">2020L</span>,<span class=\"string\">&quot;serial002&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不管是<code>@GetMapping(rest url)</code>还是 <code>@SentinelResource</code>，只要是<code>唯一</code>的，就可以作为流控规则的资源名称。</p>\n</blockquote>\n<h5 id=\"自定义限流处理逻辑\">自定义限流处理逻辑</h5>\n<p><code>(8401)</code></p>\n<p>创建CustomerBlockHandler类用于自定义限流处理逻辑 <code>com.ry.sc.alibaba.myhandler.CustomerBlockHandler</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerBlockHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonResult <span class=\"title function_\">handlerException</span><span class=\"params\">(BlockException e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">4444</span>, <span class=\"string\">&quot;按客户自定义, global handlerException----1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonResult <span class=\"title function_\">handlerException2</span><span class=\"params\">(BlockException e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">4444</span>, <span class=\"string\">&quot;按客户自定义, global handlerException----2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改RateLimitController，使用自定义处理逻辑类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RateLimitController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;byResource&quot;, blockHandler = &quot;handleException&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult <span class=\"title function_\">byResource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;按资源名称限流测试OK&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">2020L</span>, <span class=\"string\">&quot;serial001&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult <span class=\"title function_\">handleException</span><span class=\"params\">(BlockException exception)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">444</span>, exception.getClass().getCanonicalName() + <span class=\"string\">&quot;\\t 服务不可用&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;byUrl&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult <span class=\"title function_\">byUrl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;按url限流测试OK&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">2020L</span>, <span class=\"string\">&quot;serial002&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//CustomerBlockHandler自定义类,来处理服务降级、限流提示.....</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义通用的限流处理逻辑，</span></span><br><span class=\"line\"><span class=\"comment\">     * blockHandlerClass = CustomerBlockHandler.class</span></span><br><span class=\"line\"><span class=\"comment\">     * blockHandler = handleException2</span></span><br><span class=\"line\"><span class=\"comment\">     * 上述配置：找CustomerBlockHandler类里的handleException2方法进行兜底处理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//自定义通用的限流处理逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;customerBlockHandler&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            blockHandlerClass = CustomerBlockHandler.class,</span></span><br><span class=\"line\"><span class=\"meta\">            blockHandler = &quot;handlerException2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommonResult <span class=\"title function_\">customerBlockHandler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CommonResult</span>(<span class=\"number\">200</span>, <span class=\"string\">&quot;按客户自定义&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Payment</span>(<span class=\"number\">2020L</span>, <span class=\"string\">&quot;serial003&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142135976.png\" alt=\"image-20230514213514828\" style=\"zoom:33%;\">\n<h3 id=\"非注解形式的自定义异常结果\">非注解形式的自定义异常结果</h3>\n<blockquote>\n<p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。异常结果都是flow limmiting（限流）。这样不够友好，无法得知是限流还是降级还是授权拦截。</p>\n</blockquote>\n<h5 id=\"异常类型\">异常类型</h5>\n<p>而如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BlockExceptionHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理请求被限流、降级、授权拦截时抛出的异常：BlockException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法有三个参数：</p>\n<ul>\n<li>HttpServletRequest request：request对象</li>\n<li>HttpServletResponse response：response对象</li>\n<li>BlockException e：被sentinel拦截时抛出的异常</li>\n</ul>\n<p>这里的BlockException包含多个不同的子类：</p>\n<table>\n<thead>\n<tr>\n<th><strong>异常</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FlowException</td>\n<td>限流异常</td>\n</tr>\n<tr>\n<td>ParamFlowException</td>\n<td>热点参数限流的异常</td>\n</tr>\n<tr>\n<td>DegradeException</td>\n<td>降级异常</td>\n</tr>\n<tr>\n<td>AuthorityException</td>\n<td>授权规则异常</td>\n</tr>\n<tr>\n<td>SystemBlockException</td>\n<td>系统规则异常</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"自定义异常处理\">自定义异常处理</h5>\n<p>下面，我们就在order-service定义一个自定义异常处理类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.order.sentinel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.BlockExceptionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SentinelExceptionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BlockExceptionHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;未知异常&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> <span class=\"number\">429</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> FlowException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;请求被限流了&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> ParamFlowException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;请求被热点参数限流&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> DegradeException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;请求被降级了&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> AuthorityException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;没有权限访问&quot;</span>;</span><br><span class=\"line\">            status = <span class=\"number\">401</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        response.setStatus(status);</span><br><span class=\"line\">        response.getWriter().println(<span class=\"string\">&quot;&#123;\\&quot;msg\\&quot;: &quot;</span> + msg + <span class=\"string\">&quot;, \\&quot;status\\&quot;: &quot;</span> + status + <span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启测试，在不同场景下，会返回不同的异常消息.</p>\n<p>限流：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191538014.png\" alt=\"image-20230519153849904\" style=\"zoom:33%;\">\n<p>授权拦截时：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191539996.png\" alt=\"image-20230519153900885\" style=\"zoom:33%;\">\n<h3 id=\"授权规则\">授权规则</h3>\n<p>授权规则可以对请求方来源做判断和控制。</p>\n<h4 id=\"授权规则-2\">授权规则</h4>\n<h5 id=\"基本规则\">基本规则</h5>\n<p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p>\n<ul>\n<li>\n<p>白名单：来源（origin）在白名单内的调用者允许访问</p>\n</li>\n<li>\n<p>黑名单：来源（origin）在黑名单内的调用者不允许访问</p>\n</li>\n</ul>\n<p>点击左侧菜单的授权，可以看到授权规则：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305171731611.png\" alt=\"image-20230517173147552\" style=\"zoom:33%;\">\n<ul>\n<li>\n<p>资源名：就是受保护的资源，例如/order/{orderId}</p>\n</li>\n<li>\n<p>流控应用：是来源者的名单，</p>\n<ul>\n<li>如果是勾选白名单，则名单中的来源被许可访问。</li>\n<li>如果是勾选黑名单，则名单中的来源被禁止访问。</li>\n</ul>\n</li>\n</ul>\n<p>比如：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305171732487.png\" alt=\"image-20230517173206431\" style=\"zoom:25%;\">\n<p>我们允许请求从gateway到order-service，不允许浏览器访问order-service，那么白名单中就要填写<strong>网关的来源名称（origin）</strong>。</p>\n<h5 id=\"如何获取origin\">如何获取origin</h5>\n<p>Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RequestOriginParser</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从请求request对象中获取origin，获取方式自定义</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">parseOrigin</span><span class=\"params\">(HttpServletRequest request)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法的作用就是从request对象中，获取请求者的origin值并返回。</p>\n<p>默认情况下，sentinel不管请求者从哪里来，返回值永远是default，也就是说一切请求的来源都被认为是一样的值default。</p>\n<p>因此，我们需要自定义这个接口的实现，让<strong>不同的请求，返回不同的origin</strong>。</p>\n<p>例如order-service服务中，我们定义一个RequestOriginParser的实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.order.sentinel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.RequestOriginParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderOriginParser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RequestOriginParser</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">parseOrigin</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求头</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">origin</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;origin&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(origin)) &#123;</span><br><span class=\"line\">            origin = <span class=\"string\">&quot;blank&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> origin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们会尝试从request-header中获取origin值。</p>\n<h5 id=\"给网关添加请求头\">给网关添加请求头</h5>\n<p>既然获取请求origin的方式是从reques-header中获取origin值，我们必须让<strong>所有从gateway路由到微服务的请求都带上origin头</strong>。</p>\n<p>这个需要利用之前学习的一个GatewayFilter来实现，AddRequestHeaderGatewayFilter。</p>\n<p>修改gateway服务中的application.yml，添加一个defaultFilter：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">default-filters:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">AddRequestHeader=origin,gateway</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"comment\"># ...略</span></span><br></pre></td></tr></table></figure>\n<p>这样，从gateway路由的所有请求都会带上origin头，值为gateway。而从其它地方到达微服务的请求则没有这个头。</p>\n<h5 id=\"配置授权规则\">配置授权规则</h5>\n<p>接下来，我们添加一个授权规则，放行origin值为gateway的请求。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305171733720.png\" alt=\"image-20230517173346671\" style=\"zoom:33%;\">\n<p>配置如下：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305171733768.png\" alt=\"image-20230517173304607\" style=\"zoom:33%;\">\n<p>现在，我们直接跳过网关，访问order-service服务：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305171734892.png\" alt=\"image-20230517173446733\" style=\"zoom:33%;\">\n<p>通过网关访问：</p>\n<blockquote>\n<p><code>10010 </code>是 网关定义的端口号</p>\n</blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305171733926.png\" alt=\"image-20230517173334875\" style=\"zoom:33%;\">\n<h3 id=\"持久化配置-2\">持久化配置</h3>\n<blockquote>\n<p>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则 就能看到。只要nacos里面的配置不删除，针对8401上的sentinel上的流控规则就持续存在。</p>\n</blockquote>\n<h6 id=\"生产者（8401）\">生产者（8401）</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 持久化--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yaml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8401</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cloudalibaba-sentinel-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span> <span class=\"comment\">#Nacos服务注册中心地址</span></span><br><span class=\"line\">    <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">      <span class=\"attr\">transport:</span></span><br><span class=\"line\">        <span class=\"comment\">#配置Sentinel dashboard地址</span></span><br><span class=\"line\">        <span class=\"attr\">dashboard:</span> <span class=\"string\">localhost:8080</span></span><br><span class=\"line\">        <span class=\"comment\">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8719</span></span><br><span class=\"line\">      <span class=\"comment\"># 关闭默认收敛所有URL的入口context，不然链路限流不生效</span></span><br><span class=\"line\">      <span class=\"comment\"># Spring Cloud Alibaba 需要2.1.1.RELEASE以上版本</span></span><br><span class=\"line\">      <span class=\"attr\">web-context-unify:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">#      filter:</span></span><br><span class=\"line\"><span class=\"comment\">#        enabled: false  # 关闭自动收敛</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">#持久化配置</span></span><br><span class=\"line\">      <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">ds1:</span></span><br><span class=\"line\">          <span class=\"attr\">nacos:</span></span><br><span class=\"line\">            <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">            <span class=\"attr\">dataId:</span> <span class=\"string\">cloudalibaba-sentinel-service</span></span><br><span class=\"line\">            <span class=\"attr\">groupId:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">            <span class=\"attr\">data-type:</span> <span class=\"string\">json</span></span><br><span class=\"line\">            <span class=\"attr\">rule-type:</span> <span class=\"string\">flow</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>添加nacos业务规则配置</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142250344.png\" style=\"zoom:33%;\">\n<p>测试：</p>\n<p><code>启动8401，访问8401任意接口，刷新Sentinel。可以看到Sentinel中加载了通过nacos持久化的规则配置文件。</code></p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142251095.png\" alt=\"image-20230514225144937\" style=\"zoom:33%;\">\n<h3 id=\"规则持久化\">规则持久化</h3>\n<blockquote>\n<p>现在，sentinel的所有规则都是内存存储，重启后所有规则都会丢失。在生产环境下，我们必须确保这些规则的持久化，避免丢失。</p>\n</blockquote>\n<h4 id=\"规则管理模式\">规则管理模式</h4>\n<p>规则是否能持久化，取决于规则管理模式，sentinel支持三种规则管理模式：</p>\n<ul>\n<li>原始模式：Sentinel的默认模式，将规则保存在内存，重启服务会丢失。</li>\n<li>pull模式</li>\n<li>push模式</li>\n</ul>\n<h5 id=\"pull模式\">pull模式</h5>\n<p>pull模式：控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191540071.png\" alt=\"image-20230519154049968\" style=\"zoom:33%;\">\n<h5 id=\"push模式\">push模式</h5>\n<p>push模式：控制台将配置规则推送到远程配置中心，例如Nacos。Sentinel客户端监听Nacos，获取配置变更的推送消息，完成本地配置更新。</p>\n<p><img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191541800.png\" alt></p>\n<h6 id=\"实现push模式\">实现push模式</h6>\n<p>就是添加到 nacos 中   会涉及修改源码（略）</p>\n<h2 id=\"Alibaba-Seata\">Alibaba Seata</h2>\n<blockquote>\n<p>作用： 主要处理分布式事务的问题</p>\n<ul>\n<li>只要用到分布式，必然会提及分布式的事务</li>\n</ul>\n<p>在<code>分布式之前</code>，<code>一切组件全都在一台机器上</code>。</p>\n<p>在<code>使用分布式之后</code>，单体应用被拆分成微服务应用，原来的<code>三个模块</code>被<code>拆分成三个独立的应用</code>，<code>分别使用三个独立的数据源</code>。</p>\n<p>一个业务操作需要调用三个服务来完成。就是说 ： 一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</p>\n<p>此时每个服务内部的数据一致性由<strong>本地</strong>事务来保证，但是<strong>全局</strong>的数据一致性问题没法保证。</p>\n</blockquote>\n<h3 id=\"分布式事务\">分布式事务</h3>\n<p><strong>分布式事务</strong>，就是指不是在单个服务或单个数据库架构下，产生的事务，例如：</p>\n<ul>\n<li>跨数据源的分布式事务</li>\n<li>跨服务的分布式事务</li>\n<li>综合情况</li>\n</ul>\n<p>比如：</p>\n<p>订单的创建、库存的扣减、账户扣款在每一个服务和数据库内是一个本地事务，可以保证ACID原则。</p>\n<p>但是当我们把三件事情看做一个&quot;业务&quot;，要满足保证“业务”的原子性，要么所有操作全部成功，要么全部失败，不允许出现部分成功部分失败的现象，这就是<strong>分布式系统下的事务</strong>了。</p>\n<h3 id=\"CAP定理\">CAP定理</h3>\n<ul>\n<li>Consistency（一致性）      用户访问分布式系统中的任意节点，得到的数据必须一致。</li>\n<li>Availability（可用性）        用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝。</li>\n<li>Partition tolerance （分区容错性）\n<ul>\n<li>分区： 因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</li>\n<li>容错： 在集群出现分区时，整个系统也要持续对外提供服务</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"BASE理论\">BASE理论</h3>\n<p>BASE理论是对CAP的一种解决思路，包含三个思想：</p>\n<ul>\n<li><strong>Basically Available</strong> <strong>（基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li>\n<li>**Soft State（软状态）：**在一定时间内，允许出现中间状态，比如临时的不一致状态。</li>\n<li><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li>\n</ul>\n<h3 id=\"解决分布式事务的思路\">解决分布式事务的思路</h3>\n<p>分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论，有两种解决思路：</p>\n<ul>\n<li>AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。</li>\n<li>CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态。</li>\n</ul>\n<p>但不管是哪一种模式，都需要在子系统事务之间互相通讯，协调事务状态，也就是需要一个<strong>事务协调者(TC)</strong></p>\n<p>这里的子系统事务，称为<strong>分支事务</strong>；有关联的各个分支事务在一起称为<strong>全局事务</strong>。</p>\n<h3 id=\"Seata的架构\">Seata的架构</h3>\n<h4 id=\"一ID-三组件\">一ID+三组件</h4>\n<p>一ID（<strong>全局唯一的事务ID</strong>）：Transaction ID XID，在这个事务ID下的所有事务会被统一控制</p>\n<p><strong>三组件</strong>：</p>\n<ul>\n<li>\n<p><strong>Transaction Coordinator (TC)</strong>：事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚；（Server端，为单独服务器部署）</p>\n</li>\n<li>\n<p><strong>Transaction Manager ™</strong>：事务管理器，控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议；</p>\n</li>\n<li>\n<p><strong>Resource Manager (RM)</strong>：资源管理器，控制分支事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚</p>\n</li>\n<li>\n<p>Seata分TC、TM和RM三个角色，<strong>TC（Server端）为单独服务端部署</strong>，<strong>TM和RM（Client端）由业务系统集成（微服务）</strong>。</p>\n<blockquote>\n<ul>\n<li>\n<p>TC：seata服务器； （我们电脑上启动的seata ）</p>\n</li>\n<li>\n<p>TM：事物的发起者，业务的入口。 哪个微服务使用了**@GlobalTransactional**哪个就是TM</p>\n</li>\n<li>\n<p>RM：事务的参与者，一个数据库就是一个RM。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"seata的解决方案\">seata的解决方案</h4>\n<blockquote>\n<p>（解决原理 与 实践 见： <code>/Users/yangrui/Downloads/A_Java学习资源/Java_SpringCloud/黑马44h/学习资料/day02-分布式事务/讲义/分布式事务.md</code>  和<code>/Users/yangrui/Z_Typora/Java-框架/SpringCloud:Dubbo/SpringCloud2020sgg.md</code>）</p>\n</blockquote>\n<p>Seata基于上述架构提供了四种不同的分布式事务解决方案：</p>\n<ul>\n<li>XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li>\n<li>TCC模式：最终一致的分阶段事务模式，有业务侵入</li>\n<li>AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li>\n<li>SAGA模式：长事务模式，有业务侵入</li>\n</ul>\n<p>无论哪种方案，都离不开TC，也就是事务的协调者。</p>\n<h4 id=\"分布式控制事务流程\">分布式控制事务流程</h4>\n<ul>\n<li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个<strong>全局唯一的 XID</strong>；</li>\n<li>XID 在微服务调用链路的上下文中传播；（也就是在多个TM，RM中传播）</li>\n<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</li>\n<li>TM 向 TC 发起针对 XID 的全局提交或回滚决议；</li>\n<li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li>\n</ul>\n<blockquote>\n<ul>\n<li>TM 开启分布式事务（TM 向 TC 注册全局事务记录）；</li>\n<li>按业务场景，编排数据库、服务等事务内资源（RM 向 TC 汇报资源准备状态 ）；</li>\n<li>TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交/回滚分布式事务）；</li>\n<li>TC 汇总事务信息，决定分布式事务是提交还是回滚；</li>\n<li>TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。</li>\n</ul>\n</blockquote>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142256687.png\" alt=\"image-20230514225609527\" style=\"zoom:33%;\">\n<blockquote>\n<p>此处： <code>nacos</code>作为<code>seata</code>的注册/配置中心</p>\n</blockquote>\n<h6 id=\"模块之间的相互调用-只有环境\">模块之间的相互调用(只有环境)</h6>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--nacos--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--seata--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 因为兼容版本问题,所以需要剔除它自带的seata的包 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     \t\t<span class=\"comment\">&lt;!-- 要跟我们安装SeaTa的一致！ --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--feign--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--web-actuator--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">2001</span>   <span class=\"string\">//2002</span>    <span class=\"string\">//2003</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-order-service</span>   <span class=\"string\">//seata-storage-service</span>    <span class=\"string\">//seata-account-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"comment\">#自定义事务组名称需要与seata-server中file.conf中配置的事务组ID对应</span></span><br><span class=\"line\">        <span class=\"comment\">#vgroup_mapping.my_test_tx_group = &quot;my_group&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span> <span class=\"string\">my_group</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">00000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">io:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n<p>主启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAutoDataSourceProxy</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>版本要对应的上</p>\n<p>==SpringCloud Hoxton.SR9+SpringCloud Alibaba 2.2.6.RELEASE+Spring Boot 2.3.2RELEASE+Nacos 2.0.3+Seata 我用的1.4.2。==</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142302963.png\" alt=\"image-20230514230239801\" style=\"zoom:33%;\">\n</blockquote>\n<h3 id=\"Seata全局事务怎么使用\">Seata全局事务怎么使用</h3>\n<p><code>@GlobalTransactional</code>&lt;这个注解只能用在方法上&gt;</p>\n<ul>\n<li>name：给定全局事务实例的名称，随便取，唯一即可</li>\n<li>rollbackFor：当发生什么样的异常时，进行回滚</li>\n<li>noRollbackFor：发生什么样的异常不进行回滚。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局事务，发生异常进行回滚</span></span><br><span class=\"line\">  <span class=\"meta\">@GlobalTransactional(name = &quot;lsp-create-order&quot;, rollbackFor = Exception.class)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>如果没有加 注解<code>@GlobalTransactional</code></li>\n<li><code>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为1；而且由于feign的重试机制，账户余额还有可能被多次扣减。</code></li>\n<li>添加**@GlobalTransactional**注解</li>\n<li>出现异常  ，数据库中的数据根本就没有变化，记录都添加不进来，说明回滚成功！</li>\n</ul>\n</blockquote>\n<h3 id=\"原理性知识\">原理性知识</h3>\n<h5 id=\"AT模式\">AT模式</h5>\n<ul>\n<li>如何做到对业务的无侵入</li>\n</ul>\n<p>Seata有四大模式：<code>AT（默认）、TCC、SAGA、XA</code>。（阿里云上的AT叫做GTS，收费）</p>\n<p>AT模式两阶段提交协议的演变：</p>\n<ul>\n<li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li>\n<li>二阶段：\n<ul>\n<li>提交异步化，非常快速地完成。</li>\n<li>回滚通过一阶段的回滚日志进行反向补偿（前面insert，后面回滚时就delete）。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"一阶段加载\">一阶段加载</h6>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142311676.png\" alt=\"img\" style=\"zoom: 50%;\">\n<h6 id=\"二阶段提交\">二阶段提交</h6>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142311848.png\" alt=\"image-20230514231139772\" style=\"zoom:33%;\">\n<h6 id=\"二阶段回滚\">二阶段回滚</h6>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305142312842.png\" alt=\"img\" style=\"zoom:50%;\">\n<h5 id=\"常用的分布式事务\">常用的分布式事务</h5>\n<ol>\n<li>\n<p><strong>XA分布式事务协议 - 2PC（两阶段提交实现）</strong></p>\n<p>这里的PC实际上指的是Prepare和Commit，也就是说它分为两个阶段，一个是准备一个是提交，</p>\n<p>整个过程的参与者一共有两个角色，一个是事务的<code>执行者</code>，一个是事务的<code>协调者</code>，实际上<code>整个分布式事务的运作都需要依靠协调者来维持</code>：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151545849.png\" alt=\"image-20230515154527763\" style=\"zoom:33%;\">\n<p>在准备和提交阶段，会进行：</p>\n<ul>\n<li>\n<p><strong>准备阶段：</strong></p>\n<p>一个分布式事务是由协调者来开启的，首先协调者会向所有的事务执行者发送事务内容，等待所有的事务执行者答复。</p>\n<p>各个事务执行者开始执行事务操作，但是不进行提交，并将undo和redo信息记录到事务日志中。</p>\n<p>如果事务执行者执行事务成功，那么就告诉协调者成功Yes，否则告诉协调者失败No，不能提交事务。</p>\n</li>\n<li>\n<p><strong>提交阶段：</strong></p>\n<p>当所有的执行者都反馈完成之后，进入第二阶段。</p>\n<p>协调者会检查各个执行者的反馈内容，如果所有的执行者都返回成功，那么就告诉所有的执行者可以提交事务了，最后再释放锁资源。</p>\n<p>如果有至少一个执行者返回失败或是超时，那么就让所有的执行者都回滚，分布式事务执行失败。</p>\n</li>\n</ul>\n<p>虽然这种方式看起来比较简单，但是存在以下几个问题：</p>\n<ul>\n<li>事务协调者是非常核心的角色，一旦出现问题，将导致整个分布式事务不能正常运行。</li>\n<li>如果提交阶段发生网络问题，导致某些事务执行者没有收到协调者发来的提交命令，将导致某些执行者提交某些执行者没提交，这样肯定是不行的。</li>\n</ul>\n</li>\n<li>\n<p><strong>XA分布式事务协议 - 3PC（三阶段提交实现）</strong></p>\n<p>三阶段提交是在二阶段提交基础上的改进版本，主要是加入了超时机制，同时在协调者和执行者中都引入了超时机制。</p>\n<p>三个阶段分别进行：</p>\n<ul>\n<li>\n<p><strong>CanCommit阶段：</strong></p>\n<p>协调者向执行者发送CanCommit请求，询问是否可以执行事务提交操作，然后开始等待执行者的响应。</p>\n<p>执行者接收到请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态，否则返回No</p>\n</li>\n<li>\n<p><strong>PreCommit阶段：</strong></p>\n<p>协调者根据执行者的反应情况来决定是否可以进入第二阶段事务的PreCommit操作。</p>\n<p>如果所有的执行者都返回Yes，则协调者向所有执行者发送PreCommit请求，并进入Prepared阶段，执行者接收到请求后，会执行事务操作，并将undo和redo信息记录到事务日志中，如果成功执行，则返回成功响应。</p>\n<p>如果所有的执行者至少有一个返回No，则协调者向所有执行者发送abort请求，所有的执行者在收到请求或是超过一段时间没有收到任何请求时，会直接中断事务。</p>\n</li>\n<li>\n<p><strong>DoCommit阶段：</strong></p>\n<p>该阶段进行真正的事务提交。</p>\n<p>协调者接收到所有执行者发送的成功响应，那么他将从PreCommit状态进入到DoCommit状态，并向所有执行者发送doCommit请求，执行者接收到doCommit请求之后，开始执行事务提交，并在完成事务提交之后释放所有事务资源，并最后向协调者发送确认响应，协调者接收到所有执行者的确认响应之后，完成事务（如果因为网络问题导致执行者没有收到doCommit请求，执行者会在超时之后直接提交事务，虽然执行者只是猜测协调者返回的是doCommit请求，但是因为前面的两个流程都正常执行，所以能够在一定程度上认为本次事务是成功的，因此会直接提交）</p>\n<p>协调者没有接收至少一个执行者发送的成功响应（也可能是响应超时），那么就会执行中断事务，协调者会向所有执行者发送abort请求，执行者接收到abort请求之后，利用其在PreCommit阶段记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源，执行者完成事务回滚之后，向协调者发送确认消息， 协调者接收到参与者反馈的确认消息之后，执行事务的中断。</p>\n</li>\n</ul>\n<p>相比两阶段提交，三阶段提交的优势是显而易见的，当然也有缺点：</p>\n<ul>\n<li>3PC在2PC的第一阶段和第二阶段中插入一个准备阶段，保证了在最后提交阶段之前各参与节点的状态是一致的。</li>\n<li>一旦参与者无法及时收到来自协调者的信息之后，会默认执行Commit，这样就不会因为协调者单方面的故障导致全局出现问题。</li>\n<li>但是我们知道，实际上超时之后的Commit决策本质上就是一个赌注罢了，如果此时协调者发送的是abort请求但是超时未接收，那么就会直接导致数据一致性问题。</li>\n</ul>\n</li>\n<li>\n<p><strong>TCC（补偿事务）</strong></p>\n<p>补偿事务TCC就是Try、Confirm、Cancel，它对业务有侵入性，一共分为三个阶段，我们依次来解读一下。</p>\n<ul>\n<li>\n<p><strong>Try阶段：</strong></p>\n<p>比如我们需要在借书时，将书籍的库存<code>-1</code>，并且用户的借阅量也<code>-1</code>，但是这个操作，除了直接对库存和借阅量进行修改之外，还需要将减去的值，单独存放到冻结表中，但是此时不会创建借阅信息，也就是说只是预先把关键的东西给处理了，预留业务资源出来。</p>\n</li>\n<li>\n<p><strong>Confirm阶段：</strong></p>\n<p>如果Try执行成功无误，那么就进入到Confirm阶段，接着之前，我们就该创建借阅信息了，只能使用Try阶段预留的业务资源，如果创建成功，那么就对Try阶段冻结的值，进行解冻，整个流程就完成了。当然，如果失败了，那么进入到Cancel阶段。</p>\n</li>\n<li>\n<p><strong>Cancel阶段：</strong></p>\n<p>不用猜了，那肯定是把冻结的东西还给人家，因为整个借阅操作压根就没成功。就像你付了款买了东西但是网络问题，导致交易失败，钱不可能不还给你吧。</p>\n<p>跟XA协议相比，TCC就没有协调者这一角色的参与了，而是自主通过上一阶段的执行情况来确保正常，充分利用了集群的优势，性能也是有很大的提升。但是缺点也很明显，它与业务具有一定的关联性，需要开发者去编写更多的补偿代码，同时并不一定所有的业务流程都适用于这种形式。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"Seata支持4种事务模式\">Seata支持4种事务模式</h5>\n<ul>\n<li>\n<p>AT：本质上就是2PC的升级版，在 AT 模式下，用户只需关心自己的 “业务SQL”</p>\n<ol>\n<li>一阶段，Seata 会拦截“业务 SQL”，首先解析 SQL 语义，找到“业务 SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”，然后执行“业务 SQL”更新业务数据，在业务数据更新之后，再将其保存成“after image”，最后生成行锁。以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</li>\n<li>二阶段如果确认提交的话，因为“业务 SQL”在一阶段已经提交至数据库， 所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可，当然如果需要回滚，那么就用“before image”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “after image”，如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。</li>\n</ol>\n</li>\n<li>\n<p>TCC：和我们上面讲解的思路是一样的。</p>\n</li>\n<li>\n<p>XA：同上，但是要求数据库本身支持这种模式才可以。</p>\n</li>\n<li>\n<p>Saga：用于处理长事务，每个执行者需要实现事务的正向操作和补偿操作：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305151547951.png\" alt=\"image-20230306233328901\" style=\"zoom:33%;\">\n</li>\n</ul>\n<p>那么，以AT模式为例，我们的程序如何才能做到不对业务进行侵入的情况下实现分布式事务呢？</p>\n<p>实际上，Seata客户端，是通过对数据源进行代理实现的，使用的是DataSourceProxy类，所以在程序这边，我们只需要将对应的代理类注册为Bean即可（0.9版本之后支持自动进行代理，不用我们手动操作）</p>\n<h3 id=\"微服务集成Seata完整案例\">微服务集成Seata完整案例</h3>\n<h6 id=\"引入依赖\">引入依赖</h6>\n<p>首先，在order-service中引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--seata--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--版本较低，1.3.0，因此排除--&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;seata.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"配置TC地址\">配置TC地址</h6>\n<p>在order-service中的application.yml中，配置TC服务信息，通过注册中心nacos，结合服务名称获取TC地址：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">seata:</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span> <span class=\"comment\"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span> <span class=\"comment\"># 注册中心类型 nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span> <span class=\"comment\"># nacos地址</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">&quot;&quot;</span> <span class=\"comment\"># namespace，默认为空</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span> <span class=\"comment\"># 分组，默认是DEFAULT_GROUP</span></span><br><span class=\"line\">      <span class=\"attr\">application:</span> <span class=\"string\">seata-tc-server</span> <span class=\"comment\"># seata服务名称</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">  <span class=\"attr\">tx-service-group:</span> <span class=\"string\">seata-demo</span> <span class=\"comment\"># 事务组名称</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span></span><br><span class=\"line\">    <span class=\"attr\">vgroup-mapping:</span> <span class=\"comment\"># 事务组与cluster的映射关系</span></span><br><span class=\"line\">      <span class=\"attr\">seata-demo:</span> <span class=\"string\">SH</span></span><br></pre></td></tr></table></figure>\n<p>微服务如何根据这些配置寻找TC的地址呢？</p>\n<p>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：</p>\n<ul>\n<li>namespace：命名空间</li>\n<li>group：分组</li>\n<li>application：服务名</li>\n<li>cluster：集群名</li>\n</ul>\n<p>以上四个信息，在刚才的yaml文件中都能找到：</p>\n<img src=\"https://gitee.com/Ryang1118/typora/raw/master/images/202305191554641.png\" alt=\"image-20230519155429518\" style=\"zoom:33%;\">\n<p>namespace为空，就是默认的public</p>\n<p>结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SH，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了</p>\n<h3 id=\"高可用\">高可用</h3>\n<p><code>就是搭建 seata  的集群 </code>  并   <code>将事务组映射配置到nacos </code>   最后   <code>让微服务读取nacos配置实现   统一由nacos的client.properties来决定微服务连接的集群具体是哪一个</code></p>\n<h2 id=\"分布式缓存（redis）\">分布式缓存（redis）</h2>\n<h2 id=\"多级缓存\">多级缓存</h2>\n<p>我们把缓存分为两类：</p>\n<ul>\n<li>分布式缓存，例如Redis：\n<ul>\n<li>优点：存储容量更大、可靠性更好、可以在集群间共享</li>\n<li>缺点：访问缓存有网络开销</li>\n<li>场景：缓存数据量较大、可靠性要求较高、需要在集群间共享</li>\n</ul>\n</li>\n<li>进程本地缓存，例如HashMap、GuavaCache：\n<ul>\n<li>优点：读取本地内存，没有网络开销，速度更快</li>\n<li>缺点：存储容量有限、可靠性较低、无法共享</li>\n<li>场景：性能要求较高，缓存数据量较小</li>\n</ul>\n</li>\n</ul>\n<p>我们今天会利用Caffeine<code>性能遥遥领先</code>框架来实现JVM进程缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache&lt;String, String&gt; cache = Caffeine.newBuilder().build();</span><br></pre></td></tr></table></figure>\n<h3 id=\"JVM进程缓存\">JVM进程缓存</h3>\n<p>Caffeine提供了三种缓存驱逐(清除)策略：</p>\n<ul>\n<li>\n<p><strong>基于容量</strong>：设置缓存的数量上限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建缓存对象</span></span><br><span class=\"line\">Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class=\"line\">    .maximumSize(<span class=\"number\">1</span>) <span class=\"comment\">// 设置缓存大小上限为 1</span></span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>基于时间</strong>：设置缓存的有效时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建缓存对象</span></span><br><span class=\"line\">Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class=\"line\">    <span class=\"comment\">// 设置缓存有效期为 10 秒，从最后一次写入开始计时 </span></span><br><span class=\"line\">    .expireAfterWrite(Duration.ofSeconds(<span class=\"number\">10</span>)) </span><br><span class=\"line\">    .build();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>基于引用</strong>：设置缓存为软引用或弱引用，利用GC来回收缓存数据。性能较差，不建议使用。</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>：在默认情况下，当一个缓存元素过期的时候，Caffeine不会自动立即将其清理和驱逐。而是在一次读或写操作后，或者在空闲时间完成对失效数据的驱逐。</p>\n</blockquote>\n<h3 id=\"实现多级缓存\">实现多级缓存</h3>\n<p>多级缓存的实现离不开<code>Nginx</code>编程，而Nginx编程又离不开<code>OpenResty</code>。</p>\n<p><code>OpenResty</code>的很多功能都依赖于其目录下的<code>Lua</code>库，需要在<code>nginx.conf</code>中指定依赖库的目录，并导入依赖：</p>\n<h4 id=\"Redis-缓存预热\">Redis 缓存预热</h4>\n<p>实现方法：</p>\n<blockquote>\n<p>缓存预热需要在项目启动时完成，并且必须是拿到RedisTemplate之后。</p>\n<p>这里我们利用<code>InitializingBean</code>接口来实现，因为<code>InitializingBean</code>可以在对象被Spring创建并且成员变量全部注入后执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.heima.item.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.heima.item.pojo.Item;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.heima.item.pojo.ItemStock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.heima.item.service.IItemService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.heima.item.service.IItemStockService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> StringRedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> IItemService itemService;</span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> IItemStockService stockService;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ObjectMapper</span> <span class=\"variable\">MAPPER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 初始化缓存</span></span><br><span class=\"line\">     <span class=\"comment\">// 1.查询商品信息</span></span><br><span class=\"line\">     List&lt;Item&gt; itemList = itemService.list();</span><br><span class=\"line\">     <span class=\"comment\">// 2.放入缓存</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Item item : itemList) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 2.1.item序列化为JSON</span></span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> MAPPER.writeValueAsString(item);</span><br><span class=\"line\">         <span class=\"comment\">// 2.2.存入redis</span></span><br><span class=\"line\">         redisTemplate.opsForValue().set(<span class=\"string\">&quot;item:id:&quot;</span> + item.getId(), json);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 3.查询商品库存信息</span></span><br><span class=\"line\">     List&lt;ItemStock&gt; stockList = stockService.list();</span><br><span class=\"line\">     <span class=\"comment\">// 4.放入缓存</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (ItemStock stock : stockList) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 2.1.item序列化为JSON</span></span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> MAPPER.writeValueAsString(stock);</span><br><span class=\"line\">         <span class=\"comment\">// 2.2.存入redis</span></span><br><span class=\"line\">         redisTemplate.opsForValue().set(<span class=\"string\">&quot;item:stock:id:&quot;</span> + stock.getId(), json);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"缓存同步（canal）\">缓存同步（canal）</h3>\n<p><strong>设置有效期</strong>：给缓存设置有效期，到期后自动删除。再次查询时更新</p>\n<ul>\n<li>优势：简单、方便</li>\n<li>缺点：时效性差，缓存过期之前可能不一致</li>\n<li>场景：更新频率较低，时效性要求低的业务</li>\n</ul>\n<p><strong>同步双写</strong>：在修改数据库的同时，直接修改缓存</p>\n<ul>\n<li>优势：时效性强，缓存与数据库强一致</li>\n<li>缺点：有代码侵入，耦合度高；</li>\n<li>场景：对一致性、时效性要求较高的缓存数据</li>\n</ul>\n<p>**异步通知：**修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据</p>\n<ul>\n<li>优势：低耦合，可以同时通知多个缓存服务</li>\n<li>缺点：时效性一般，可能存在中间不一致状态</li>\n<li>场景：时效性要求一般，有多个服务需要同步</li>\n</ul>\n<h2 id=\"分布式搜索引擎（es）\">分布式搜索引擎（es）</h2>\n","_path":"post/f313cf4f.html","_link":"http://rycan.top/post/f313cf4f.html","_id":"clmhxgjgn0060p70paloh19nb"}}